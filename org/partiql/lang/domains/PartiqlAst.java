/*
 * Decompiled with CFR 0.153-SNAPSHOT (d6f6758-dirty).
 * 
 * Could not load the following classes:
 *  com.amazon.ionelement.api.AnyElement
 *  com.amazon.ionelement.api.Ion
 *  com.amazon.ionelement.api.IonElement
 *  com.amazon.ionelement.api.IonElementExtensionsKt
 *  com.amazon.ionelement.api.IonLocation
 *  com.amazon.ionelement.api.IonLocationKt
 *  com.amazon.ionelement.api.IonMeta
 *  com.amazon.ionelement.api.SeqElement
 *  com.amazon.ionelement.api.SexpElement
 *  org.jetbrains.annotations.NotNull
 *  org.jetbrains.annotations.Nullable
 *  org.partiql.pig.runtime.DomainNode
 *  org.partiql.pig.runtime.DomainVisitorBase
 *  org.partiql.pig.runtime.DomainVisitorFoldBase
 *  org.partiql.pig.runtime.DomainVisitorTransformBase
 *  org.partiql.pig.runtime.ErrorHelpersKt
 *  org.partiql.pig.runtime.IntermediateRecord
 *  org.partiql.pig.runtime.IntermediateRecordKt
 *  org.partiql.pig.runtime.IonElementHelpersKt
 *  org.partiql.pig.runtime.IonElementTransformerBase
 *  org.partiql.pig.runtime.LongPrimitive
 *  org.partiql.pig.runtime.PrimitiveUtilsKt
 *  org.partiql.pig.runtime.SymbolPrimitive
 */
package org.partiql.lang.domains;

import com.amazon.ionelement.api.AnyElement;
import com.amazon.ionelement.api.Ion;
import com.amazon.ionelement.api.IonElement;
import com.amazon.ionelement.api.IonElementExtensionsKt;
import com.amazon.ionelement.api.IonLocation;
import com.amazon.ionelement.api.IonLocationKt;
import com.amazon.ionelement.api.IonMeta;
import com.amazon.ionelement.api.SeqElement;
import com.amazon.ionelement.api.SexpElement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import kotlin.Lazy;
import kotlin.LazyKt;
import kotlin.LazyThreadSafetyMode;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;
import kotlin.Pair;
import kotlin.TuplesKt;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.ArraysKt;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.JvmStatic;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.PropertyReference1Impl;
import kotlin.jvm.internal.Reflection;
import kotlin.jvm.internal.SpreadBuilder;
import kotlin.ranges.IntRange;
import kotlin.reflect.KProperty;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.partiql.pig.runtime.DomainNode;
import org.partiql.pig.runtime.DomainVisitorBase;
import org.partiql.pig.runtime.DomainVisitorFoldBase;
import org.partiql.pig.runtime.DomainVisitorTransformBase;
import org.partiql.pig.runtime.ErrorHelpersKt;
import org.partiql.pig.runtime.IntermediateRecord;
import org.partiql.pig.runtime.IntermediateRecordKt;
import org.partiql.pig.runtime.IonElementHelpersKt;
import org.partiql.pig.runtime.IonElementTransformerBase;
import org.partiql.pig.runtime.LongPrimitive;
import org.partiql.pig.runtime.PrimitiveUtilsKt;
import org.partiql.pig.runtime.SymbolPrimitive;

@Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b,\u0018\u0000 \u00072\u00020\u0001:*\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002\u00a8\u0006-"}, d2={"Lorg/partiql/lang/domains/PartiqlAst;", "", "()V", "Assignment", "Builder", "CaseSensitivity", "ColumnComponent", "Companion", "ConflictAction", "DdlOp", "DmlOp", "DmlOpList", "Expr", "ExprPair", "ExprPairList", "FromSource", "GroupBy", "GroupKey", "GroupKeyList", "GroupingStrategy", "Identifier", "IonElementTransformer", "JoinType", "Let", "LetBinding", "OnConflict", "OrderBy", "OrderingSpec", "PartiqlAstBuilder", "PartiqlAstNode", "PathStep", "ProjectItem", "Projection", "ReturningElem", "ReturningExpr", "ReturningMapping", "ScopeQualifier", "SetQuantifier", "SortSpec", "Statement", "TimeValue", "Type", "Visitor", "VisitorFold", "VisitorTransform", "lang"})
public final class PartiqlAst {
    public static final Companion Companion = new Companion(null);

    private PartiqlAst() {
    }

    @JvmStatic
    @NotNull
    public static final Builder BUILDER() {
        return Companion.BUILDER();
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u00a0\b\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0011\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\t\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\bf\u0018\u00002\u00020\u0001J\"\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010\b\u001a\u00020\t2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010\n\u001a\u00020\u000b2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J0\u0010\f\u001a\u00020\r2\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010\f\u001a\u00020\r2\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010\u0014J\"\u0010\u0015\u001a\u00020\u00162\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u0017\u001a\u00020\u00182\u0006\u0010\u0019\u001a\u00020\u00102\u0006\u0010\u001a\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J;\u0010\u001b\u001a\u00020\u001c2\u0012\u0010\u001d\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010\u001eJ2\u0010\u001b\u001a\u00020\u001c2\u000e\b\u0002\u0010\u001d\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010\u001f\u001a\u00020 2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010!\u001a\u00020\"2\u0006\u0010\u001a\u001a\u00020\u00102\u0006\u0010#\u001a\u00020\u00102\u0006\u0010$\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010%\u001a\u00020&2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010'\u001a\u00020(2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J8\u0010)\u001a\u00020*2\u0006\u0010+\u001a\u00020\u00062\f\u0010,\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010)\u001a\u00020*2\u0006\u0010+\u001a\u00020\u00062\u0006\u0010-\u001a\u00020\u00102\u0012\u0010,\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010.J:\u0010/\u001a\u0002002\u0006\u00101\u001a\u0002022\u0006\u0010+\u001a\u00020\u00062\u0006\u00103\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u00104\u001a\u0002002\u0006\u00101\u001a\u0002022\u0006\u0010+\u001a\u0002052\u0006\u00103\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J8\u00106\u001a\u00020*2\u0006\u0010+\u001a\u0002052\f\u0010,\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u00106\u001a\u00020*2\u0006\u0010+\u001a\u0002052\u0006\u0010-\u001a\u00020\u00102\u0012\u0010,\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u00107J\"\u00108\u001a\u0002092\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010:\u001a\u00020;2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010<\u001a\u00020=2\u0006\u0010\u001a\u001a\u00020\u00102\u0006\u0010>\u001a\u00020?2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J3\u0010@\u001a\u00020A2\n\b\u0002\u0010B\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010DJ.\u0010E\u001a\u00020A2\n\b\u0002\u0010B\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J3\u0010G\u001a\u00020H2\n\b\u0002\u0010B\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010IJ.\u0010J\u001a\u00020H2\n\b\u0002\u0010B\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010K\u001a\u00020L2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J0\u0010M\u001a\u00020N2\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010M\u001a\u00020N2\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010OJ8\u0010P\u001a\u00020Q2\u0006\u0010R\u001a\u00020S2\f\u0010T\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010P\u001a\u00020Q2\u0006\u0010R\u001a\u00020S2\u0006\u0010U\u001a\u00020\u00102\u0012\u0010T\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010VJ*\u0010W\u001a\u00020X2\u0006\u0010Y\u001a\u00020\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J*\u0010Z\u001a\u00020X2\u0006\u0010Y\u001a\u0002052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010[\u001a\u00020\\2\u0006\u0010]\u001a\u00020C2\u0006\u0010^\u001a\u00020C2\u0006\u0010_\u001a\u00020C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010`\u001a\u00020a2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010b\u001a\u00020\\2\u0006\u0010]\u001a\u00020F2\u0006\u0010^\u001a\u00020F2\u0006\u0010_\u001a\u00020F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J*\u0010c\u001a\u00020d2\u0006\u0010e\u001a\u00020f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J?\u0010g\u001a\u00020h2\n\b\u0002\u0010i\u001a\u0004\u0018\u00010C2\n\b\u0002\u0010j\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010kJ:\u0010l\u001a\u00020h2\n\b\u0002\u0010i\u001a\u0004\u0018\u00010F2\n\b\u0002\u0010j\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010m\u001a\u00020n2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010o\u001a\u00020p2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\"\u0010q\u001a\u00020r2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J0\u0010s\u001a\u00020t2\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010s\u001a\u00020t2\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0002\u0010uJN\u0010v\u001a\u00020w2\u0006\u0010x\u001a\u00020y2\n\b\u0002\u0010#\u001a\u0004\u0018\u00010z2\n\b\u0002\u0010{\u001a\u0004\u0018\u00010\u00102\n\b\u0002\u0010|\u001a\u0004\u0018\u00010}2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J1\u0010~\u001a\u00020y2\r\u0010\u007f\u001a\t\u0012\u0005\u0012\u00030\u0080\u00010\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JH\u0010~\u001a\u00020y2\b\u0010\u0081\u0001\u001a\u00030\u0080\u00012\u0014\u0010\u007f\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u0080\u00010\u0013\"\u00030\u0080\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0082\u0001J$\u0010\u0083\u0001\u001a\u00030\u0084\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u0085\u0001\u001a\u00030\u0086\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u0087\u0001\u001a\u00030\u0088\u00012\u0007\u0010\u0089\u0001\u001a\u00020S2\u0007\u0010\u008a\u0001\u001a\u00020S2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J,\u0010\u008b\u0001\u001a\u00030\u008c\u00012\u0006\u0010Y\u001a\u00020S2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u008d\u0001\u001a\u00030\u008e\u00012\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u008d\u0001\u001a\u00030\u008e\u00012\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u008f\u0001J:\u0010\u0090\u0001\u001a\u00030\u0091\u00012\u0006\u00101\u001a\u0002022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JV\u0010\u0090\u0001\u001a\u00030\u0091\u00012\u0006\u00101\u001a\u0002022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0092\u0001JG\u0010\u0093\u0001\u001a\u00030\u0094\u00012\u0007\u0010\u0095\u0001\u001a\u00020\u00062\u0012\u0010,\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0096\u0001J=\u0010\u0093\u0001\u001a\u00030\u0094\u00012\u0007\u0010\u0095\u0001\u001a\u00020\u00062\u000e\b\u0002\u0010,\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JG\u0010\u0097\u0001\u001a\u00030\u0094\u00012\u0007\u0010\u0095\u0001\u001a\u0002052\u0012\u0010,\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0098\u0001J=\u0010\u0097\u0001\u001a\u00030\u0094\u00012\u0007\u0010\u0095\u0001\u001a\u0002052\u000e\b\u0002\u0010,\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u0099\u0001\u001a\u00030\u009a\u00012\u0007\u0010\u009b\u0001\u001a\u00020\u00102\u0007\u0010\u009c\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JA\u0010\u009d\u0001\u001a\u00030\u009e\u00012\u0015\u0010\u009f\u0001\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u009a\u00010\u0013\"\u00030\u009a\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00a0\u0001J6\u0010\u009d\u0001\u001a\u00030\u009e\u00012\u0010\b\u0002\u0010\u009f\u0001\u001a\t\u0012\u0005\u0012\u00030\u009a\u00010\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u00a1\u0001\u001a\u00030\u00a2\u00012\n\b\u0002\u0010i\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00a3\u0001J0\u0010\u00a4\u0001\u001a\u00030\u00a2\u00012\n\b\u0002\u0010i\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00a5\u0001\u001a\u00030\u00a6\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JE\u0010\u00a7\u0001\u001a\u00030\u00a8\u00012\b\u0010\u00a9\u0001\u001a\u00030\u00aa\u00012\b\u0010\u00ab\u0001\u001a\u00030\u00ac\u00012\u000b\b\u0002\u0010\u00ad\u0001\u001a\u0004\u0018\u00010\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JE\u0010\u00ae\u0001\u001a\u00030\u00a8\u00012\b\u0010\u00a9\u0001\u001a\u00030\u00aa\u00012\b\u0010\u00ab\u0001\u001a\u00030\u00ac\u00012\u000b\b\u0002\u0010\u00ad\u0001\u001a\u0004\u0018\u0001052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00af\u0001\u001a\u00030\u00b0\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010\u00b1\u0001\u001a\u00030\u00b2\u00012\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u00010\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J4\u0010\u00b5\u0001\u001a\u00030\u00ac\u00012\u000e\u0010\u008a\u0001\u001a\t\u0012\u0005\u0012\u00030\u00b2\u00010\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010\u00b5\u0001\u001a\u00030\u00ac\u00012\b\u0010\u00b6\u0001\u001a\u00030\u00b2\u00012\u0015\u0010\u008a\u0001\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00b2\u00010\u0013\"\u00030\u00b2\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00b7\u0001J:\u0010\u00b8\u0001\u001a\u00030\u00b2\u00012\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u0001052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00b9\u0001\u001a\u00030\u00ba\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00bb\u0001\u001a\u00030\u00bc\u00012\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00bb\u0001\u001a\u00030\u00bc\u00012\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00bd\u0001J2\u0010\u00be\u0001\u001a\u00030\u00bf\u00012\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00be\u0001\u001a\u00030\u00bf\u00012\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00c0\u0001JA\u0010\u00c1\u0001\u001a\u00030\u00c2\u00012\u0007\u0010\u00c3\u0001\u001a\u00020\u00062\b\u0010\u00c4\u0001\u001a\u00030\u00c5\u00012\b\u0010\u00c6\u0001\u001a\u00030\u00c7\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JA\u0010\u00c8\u0001\u001a\u00030\u00c2\u00012\u0007\u0010\u00c3\u0001\u001a\u0002052\b\u0010\u00c4\u0001\u001a\u00030\u00c5\u00012\b\u0010\u00c6\u0001\u001a\u00030\u00c7\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u00c9\u0001\u001a\u00020S2\u0007\u0010\u00c3\u0001\u001a\u00020\u00062\b\u0010\u00c4\u0001\u001a\u00030\u00c5\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u00ca\u0001\u001a\u00020S2\u0007\u0010\u00c3\u0001\u001a\u0002052\b\u0010\u00c4\u0001\u001a\u00030\u00c5\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00cb\u0001\u001a\u00030\u00cc\u00012\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00cb\u0001\u001a\u00030\u00cc\u00012\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00cd\u0001J$\u0010\u00ce\u0001\u001a\u00030\u00cf\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J4\u0010\u00d0\u0001\u001a\u00030\u00d1\u00012\u0006\u0010\u0019\u001a\u00020\u00102\u0006\u0010\u001d\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JO\u0010\u00d2\u0001\u001a\u00030\u00d3\u00012\u0006\u0010\u0019\u001a\u00020\u00102\u0006\u0010\u001a\u001a\u00020\u00102\u000b\b\u0002\u0010\u00d4\u0001\u001a\u0004\u0018\u00010\u00102\f\b\u0002\u0010\u00d5\u0001\u001a\u0005\u0018\u00010\u00d6\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00d7\u0001\u001a\u00030\u00d8\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010\u00d9\u0001\u001a\u00030\u00da\u00012\u0006\u00101\u001a\u0002022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JV\u0010\u00d9\u0001\u001a\u00030\u00da\u00012\u0006\u00101\u001a\u0002022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00db\u0001J5\u0010\u00dc\u0001\u001a\u00030\u00dd\u00012\u0006\u0010\u001a\u001a\u00020\u00102\u0007\u0010\u00de\u0001\u001a\u00020?2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JM\u0010\u00df\u0001\u001a\u00030\u00e0\u00012\b\u0010\u00de\u0001\u001a\u00030\u00e1\u00012\u0007\u0010\u00e2\u0001\u001a\u00020z2\u0007\u0010\u00e3\u0001\u001a\u00020z2\u000b\b\u0002\u0010\u00e4\u0001\u001a\u0004\u0018\u00010\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00e2\u0001\u001a\u00030\u00e5\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J4\u0010\u00e6\u0001\u001a\u00030\u00e7\u00012\u000e\u0010\u00e8\u0001\u001a\t\u0012\u0005\u0012\u00030\u00e9\u00010\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010\u00e6\u0001\u001a\u00030\u00e7\u00012\b\u0010\u00ea\u0001\u001a\u00030\u00e9\u00012\u0015\u0010\u00e8\u0001\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00e9\u00010\u0013\"\u00030\u00e9\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00eb\u0001J6\u0010\u00ec\u0001\u001a\u00030\u00e9\u00012\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0007\u0010\u00c3\u0001\u001a\u00020\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u00ed\u0001\u001a\u00030\u00e9\u00012\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0007\u0010\u00c3\u0001\u001a\u0002052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JB\u0010\u00ee\u0001\u001a\u00030\u00ef\u00012\u0006\u0010\u001a\u001a\u00020\u00102\u0007\u0010\u00f0\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00f1\u0001\u001a\u0004\u0018\u00010\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J>\u0010\u00f2\u0001\u001a\u00030\u00f3\u00012\u0012\u0010\u001d\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00f4\u0001J4\u0010\u00f2\u0001\u001a\u00030\u00f3\u00012\u000e\b\u0002\u0010\u001d\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00f5\u0001\u001a\u00030\u00f6\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00f7\u0001\u001a\u00030\u00f8\u00012\u0007\u0010\u001a\u001a\u00030\u00f9\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00fa\u0001\u001a\u00030\u00fb\u00012\u0007\u0010\u001a\u001a\u00030\u00fc\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00fd\u0001\u001a\u00030\u00fe\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00ff\u0001\u001a\u00030\u0080\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00ff\u0001\u001a\u00030\u0080\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0081\u0002J2\u0010\u0082\u0002\u001a\u00030\u0083\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u0082\u0002\u001a\u00030\u0083\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0084\u0002J2\u0010\u0085\u0002\u001a\u00030\u0086\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u0085\u0002\u001a\u00030\u0086\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0087\u0002J$\u0010\u0088\u0002\u001a\u00030\u0089\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u008a\u0002\u001a\u00030\u008b\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u008c\u0002\u001a\u00030\u008d\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u008e\u0002\u001a\u00030\u008f\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u0090\u0002\u001a\u00030\u0091\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u0090\u0002\u001a\u00030\u0091\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0092\u0002J2\u0010\u0093\u0002\u001a\u00030\u0094\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u0093\u0002\u001a\u00030\u0094\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0095\u0002J-\u0010\u0096\u0002\u001a\u00030\u0097\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\u0019\u0010\u0098\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u0099\u0002\u001a\u00030\u009a\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u009b\u0002\u001a\u00030\u009c\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JB\u0010\u009d\u0002\u001a\u00030\u009e\u00022\n\b\u0002\u0010i\u001a\u0004\u0018\u00010C2\n\b\u0002\u0010j\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u009f\u0002J<\u0010\u00a0\u0002\u001a\u00030\u009e\u00022\n\b\u0002\u0010i\u001a\u0004\u0018\u00010F2\n\b\u0002\u0010j\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J7\u0010\u00d5\u0001\u001a\u00030\u00d6\u00012\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\b\u0010\u00a1\u0002\u001a\u00030\u00a2\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00a3\u0002\u001a\u00030\u00a4\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00a3\u0002\u001a\u00030\u00a4\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00a5\u0002J4\u0010\u00a6\u0002\u001a\u00030\u00a7\u00022\u000e\u0010\u00a8\u0002\u001a\t\u0012\u0005\u0012\u00030\u00a9\u00020\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010\u00a6\u0002\u001a\u00030\u00a7\u00022\b\u0010\u00aa\u0002\u001a\u00030\u00a9\u00022\u0015\u0010\u00a8\u0002\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00a9\u00020\u0013\"\u00030\u00a9\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00ab\u0002J-\u0010\u00ac\u0002\u001a\u00030\u00ad\u00022\u0007\u0010\u00d4\u0001\u001a\u00020C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00ae\u0002\u001a\u00030\u00ad\u00022\u0007\u0010\u00d4\u0001\u001a\u00020F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J=\u0010\u00af\u0002\u001a\u00030\u00b0\u00022\u0007\u0010\u00b1\u0002\u001a\u00020\u00102\u000e\u0010\u00b2\u0002\u001a\t\u0012\u0005\u0012\u00030\u00b3\u00020\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JT\u0010\u00af\u0002\u001a\u00030\u00b0\u00022\u0007\u0010\u00b1\u0002\u001a\u00020\u00102\b\u0010\u00b4\u0002\u001a\u00030\u00b3\u00022\u0015\u0010\u00b2\u0002\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00b3\u00020\u0013\"\u00030\u00b3\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00b5\u0002J7\u0010\u00b6\u0002\u001a\u00030\u00b7\u00022\u0007\u0010\u00d4\u0001\u001a\u00020\u00102\b\u0010\u00c4\u0001\u001a\u00030\u00c5\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00b8\u0002\u001a\u00030\u00b9\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00ba\u0002\u001a\u00030\u00bb\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00bc\u0002\u001a\u00030\u00bd\u00022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00bc\u0002\u001a\u00030\u00bd\u00022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00be\u0002J-\u0010\u00bf\u0002\u001a\u00030\u00c0\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00c1\u0002\u001a\u00030\u00c2\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010\u00c3\u0002\u001a\u00030\u00c4\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u00010\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010\u00c5\u0002\u001a\u00030\u00c4\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u0001052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J4\u0010\u00c6\u0002\u001a\u00030\u00c7\u00022\u000e\u0010\u00c8\u0002\u001a\t\u0012\u0005\u0012\u00030\u00c9\u00020\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JK\u0010\u00c6\u0002\u001a\u00030\u00c7\u00022\b\u0010\u00ca\u0002\u001a\u00030\u00c9\u00022\u0015\u0010\u00c8\u0002\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00c9\u00020\u0013\"\u00030\u00c9\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00cb\u0002J5\u0010\u00cc\u0002\u001a\u00030\u00cd\u00022\u0006\u0010\u001a\u001a\u00020\u00102\u0007\u0010\u00ce\u0002\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00cf\u0002\u001a\u00030\u00d0\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J,\u0010\u00d1\u0002\u001a\u00030\u00d2\u00022\u0006\u0010\u001a\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00d3\u0002\u001a\u00030\u00d4\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00d5\u0002\u001a\u00030\u00d6\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J,\u0010\u00d7\u0002\u001a\u00030\u00d8\u00022\u0006\u0010\u0019\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J-\u0010\u00d9\u0002\u001a\u00030\u00da\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J8\u0010\u00db\u0002\u001a\u00030\u00dc\u00022\b\u0010\u00dd\u0002\u001a\u00030\u00de\u00022\b\u0010\u00df\u0002\u001a\u00030\u00e0\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J3\u0010\u00e1\u0002\u001a\u00020}2\u000e\u0010\u00e2\u0002\u001a\t\u0012\u0005\u0012\u00030\u00dc\u00020\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JJ\u0010\u00e1\u0002\u001a\u00020}2\b\u0010\u00e3\u0002\u001a\u00030\u00dc\u00022\u0015\u0010\u00e2\u0002\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u00dc\u00020\u0013\"\u00030\u00dc\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00e4\u0002J$\u0010\u00e5\u0002\u001a\u00030\u00e6\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00e3\u0001\u001a\u00030\u00e7\u00022\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JT\u0010\u00e8\u0002\u001a\u00030\u00e9\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u00010\u00062\u000b\b\u0002\u0010\u00ea\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0002\u0010\u00eb\u0002\u001a\u0004\u0018\u00010\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JT\u0010\u00ec\u0002\u001a\u00030\u00e9\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u0001052\u000b\b\u0002\u0010\u00ea\u0002\u001a\u0004\u0018\u0001052\u000b\b\u0002\u0010\u00eb\u0002\u001a\u0004\u0018\u0001052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J;\u0010\u00ed\u0002\u001a\u00030\u00ee\u00022\b\u0010\u00ef\u0002\u001a\u00030\u009e\u00012\u000b\b\u0002\u0010\u00f0\u0002\u001a\u0004\u0018\u00010\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J\u0092\u0001\u0010\u00f1\u0002\u001a\u00030\u00f2\u00022\n\b\u0002\u00101\u001a\u0004\u0018\u0001022\b\u0010\u00f3\u0002\u001a\u00030\u00f4\u00022\u0006\u0010#\u001a\u00020z2\f\b\u0002\u0010\u00f5\u0002\u001a\u0005\u0018\u00010\u00e7\u00012\n\b\u0002\u0010{\u001a\u0004\u0018\u00010\u00102\f\b\u0002\u0010\u00f6\u0002\u001a\u0005\u0018\u00010\u00a8\u00012\u000b\b\u0002\u0010\u00f7\u0002\u001a\u0004\u0018\u00010\u00102\f\b\u0002\u0010\u00f8\u0002\u001a\u0005\u0018\u00010\u00a7\u00022\u000b\b\u0002\u0010\u00f9\u0002\u001a\u0004\u0018\u00010\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J,\u0010\u00fa\u0002\u001a\u00030\u00fb\u00022\u0006\u0010\u0017\u001a\u00020\u00182\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J>\u0010\u00fc\u0002\u001a\u00030\u00fd\u00022\u0012\u0010\u001d\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00fe\u0002J4\u0010\u00fc\u0002\u001a\u00030\u00fd\u00022\u000e\b\u0002\u0010\u001d\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00ff\u0002\u001a\u00030\u0080\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JD\u0010\u0081\u0003\u001a\u00030\u0082\u00032\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\b\u0010\u00ef\u0002\u001a\u00030\u009e\u00012\u000b\b\u0002\u0010\u00f0\u0002\u001a\u0004\u0018\u00010\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u0083\u0003\u001a\u00030\u0084\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J;\u0010\u0085\u0003\u001a\u00030\u00a9\u00022\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\f\b\u0002\u0010\u0086\u0003\u001a\u0005\u0018\u00010\u0087\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u0088\u0003\u001a\u00030\u0089\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J@\u0010\u008a\u0003\u001a\u00030\u008b\u00032\u0014\u0010T\u001a\u000b\u0012\u0007\b\u0001\u0012\u00030\u009a\u00010\u0013\"\u00030\u009a\u00012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u008c\u0003J5\u0010\u008a\u0003\u001a\u00030\u008b\u00032\u000f\b\u0002\u0010T\u001a\t\u0012\u0005\u0012\u00030\u009a\u00010\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u008d\u0003\u001a\u00030\u008e\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u008f\u0003\u001a\u00030\u0090\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u0091\u0003\u001a\u00030\u0092\u00032\n\b\u0002\u0010i\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u0093\u0003J0\u0010\u0094\u0003\u001a\u00030\u0092\u00032\n\b\u0002\u0010i\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016Jc\u0010\u0095\u0003\u001a\u00030\u00fc\u00012\u0007\u0010\u0096\u0003\u001a\u00020C2\u0007\u0010\u0097\u0003\u001a\u00020C2\u0007\u0010\u009c\u0001\u001a\u00020C2\u0007\u0010\u0098\u0003\u001a\u00020C2\u0006\u0010i\u001a\u00020C2\u000b\b\u0002\u0010\u0099\u0003\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u009a\u0003J]\u0010\u009b\u0003\u001a\u00030\u00fc\u00012\u0007\u0010\u0096\u0003\u001a\u00020F2\u0007\u0010\u0097\u0003\u001a\u00020F2\u0007\u0010\u009c\u0001\u001a\u00020F2\u0007\u0010\u0098\u0003\u001a\u00020F2\u0006\u0010i\u001a\u00020F2\u000b\b\u0002\u0010\u0099\u0003\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J6\u0010\u009c\u0003\u001a\u00030\u009d\u00032\n\b\u0002\u0010i\u001a\u0004\u0018\u00010C2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u009e\u0003J0\u0010\u009f\u0003\u001a\u00030\u009d\u00032\n\b\u0002\u0010i\u001a\u0004\u0018\u00010F2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J2\u0010\u00a0\u0003\u001a\u00030\u00a1\u00032\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JN\u0010\u00a0\u0003\u001a\u00030\u00a1\u00032\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00a2\u0003J$\u0010\u00a3\u0003\u001a\u00030\u00a4\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00a5\u0003\u001a\u00030\u00a6\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J:\u0010\u00a7\u0003\u001a\u00030\u00a8\u00032\u0006\u00101\u001a\u0002022\f\u0010\u000e\u001a\b\u0012\u0004\u0012\u00020\u00100\u000f2\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JV\u0010\u00a7\u0003\u001a\u00030\u00a8\u00032\u0006\u00101\u001a\u0002022\u0006\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00102\u0012\u0010\u000e\u001a\n\u0012\u0006\b\u0001\u0012\u00020\u00100\u0013\"\u00020\u00102\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a2\u0006\u0003\u0010\u00a9\u0003JT\u0010\u00aa\u0003\u001a\u00030\u00ab\u00032\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u00010\u00062\u000b\b\u0002\u0010\u00ea\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0002\u0010\u00eb\u0002\u001a\u0004\u0018\u00010\u00062\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016JT\u0010\u00ac\u0003\u001a\u00030\u00ab\u00032\u0007\u0010\u00b3\u0001\u001a\u00020\u00102\u000b\b\u0002\u0010\u00b4\u0001\u001a\u0004\u0018\u0001052\u000b\b\u0002\u0010\u00ea\u0002\u001a\u0004\u0018\u0001052\u000b\b\u0002\u0010\u00eb\u0002\u001a\u0004\u0018\u0001052\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016J$\u0010\u00ad\u0003\u001a\u00030\u00ae\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00010\u0005j\u0002`\u0007H\u0016\u00a8\u0006\u00af\u0003"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Builder;", "", "all", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "metas", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "allNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "allOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "and", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "operands", "", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands0", "operands1", "", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "asc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "assignment", "Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "target", "value", "bag", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "values", "([Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "bagType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "between", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "from", "to", "blobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "booleanType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "call", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "funcName", "args", "args0", "(Ljava/lang/String;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "callAgg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "arg", "callAgg_", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "call_", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "caseInsensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "caseSensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "cast", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "asType", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "characterType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "length", "", "(Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "characterType_", "Lorg/partiql/pig/runtime/LongPrimitive;", "characterVaryingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "(Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "characterVaryingType_", "clobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "concat", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "createIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "indexName", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "fields", "fields0", "(Lorg/partiql/lang/domains/PartiqlAst$Identifier;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "createTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "tableName", "createTable_", "date", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "year", "month", "day", "dateType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "date_", "ddl", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "op", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "decimalType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "precision", "scale", "(Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "decimalType_", "delete", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "desc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "distinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "divide", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "dml", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "operations", "Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "where", "returning", "Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "dmlOpList", "ops", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "ops0", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp;[Lorg/partiql/lang/domains/PartiqlAst$DmlOp;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "doNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "doublePrecisionType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "dropIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "table", "keys", "dropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "eq", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "except", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "exec", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "procedureName", "(Ljava/lang/String;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "exec_", "(Lorg/partiql/pig/runtime/SymbolPrimitive;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "exprPair", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "first", "second", "exprPairList", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "pairs", "([Lorg/partiql/lang/domains/PartiqlAst$ExprPair;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "floatType", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "(Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "floatType_", "full", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "groupBy", "Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "strategy", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "keyList", "Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "groupAsAlias", "groupBy_", "groupFull", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "groupKey", "Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "expr", "asAlias", "groupKeyList", "keys0", "(Lorg/partiql/lang/domains/PartiqlAst$GroupKey;[Lorg/partiql/lang/domains/PartiqlAst$GroupKey;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "groupKey_", "groupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "gt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "gte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "id", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "name", "case", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "qualifier", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "id_", "identifier", "identifier_", "inCollection", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "inner", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "insert", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "insertValue", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "index", "onConflict", "Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "integerType", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "intersect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "isType", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "type", "join", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "left", "right", "predicate", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "let", "Lorg/partiql/lang/domains/PartiqlAst$Let;", "letBindings", "Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "letBindings0", "(Lorg/partiql/lang/domains/PartiqlAst$LetBinding;[Lorg/partiql/lang/domains/PartiqlAst$LetBinding;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Let;", "letBinding", "letBinding_", "like", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "pattern", "escape", "list", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "([Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "listType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "lit", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "Lcom/amazon/ionelement/api/IonElement;", "litTime", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "localsFirst", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "lt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "lte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "minus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "missing", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "missingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "modifiedNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "modifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "modulo", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "ne", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "neg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "newMetaContainer", "not", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "nullType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "numericType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "(Ljava/lang/Long;Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "numericType_", "conflictAction", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "or", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "orderBy", "Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "sortSpecs", "Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "sortSpecs0", "(Lorg/partiql/lang/domains/PartiqlAst$SortSpec;[Lorg/partiql/lang/domains/PartiqlAst$SortSpec;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "parameter", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "parameter_", "path", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "root", "steps", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "steps0", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$PathStep;[Lorg/partiql/lang/domains/PartiqlAst$PathStep;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "pathExpr", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "pathUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "pathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "plus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "pos", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "projectAll", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "projectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "projectExpr_", "projectList", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "projectItems", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "projectItems0", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;[Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "projectPivot", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "key", "projectStar", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "projectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "query", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "realType", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "remove", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "returningColumn", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "returningElem", "Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "mapping", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "column", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "returningExpr", "elems", "elems0", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;[Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "returningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "scan", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "atAlias", "byAlias", "scan_", "searchedCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "cases", "default", "select", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "project", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "fromLet", "group", "having", "order", "limit", "set", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "sexp", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "([Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "sexpType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "simpleCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "smallintType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "sortSpec", "orderingSpec", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "stringType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "struct", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "([Lorg/partiql/lang/domains/PartiqlAst$ExprPair;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "structType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "symbolType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "timeType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "(Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "timeType_", "timeValue", "hour", "minute", "nano", "tzMinutes", "(JJJJJLjava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "timeValue_", "timeWithTimeZoneType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "(Ljava/lang/Long;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "timeWithTimeZoneType_", "times", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "timestampType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "tupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "union", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;[Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "unpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "unpivot_", "unqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "lang"})
    public static interface Builder {
        @NotNull
        public Map<String, Object> newMetaContainer();

        @NotNull
        public TimeValue timeValue(long var1, long var3, long var5, long var7, long var9, @Nullable Long var11, @NotNull Map<String, ? extends Object> var12);

        @NotNull
        public TimeValue timeValue_(@NotNull LongPrimitive var1, @NotNull LongPrimitive var2, @NotNull LongPrimitive var3, @NotNull LongPrimitive var4, @NotNull LongPrimitive var5, @Nullable LongPrimitive var6, @NotNull Map<String, ? extends Object> var7);

        @NotNull
        public Let let(@NotNull List<LetBinding> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Let let(@NotNull LetBinding var1, @NotNull LetBinding[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public LetBinding letBinding(@NotNull Expr var1, @NotNull String var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public LetBinding letBinding_(@NotNull Expr var1, @NotNull SymbolPrimitive var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ExprPair exprPair(@NotNull Expr var1, @NotNull Expr var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ExprPairList exprPairList(@NotNull List<ExprPair> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public ExprPairList exprPairList(@NotNull ExprPair[] var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public GroupBy groupBy(@NotNull GroupingStrategy var1, @NotNull GroupKeyList var2, @Nullable String var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public GroupBy groupBy_(@NotNull GroupingStrategy var1, @NotNull GroupKeyList var2, @Nullable SymbolPrimitive var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public GroupKeyList groupKeyList(@NotNull List<GroupKey> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public GroupKeyList groupKeyList(@NotNull GroupKey var1, @NotNull GroupKey[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public GroupKey groupKey(@NotNull Expr var1, @Nullable String var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public GroupKey groupKey_(@NotNull Expr var1, @Nullable SymbolPrimitive var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public OrderBy orderBy(@NotNull List<SortSpec> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public OrderBy orderBy(@NotNull SortSpec var1, @NotNull SortSpec[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public SortSpec sortSpec(@NotNull Expr var1, @Nullable OrderingSpec var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public DmlOpList dmlOpList(@NotNull List<? extends DmlOp> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DmlOpList dmlOpList(@NotNull DmlOp var1, @NotNull DmlOp[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public OnConflict onConflict(@NotNull Expr var1, @NotNull ConflictAction var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ReturningExpr returningExpr(@NotNull List<ReturningElem> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public ReturningExpr returningExpr(@NotNull ReturningElem var1, @NotNull ReturningElem[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ReturningElem returningElem(@NotNull ReturningMapping var1, @NotNull ColumnComponent var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Identifier identifier(@NotNull String var1, @NotNull CaseSensitivity var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Identifier identifier_(@NotNull SymbolPrimitive var1, @NotNull CaseSensitivity var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Assignment assignment(@NotNull Expr var1, @NotNull Expr var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Statement.Query query(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Statement.Dml dml(@NotNull DmlOpList var1, @Nullable FromSource var2, @Nullable Expr var3, @Nullable ReturningExpr var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public Statement.Ddl ddl(@NotNull DdlOp var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Statement.Exec exec(@NotNull String var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Statement.Exec exec_(@NotNull SymbolPrimitive var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Statement.Exec exec(@NotNull String var1, @NotNull Expr[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Statement.Exec exec_(@NotNull SymbolPrimitive var1, @NotNull Expr[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Missing missing(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Expr.Lit lit(@NotNull IonElement var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Id id(@NotNull String var1, @NotNull CaseSensitivity var2, @NotNull ScopeQualifier var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Id id_(@NotNull SymbolPrimitive var1, @NotNull CaseSensitivity var2, @NotNull ScopeQualifier var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Parameter parameter(long var1, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Parameter parameter_(@NotNull LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Not not(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Pos pos(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Neg neg(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Plus plus(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Plus plus(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Minus minus(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Minus minus(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Times times(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Times times(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Divide divide(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Divide divide(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Modulo modulo(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Modulo modulo(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Concat concat(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Concat concat(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.And and(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.And and(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Or or(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Or or(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Eq eq(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Eq eq(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Ne ne(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Ne ne(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Gt gt(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Gt gt(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Gte gte(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Gte gte(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Lt lt(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Lt lt(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Lte lte(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Lte lte(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Like like(@NotNull Expr var1, @NotNull Expr var2, @Nullable Expr var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Between between(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.InCollection inCollection(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.InCollection inCollection(@NotNull Expr var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.IsType isType(@NotNull Expr var1, @NotNull Type var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.SimpleCase simpleCase(@NotNull Expr var1, @NotNull ExprPairList var2, @Nullable Expr var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.SearchedCase searchedCase(@NotNull ExprPairList var1, @Nullable Expr var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Struct struct(@NotNull List<ExprPair> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Struct struct(@NotNull ExprPair[] var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Bag bag(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Bag bag(@NotNull Expr[] var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.List list(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.List list(@NotNull Expr[] var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Sexp sexp(@NotNull List<? extends Expr> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Sexp sexp(@NotNull Expr[] var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Date date(long var1, long var3, long var5, @NotNull Map<String, ? extends Object> var7);

        @NotNull
        public Expr.Date date_(@NotNull LongPrimitive var1, @NotNull LongPrimitive var2, @NotNull LongPrimitive var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.LitTime litTime(@NotNull TimeValue var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Expr.Union union(@NotNull SetQuantifier var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Union union(@NotNull SetQuantifier var1, @NotNull Expr var2, @NotNull Expr var3, @NotNull Expr[] var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public Expr.Except except(@NotNull SetQuantifier var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Except except(@NotNull SetQuantifier var1, @NotNull Expr var2, @NotNull Expr var3, @NotNull Expr[] var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public Expr.Intersect intersect(@NotNull SetQuantifier var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Intersect intersect(@NotNull SetQuantifier var1, @NotNull Expr var2, @NotNull Expr var3, @NotNull Expr[] var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public Expr.Path path(@NotNull Expr var1, @NotNull List<? extends PathStep> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Path path(@NotNull Expr var1, @NotNull PathStep var2, @NotNull PathStep[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Call call(@NotNull String var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Call call_(@NotNull SymbolPrimitive var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Call call(@NotNull String var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Call call_(@NotNull SymbolPrimitive var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.CallAgg callAgg(@NotNull SetQuantifier var1, @NotNull String var2, @NotNull Expr var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.CallAgg callAgg_(@NotNull SetQuantifier var1, @NotNull SymbolPrimitive var2, @NotNull Expr var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public Expr.Cast cast(@NotNull Expr var1, @NotNull Type var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Expr.Select select(@Nullable SetQuantifier var1, @NotNull Projection var2, @NotNull FromSource var3, @Nullable Let var4, @Nullable Expr var5, @Nullable GroupBy var6, @Nullable Expr var7, @Nullable OrderBy var8, @Nullable Expr var9, @NotNull Map<String, ? extends Object> var10);

        @NotNull
        public PathStep.PathExpr pathExpr(@NotNull Expr var1, @NotNull CaseSensitivity var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public PathStep.PathWildcard pathWildcard(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public PathStep.PathUnpivot pathUnpivot(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Projection.ProjectStar projectStar(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Projection.ProjectList projectList(@NotNull List<? extends ProjectItem> var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Projection.ProjectList projectList(@NotNull ProjectItem var1, @NotNull ProjectItem[] var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Projection.ProjectPivot projectPivot(@NotNull Expr var1, @NotNull Expr var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Projection.ProjectValue projectValue(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public ProjectItem.ProjectAll projectAll(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public ProjectItem.ProjectExpr projectExpr(@NotNull Expr var1, @Nullable String var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ProjectItem.ProjectExpr projectExpr_(@NotNull Expr var1, @Nullable SymbolPrimitive var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public FromSource.Scan scan(@NotNull Expr var1, @Nullable String var2, @Nullable String var3, @Nullable String var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public FromSource.Scan scan_(@NotNull Expr var1, @Nullable SymbolPrimitive var2, @Nullable SymbolPrimitive var3, @Nullable SymbolPrimitive var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public FromSource.Unpivot unpivot(@NotNull Expr var1, @Nullable String var2, @Nullable String var3, @Nullable String var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public FromSource.Unpivot unpivot_(@NotNull Expr var1, @Nullable SymbolPrimitive var2, @Nullable SymbolPrimitive var3, @Nullable SymbolPrimitive var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public FromSource.Join join(@NotNull JoinType var1, @NotNull FromSource var2, @NotNull FromSource var3, @Nullable Expr var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public JoinType.Inner inner(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public JoinType.Left left(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public JoinType.Right right(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public JoinType.Full full(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public GroupingStrategy.GroupFull groupFull(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public GroupingStrategy.GroupPartial groupPartial(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public OrderingSpec.Asc asc(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public OrderingSpec.Desc desc(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public CaseSensitivity.CaseSensitive caseSensitive(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public CaseSensitivity.CaseInsensitive caseInsensitive(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ScopeQualifier.Unqualified unqualified(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ScopeQualifier.LocalsFirst localsFirst(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public SetQuantifier.All all(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public SetQuantifier.Distinct distinct(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public DmlOp.Insert insert(@NotNull Expr var1, @NotNull Expr var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public DmlOp.InsertValue insertValue(@NotNull Expr var1, @NotNull Expr var2, @Nullable Expr var3, @Nullable OnConflict var4, @NotNull Map<String, ? extends Object> var5);

        @NotNull
        public DmlOp.Set set(@NotNull Assignment var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DmlOp.Remove remove(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DmlOp.Delete delete(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ConflictAction.DoNothing doNothing(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public DdlOp.CreateTable createTable(@NotNull String var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DdlOp.CreateTable createTable_(@NotNull SymbolPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DdlOp.DropTable dropTable(@NotNull Identifier var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public DdlOp.CreateIndex createIndex(@NotNull Identifier var1, @NotNull List<? extends Expr> var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public DdlOp.CreateIndex createIndex(@NotNull Identifier var1, @NotNull Expr var2, @NotNull Expr[] var3, @NotNull Map<String, ? extends Object> var4);

        @NotNull
        public DdlOp.DropIndex dropIndex(@NotNull Identifier var1, @NotNull Identifier var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public ColumnComponent.ReturningWildcard returningWildcard(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ColumnComponent.ReturningColumn returningColumn(@NotNull Expr var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public ReturningMapping.ModifiedNew modifiedNew(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ReturningMapping.ModifiedOld modifiedOld(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ReturningMapping.AllNew allNew(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public ReturningMapping.AllOld allOld(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.NullType nullType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.BooleanType booleanType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.SmallintType smallintType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.IntegerType integerType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.FloatType floatType(@Nullable Long var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.FloatType floatType_(@Nullable LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.RealType realType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.DoublePrecisionType doublePrecisionType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.DecimalType decimalType(@Nullable Long var1, @Nullable Long var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Type.DecimalType decimalType_(@Nullable LongPrimitive var1, @Nullable LongPrimitive var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Type.NumericType numericType(@Nullable Long var1, @Nullable Long var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Type.NumericType numericType_(@Nullable LongPrimitive var1, @Nullable LongPrimitive var2, @NotNull Map<String, ? extends Object> var3);

        @NotNull
        public Type.TimestampType timestampType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.CharacterType characterType(@Nullable Long var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.CharacterType characterType_(@Nullable LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.CharacterVaryingType characterVaryingType(@Nullable Long var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.CharacterVaryingType characterVaryingType_(@Nullable LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.MissingType missingType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.StringType stringType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.SymbolType symbolType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.BlobType blobType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.ClobType clobType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.DateType dateType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.TimeType timeType(@Nullable Long var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.TimeType timeType_(@Nullable LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.TimeWithTimeZoneType timeWithTimeZoneType(@Nullable Long var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.TimeWithTimeZoneType timeWithTimeZoneType_(@Nullable LongPrimitive var1, @NotNull Map<String, ? extends Object> var2);

        @NotNull
        public Type.StructType structType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.TupleType tupleType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.ListType listType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.SexpType sexpType(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public Type.BagType bagType(@NotNull Map<String, ? extends Object> var1);

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
        public static final class DefaultImpls {
            @NotNull
            public static Map<String, Object> newMetaContainer(Builder $this) {
                return IonMeta.emptyMetaContainer();
            }

            @NotNull
            public static TimeValue timeValue(Builder $this, long hour, long minute, long second, long nano, long precision, @Nullable Long tzMinutes, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = tzMinutes;
                return new TimeValue(PrimitiveUtilsKt.asPrimitive$default((long)hour, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)minute, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)second, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)nano, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)precision, null, (int)1, null), l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ TimeValue timeValue$default(Builder builder, long l, long l2, long l3, long l4, long l5, Long l6, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeValue");
                }
                if ((n & 0x20) != 0) {
                    l6 = null;
                }
                if ((n & 0x40) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeValue(l, l2, l3, l4, l5, l6, map2);
            }

            @NotNull
            public static TimeValue timeValue_(Builder $this, @NotNull LongPrimitive hour, @NotNull LongPrimitive minute, @NotNull LongPrimitive second, @NotNull LongPrimitive nano, @NotNull LongPrimitive precision, @Nullable LongPrimitive tzMinutes, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(hour, "hour");
                Intrinsics.checkParameterIsNotNull(minute, "minute");
                Intrinsics.checkParameterIsNotNull(second, "second");
                Intrinsics.checkParameterIsNotNull(nano, "nano");
                Intrinsics.checkParameterIsNotNull(precision, "precision");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimeValue(hour, minute, second, nano, precision, tzMinutes, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ TimeValue timeValue_$default(Builder builder, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, LongPrimitive longPrimitive4, LongPrimitive longPrimitive5, LongPrimitive longPrimitive6, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeValue_");
                }
                if ((n & 0x20) != 0) {
                    longPrimitive6 = null;
                }
                if ((n & 0x40) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeValue_(longPrimitive, longPrimitive2, longPrimitive3, longPrimitive4, longPrimitive5, longPrimitive6, map2);
            }

            @NotNull
            public static Let let(Builder $this, @NotNull List<LetBinding> letBindings, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Let(letBindings, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Let let$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: let");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.let(list, map2);
            }

            @NotNull
            public static Let let(Builder $this, @NotNull LetBinding letBindings0, @NotNull LetBinding[] letBindings, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(letBindings0, "letBindings0");
                Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Let(CollectionsKt.plus((Collection)CollectionsKt.listOf(letBindings0), (Iterable)ArraysKt.toList(letBindings)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Let let$default(Builder builder, LetBinding letBinding, LetBinding[] letBindingArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: let");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.let(letBinding, letBindingArray, map2);
            }

            @NotNull
            public static LetBinding letBinding(Builder $this, @NotNull Expr expr, @NotNull String name, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new LetBinding(expr, PrimitiveUtilsKt.asPrimitive$default((String)name, null, (int)1, null), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ LetBinding letBinding$default(Builder builder, Expr expr, String string, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: letBinding");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.letBinding(expr, string, map2);
            }

            @NotNull
            public static LetBinding letBinding_(Builder $this, @NotNull Expr expr, @NotNull SymbolPrimitive name, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new LetBinding(expr, name, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ LetBinding letBinding_$default(Builder builder, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: letBinding_");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.letBinding_(expr, symbolPrimitive, map2);
            }

            @NotNull
            public static ExprPair exprPair(Builder $this, @NotNull Expr first, @NotNull Expr second, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(first, "first");
                Intrinsics.checkParameterIsNotNull(second, "second");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ExprPair(first, second, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ExprPair exprPair$default(Builder builder, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exprPair");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exprPair(expr, expr2, map2);
            }

            @NotNull
            public static ExprPairList exprPairList(Builder $this, @NotNull List<ExprPair> pairs, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(pairs, "pairs");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ExprPairList(pairs, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ExprPairList exprPairList$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exprPairList");
                }
                if ((n & 1) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exprPairList(list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static ExprPairList exprPairList(Builder $this, @NotNull ExprPair[] pairs, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(pairs, "pairs");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ExprPairList(ArraysKt.toList(pairs), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ExprPairList exprPairList$default(Builder builder, ExprPair[] exprPairArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exprPairList");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exprPairList(exprPairArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static GroupBy groupBy(Builder $this, @NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable String groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(strategy, "strategy");
                Intrinsics.checkParameterIsNotNull(keyList, "keyList");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                String string = groupAsAlias;
                return new GroupBy(strategy, keyList, string != null ? PrimitiveUtilsKt.asPrimitive$default((String)string, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupBy groupBy$default(Builder builder, GroupingStrategy groupingStrategy, GroupKeyList groupKeyList, String string, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupBy");
                }
                if ((n & 4) != 0) {
                    string = null;
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupBy(groupingStrategy, groupKeyList, string, map2);
            }

            @NotNull
            public static GroupBy groupBy_(Builder $this, @NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable SymbolPrimitive groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(strategy, "strategy");
                Intrinsics.checkParameterIsNotNull(keyList, "keyList");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupBy(strategy, keyList, groupAsAlias, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupBy groupBy_$default(Builder builder, GroupingStrategy groupingStrategy, GroupKeyList groupKeyList, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupBy_");
                }
                if ((n & 4) != 0) {
                    symbolPrimitive = null;
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupBy_(groupingStrategy, groupKeyList, symbolPrimitive, map2);
            }

            @NotNull
            public static GroupKeyList groupKeyList(Builder $this, @NotNull List<GroupKey> keys2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(keys2, "keys");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupKeyList(keys2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupKeyList groupKeyList$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupKeyList");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupKeyList(list, map2);
            }

            @NotNull
            public static GroupKeyList groupKeyList(Builder $this, @NotNull GroupKey keys0, @NotNull GroupKey[] keys2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(keys0, "keys0");
                Intrinsics.checkParameterIsNotNull(keys2, "keys");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupKeyList(CollectionsKt.plus((Collection)CollectionsKt.listOf(keys0), (Iterable)ArraysKt.toList(keys2)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupKeyList groupKeyList$default(Builder builder, GroupKey groupKey, GroupKey[] groupKeyArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupKeyList");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupKeyList(groupKey, groupKeyArray, map2);
            }

            @NotNull
            public static GroupKey groupKey(Builder $this, @NotNull Expr expr, @Nullable String asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                String string = asAlias;
                return new GroupKey(expr, string != null ? PrimitiveUtilsKt.asPrimitive$default((String)string, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupKey groupKey$default(Builder builder, Expr expr, String string, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupKey");
                }
                if ((n & 2) != 0) {
                    string = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupKey(expr, string, map2);
            }

            @NotNull
            public static GroupKey groupKey_(Builder $this, @NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupKey(expr, asAlias, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupKey groupKey_$default(Builder builder, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupKey_");
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupKey_(expr, symbolPrimitive, map2);
            }

            @NotNull
            public static OrderBy orderBy(Builder $this, @NotNull List<SortSpec> sortSpecs, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new OrderBy(sortSpecs, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ OrderBy orderBy$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: orderBy");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.orderBy(list, map2);
            }

            @NotNull
            public static OrderBy orderBy(Builder $this, @NotNull SortSpec sortSpecs0, @NotNull SortSpec[] sortSpecs, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(sortSpecs0, "sortSpecs0");
                Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new OrderBy(CollectionsKt.plus((Collection)CollectionsKt.listOf(sortSpecs0), (Iterable)ArraysKt.toList(sortSpecs)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ OrderBy orderBy$default(Builder builder, SortSpec sortSpec, SortSpec[] sortSpecArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: orderBy");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.orderBy(sortSpec, sortSpecArray, map2);
            }

            @NotNull
            public static SortSpec sortSpec(Builder $this, @NotNull Expr expr, @Nullable OrderingSpec orderingSpec, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SortSpec(expr, orderingSpec, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ SortSpec sortSpec$default(Builder builder, Expr expr, OrderingSpec orderingSpec, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: sortSpec");
                }
                if ((n & 2) != 0) {
                    orderingSpec = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.sortSpec(expr, orderingSpec, map2);
            }

            @NotNull
            public static DmlOpList dmlOpList(Builder $this, @NotNull List<? extends DmlOp> ops, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(ops, "ops");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOpList(ops, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOpList dmlOpList$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dmlOpList");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dmlOpList(list, map2);
            }

            @NotNull
            public static DmlOpList dmlOpList(Builder $this, @NotNull DmlOp ops0, @NotNull DmlOp[] ops, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(ops0, "ops0");
                Intrinsics.checkParameterIsNotNull(ops, "ops");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOpList(CollectionsKt.plus((Collection)CollectionsKt.listOf(ops0), (Iterable)ArraysKt.toList(ops)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOpList dmlOpList$default(Builder builder, DmlOp dmlOp, DmlOp[] dmlOpArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dmlOpList");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dmlOpList(dmlOp, dmlOpArray, map2);
            }

            @NotNull
            public static OnConflict onConflict(Builder $this, @NotNull Expr expr, @NotNull ConflictAction conflictAction, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(conflictAction, "conflictAction");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new OnConflict(expr, conflictAction, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ OnConflict onConflict$default(Builder builder, Expr expr, ConflictAction conflictAction, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: onConflict");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.onConflict(expr, conflictAction, map2);
            }

            @NotNull
            public static ReturningExpr returningExpr(Builder $this, @NotNull List<ReturningElem> elems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(elems, "elems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningExpr(elems, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningExpr returningExpr$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: returningExpr");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.returningExpr(list, map2);
            }

            @NotNull
            public static ReturningExpr returningExpr(Builder $this, @NotNull ReturningElem elems0, @NotNull ReturningElem[] elems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(elems0, "elems0");
                Intrinsics.checkParameterIsNotNull(elems, "elems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningExpr(CollectionsKt.plus((Collection)CollectionsKt.listOf(elems0), (Iterable)ArraysKt.toList(elems)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningExpr returningExpr$default(Builder builder, ReturningElem returningElem, ReturningElem[] returningElemArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: returningExpr");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.returningExpr(returningElem, returningElemArray, map2);
            }

            @NotNull
            public static ReturningElem returningElem(Builder $this, @NotNull ReturningMapping mapping, @NotNull ColumnComponent column, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(mapping, "mapping");
                Intrinsics.checkParameterIsNotNull(column, "column");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningElem(mapping, column, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningElem returningElem$default(Builder builder, ReturningMapping returningMapping, ColumnComponent columnComponent, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: returningElem");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.returningElem(returningMapping, columnComponent, map2);
            }

            @NotNull
            public static Identifier identifier(Builder $this, @NotNull String name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Identifier(PrimitiveUtilsKt.asPrimitive$default((String)name, null, (int)1, null), caseSensitivity, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Identifier identifier$default(Builder builder, String string, CaseSensitivity caseSensitivity, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: identifier");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.identifier(string, caseSensitivity, map2);
            }

            @NotNull
            public static Identifier identifier_(Builder $this, @NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Identifier(name, caseSensitivity, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Identifier identifier_$default(Builder builder, SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: identifier_");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.identifier_(symbolPrimitive, caseSensitivity, map2);
            }

            @NotNull
            public static Assignment assignment(Builder $this, @NotNull Expr target, @NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Assignment(target, value, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Assignment assignment$default(Builder builder, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: assignment");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.assignment(expr, expr2, map2);
            }

            @NotNull
            public static Statement.Query query(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Query(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Query query$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: query");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.query(expr, map2);
            }

            @NotNull
            public static Statement.Dml dml(Builder $this, @NotNull DmlOpList operations2, @Nullable FromSource from2, @Nullable Expr where2, @Nullable ReturningExpr returning2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operations2, "operations");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Dml(operations2, from2, where2, returning2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Dml dml$default(Builder builder, DmlOpList dmlOpList, FromSource fromSource, Expr expr, ReturningExpr returningExpr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dml");
                }
                if ((n & 2) != 0) {
                    fromSource = null;
                }
                if ((n & 4) != 0) {
                    expr = null;
                }
                if ((n & 8) != 0) {
                    returningExpr = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dml(dmlOpList, fromSource, expr, returningExpr, map2);
            }

            @NotNull
            public static Statement.Ddl ddl(Builder $this, @NotNull DdlOp op, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(op, "op");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Ddl(op, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Ddl ddl$default(Builder builder, DdlOp ddlOp, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: ddl");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.ddl(ddlOp, map2);
            }

            @NotNull
            public static Statement.Exec exec(Builder $this, @NotNull String procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Exec(PrimitiveUtilsKt.asPrimitive$default((String)procedureName, null, (int)1, null), args2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Exec exec$default(Builder builder, String string, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exec");
                }
                if ((n & 2) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exec(string, list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Statement.Exec exec_(Builder $this, @NotNull SymbolPrimitive procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Exec(procedureName, args2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Exec exec_$default(Builder builder, SymbolPrimitive symbolPrimitive, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exec_");
                }
                if ((n & 2) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exec_(symbolPrimitive, list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Statement.Exec exec(Builder $this, @NotNull String procedureName, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Exec(PrimitiveUtilsKt.asPrimitive$default((String)procedureName, null, (int)1, null), ArraysKt.toList(args2), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Exec exec$default(Builder builder, String string, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exec");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exec(string, exprArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Statement.Exec exec_(Builder $this, @NotNull SymbolPrimitive procedureName, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Statement.Exec(procedureName, ArraysKt.toList(args2), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Statement.Exec exec_$default(Builder builder, SymbolPrimitive symbolPrimitive, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: exec_");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.exec_(symbolPrimitive, exprArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Missing missing(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Missing(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Missing missing$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: missing");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.missing(map2);
            }

            @NotNull
            public static Expr.Lit lit(Builder $this, @NotNull IonElement value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Lit(value.asAnyElement(), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Lit lit$default(Builder builder, IonElement ionElement, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: lit");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.lit(ionElement, map2);
            }

            @NotNull
            public static Expr.Id id(Builder $this, @NotNull String name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Id(PrimitiveUtilsKt.asPrimitive$default((String)name, null, (int)1, null), caseSensitivity, qualifier, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Id id$default(Builder builder, String string, CaseSensitivity caseSensitivity, ScopeQualifier scopeQualifier, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: id");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.id(string, caseSensitivity, scopeQualifier, map2);
            }

            @NotNull
            public static Expr.Id id_(Builder $this, @NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Id(name, caseSensitivity, qualifier, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Id id_$default(Builder builder, SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, ScopeQualifier scopeQualifier, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: id_");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.id_(symbolPrimitive, caseSensitivity, scopeQualifier, map2);
            }

            @NotNull
            public static Expr.Parameter parameter(Builder $this, long index, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Parameter(PrimitiveUtilsKt.asPrimitive$default((long)index, null, (int)1, null), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Parameter parameter$default(Builder builder, long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: parameter");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.parameter(l, map2);
            }

            @NotNull
            public static Expr.Parameter parameter_(Builder $this, @NotNull LongPrimitive index, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Parameter(index, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Parameter parameter_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: parameter_");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.parameter_(longPrimitive, map2);
            }

            @NotNull
            public static Expr.Not not(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Not(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Not not$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: not");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.not(expr, map2);
            }

            @NotNull
            public static Expr.Pos pos(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Pos(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Pos pos$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: pos");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.pos(expr, map2);
            }

            @NotNull
            public static Expr.Neg neg(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Neg(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Neg neg$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: neg");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.neg(expr, map2);
            }

            @NotNull
            public static Expr.Plus plus(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Plus(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Plus plus$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: plus");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.plus(list, map2);
            }

            @NotNull
            public static Expr.Plus plus(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Plus(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Plus plus$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: plus");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.plus(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Minus minus(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Minus(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Minus minus$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: minus");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.minus(list, map2);
            }

            @NotNull
            public static Expr.Minus minus(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Minus(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Minus minus$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: minus");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.minus(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Times times(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Times(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Times times$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: times");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.times(list, map2);
            }

            @NotNull
            public static Expr.Times times(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Times(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Times times$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: times");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.times(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Divide divide(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Divide(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Divide divide$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: divide");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.divide(list, map2);
            }

            @NotNull
            public static Expr.Divide divide(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Divide(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Divide divide$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: divide");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.divide(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Modulo modulo(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Modulo(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Modulo modulo$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: modulo");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.modulo(list, map2);
            }

            @NotNull
            public static Expr.Modulo modulo(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Modulo(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Modulo modulo$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: modulo");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.modulo(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Concat concat(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Concat(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Concat concat$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: concat");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.concat(list, map2);
            }

            @NotNull
            public static Expr.Concat concat(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Concat(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Concat concat$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: concat");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.concat(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.And and(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.And(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.And and$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: and");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.and(list, map2);
            }

            @NotNull
            public static Expr.And and(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.And(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.And and$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: and");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.and(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Or or(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Or(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Or or$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: or");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.or(list, map2);
            }

            @NotNull
            public static Expr.Or or(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Or(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Or or$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: or");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.or(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Eq eq(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Eq(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Eq eq$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: eq");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.eq(list, map2);
            }

            @NotNull
            public static Expr.Eq eq(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Eq(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Eq eq$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: eq");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.eq(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Ne ne(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Ne(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Ne ne$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: ne");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.ne(list, map2);
            }

            @NotNull
            public static Expr.Ne ne(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Ne(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Ne ne$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: ne");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.ne(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Gt gt(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Gt(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Gt gt$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: gt");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.gt(list, map2);
            }

            @NotNull
            public static Expr.Gt gt(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Gt(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Gt gt$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: gt");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.gt(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Gte gte(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Gte(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Gte gte$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: gte");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.gte(list, map2);
            }

            @NotNull
            public static Expr.Gte gte(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Gte(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Gte gte$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: gte");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.gte(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Lt lt(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Lt(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Lt lt$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: lt");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.lt(list, map2);
            }

            @NotNull
            public static Expr.Lt lt(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Lt(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Lt lt$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: lt");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.lt(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Lte lte(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Lte(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Lte lte$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: lte");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.lte(list, map2);
            }

            @NotNull
            public static Expr.Lte lte(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Lte(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Lte lte$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: lte");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.lte(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Like like(Builder $this, @NotNull Expr value, @NotNull Expr pattern, @Nullable Expr escape, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(pattern, "pattern");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Like(value, pattern, escape, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Like like$default(Builder builder, Expr expr, Expr expr2, Expr expr3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: like");
                }
                if ((n & 4) != 0) {
                    expr3 = null;
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.like(expr, expr2, expr3, map2);
            }

            @NotNull
            public static Expr.Between between(Builder $this, @NotNull Expr value, @NotNull Expr from2, @NotNull Expr to, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(to, "to");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Between(value, from2, to, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Between between$default(Builder builder, Expr expr, Expr expr2, Expr expr3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: between");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.between(expr, expr2, expr3, map2);
            }

            @NotNull
            public static Expr.InCollection inCollection(Builder $this, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.InCollection(operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.InCollection inCollection$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: inCollection");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.inCollection(list, map2);
            }

            @NotNull
            public static Expr.InCollection inCollection(Builder $this, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.InCollection(CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.InCollection inCollection$default(Builder builder, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: inCollection");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.inCollection(expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.IsType isType(Builder $this, @NotNull Expr value, @NotNull Type type, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.IsType(value, type, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.IsType isType$default(Builder builder, Expr expr, Type type, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: isType");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.isType(expr, type, map2);
            }

            @NotNull
            public static Expr.SimpleCase simpleCase(Builder $this, @NotNull Expr expr, @NotNull ExprPairList cases, @Nullable Expr expr2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.SimpleCase(expr, cases, expr2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.SimpleCase simpleCase$default(Builder builder, Expr expr, ExprPairList exprPairList, Expr expr2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: simpleCase");
                }
                if ((n & 4) != 0) {
                    expr2 = null;
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.simpleCase(expr, exprPairList, expr2, map2);
            }

            @NotNull
            public static Expr.SearchedCase searchedCase(Builder $this, @NotNull ExprPairList cases, @Nullable Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.SearchedCase(cases, expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.SearchedCase searchedCase$default(Builder builder, ExprPairList exprPairList, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: searchedCase");
                }
                if ((n & 2) != 0) {
                    expr = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.searchedCase(exprPairList, expr, map2);
            }

            @NotNull
            public static Expr.Struct struct(Builder $this, @NotNull List<ExprPair> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Struct(fields, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Struct struct$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: struct");
                }
                if ((n & 1) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.struct(list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Struct struct(Builder $this, @NotNull ExprPair[] fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Struct(ArraysKt.toList(fields), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Struct struct$default(Builder builder, ExprPair[] exprPairArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: struct");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.struct(exprPairArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Bag bag(Builder $this, @NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Bag(values2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Bag bag$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: bag");
                }
                if ((n & 1) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.bag(list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Bag bag(Builder $this, @NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Bag(ArraysKt.toList(values2), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Bag bag$default(Builder builder, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: bag");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.bag(exprArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.List list(Builder $this, @NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.List(values2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.List list$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: list");
                }
                if ((n & 1) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.list(list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.List list(Builder $this, @NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.List(ArraysKt.toList(values2), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.List list$default(Builder builder, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: list");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.list(exprArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Sexp sexp(Builder $this, @NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Sexp(values2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Sexp sexp$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: sexp");
                }
                if ((n & 1) != 0) {
                    list = CollectionsKt.emptyList();
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.sexp(list, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Sexp sexp(Builder $this, @NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Sexp(ArraysKt.toList(values2), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Sexp sexp$default(Builder builder, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: sexp");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.sexp(exprArray, (Map<String, ? extends Object>)map2);
            }

            @NotNull
            public static Expr.Date date(Builder $this, long year2, long month, long day, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Date(PrimitiveUtilsKt.asPrimitive$default((long)year2, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)month, null, (int)1, null), PrimitiveUtilsKt.asPrimitive$default((long)day, null, (int)1, null), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Date date$default(Builder builder, long l, long l2, long l3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: date");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.date(l, l2, l3, map2);
            }

            @NotNull
            public static Expr.Date date_(Builder $this, @NotNull LongPrimitive year2, @NotNull LongPrimitive month, @NotNull LongPrimitive day, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(year2, "year");
                Intrinsics.checkParameterIsNotNull(month, "month");
                Intrinsics.checkParameterIsNotNull(day, "day");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Date(year2, month, day, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Date date_$default(Builder builder, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: date_");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.date_(longPrimitive, longPrimitive2, longPrimitive3, map2);
            }

            @NotNull
            public static Expr.LitTime litTime(Builder $this, @NotNull TimeValue value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.LitTime(value, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.LitTime litTime$default(Builder builder, TimeValue timeValue, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: litTime");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.litTime(timeValue, map2);
            }

            @NotNull
            public static Expr.Union union(Builder $this, @NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Union(setq2, operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Union union$default(Builder builder, SetQuantifier setQuantifier, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: union");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.union(setQuantifier, list, map2);
            }

            @NotNull
            public static Expr.Union union(Builder $this, @NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Union(setq2, CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Union union$default(Builder builder, SetQuantifier setQuantifier, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: union");
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.union(setQuantifier, expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Except except(Builder $this, @NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Except(setq2, operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Except except$default(Builder builder, SetQuantifier setQuantifier, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: except");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.except(setQuantifier, list, map2);
            }

            @NotNull
            public static Expr.Except except(Builder $this, @NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Except(setq2, CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Except except$default(Builder builder, SetQuantifier setQuantifier, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: except");
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.except(setQuantifier, expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Intersect intersect(Builder $this, @NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Intersect(setq2, operands, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Intersect intersect$default(Builder builder, SetQuantifier setQuantifier, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: intersect");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.intersect(setQuantifier, list, map2);
            }

            @NotNull
            public static Expr.Intersect intersect(Builder $this, @NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands0, "operands0");
                Intrinsics.checkParameterIsNotNull(operands1, "operands1");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Intersect(setq2, CollectionsKt.plus((Collection)CollectionsKt.listOf(operands0, operands1), (Iterable)ArraysKt.toList(operands)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Intersect intersect$default(Builder builder, SetQuantifier setQuantifier, Expr expr, Expr expr2, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: intersect");
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.intersect(setQuantifier, expr, expr2, exprArray, map2);
            }

            @NotNull
            public static Expr.Path path(Builder $this, @NotNull Expr root, @NotNull List<? extends PathStep> steps, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(root, "root");
                Intrinsics.checkParameterIsNotNull(steps, "steps");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Path(root, steps, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Path path$default(Builder builder, Expr expr, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: path");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.path(expr, list, map2);
            }

            @NotNull
            public static Expr.Path path(Builder $this, @NotNull Expr root, @NotNull PathStep steps0, @NotNull PathStep[] steps, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(root, "root");
                Intrinsics.checkParameterIsNotNull(steps0, "steps0");
                Intrinsics.checkParameterIsNotNull(steps, "steps");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Path(root, CollectionsKt.plus((Collection)CollectionsKt.listOf(steps0), (Iterable)ArraysKt.toList(steps)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Path path$default(Builder builder, Expr expr, PathStep pathStep, PathStep[] pathStepArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: path");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.path(expr, pathStep, pathStepArray, map2);
            }

            @NotNull
            public static Expr.Call call(Builder $this, @NotNull String funcName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Call(PrimitiveUtilsKt.asPrimitive$default((String)funcName, null, (int)1, null), args2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Call call$default(Builder builder, String string, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: call");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.call(string, list, map2);
            }

            @NotNull
            public static Expr.Call call_(Builder $this, @NotNull SymbolPrimitive funcName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Call(funcName, args2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Call call_$default(Builder builder, SymbolPrimitive symbolPrimitive, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: call_");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.call_(symbolPrimitive, list, map2);
            }

            @NotNull
            public static Expr.Call call(Builder $this, @NotNull String funcName, @NotNull Expr args0, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args0, "args0");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Call(PrimitiveUtilsKt.asPrimitive$default((String)funcName, null, (int)1, null), CollectionsKt.plus((Collection)CollectionsKt.listOf(args0), (Iterable)ArraysKt.toList(args2)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Call call$default(Builder builder, String string, Expr expr, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: call");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.call(string, expr, exprArray, map2);
            }

            @NotNull
            public static Expr.Call call_(Builder $this, @NotNull SymbolPrimitive funcName, @NotNull Expr args0, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args0, "args0");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Call(funcName, CollectionsKt.plus((Collection)CollectionsKt.listOf(args0), (Iterable)ArraysKt.toList(args2)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Call call_$default(Builder builder, SymbolPrimitive symbolPrimitive, Expr expr, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: call_");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.call_(symbolPrimitive, expr, exprArray, map2);
            }

            @NotNull
            public static Expr.CallAgg callAgg(Builder $this, @NotNull SetQuantifier setq2, @NotNull String funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(arg, "arg");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.CallAgg(setq2, PrimitiveUtilsKt.asPrimitive$default((String)funcName, null, (int)1, null), arg, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.CallAgg callAgg$default(Builder builder, SetQuantifier setQuantifier, String string, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: callAgg");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.callAgg(setQuantifier, string, expr, map2);
            }

            @NotNull
            public static Expr.CallAgg callAgg_(Builder $this, @NotNull SetQuantifier setq2, @NotNull SymbolPrimitive funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(arg, "arg");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.CallAgg(setq2, funcName, arg, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.CallAgg callAgg_$default(Builder builder, SetQuantifier setQuantifier, SymbolPrimitive symbolPrimitive, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: callAgg_");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.callAgg_(setQuantifier, symbolPrimitive, expr, map2);
            }

            @NotNull
            public static Expr.Cast cast(Builder $this, @NotNull Expr value, @NotNull Type asType, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(asType, "asType");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Cast(value, asType, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Cast cast$default(Builder builder, Expr expr, Type type, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: cast");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.cast(expr, type, map2);
            }

            @NotNull
            public static Expr.Select select(Builder $this, @Nullable SetQuantifier setq2, @NotNull Projection project2, @NotNull FromSource from2, @Nullable Let fromLet2, @Nullable Expr where2, @Nullable GroupBy group2, @Nullable Expr having2, @Nullable OrderBy order2, @Nullable Expr limit2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(project2, "project");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Expr.Select(setq2, project2, from2, fromLet2, where2, group2, having2, order2, limit2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Expr.Select select$default(Builder builder, SetQuantifier setQuantifier, Projection projection, FromSource fromSource, Let let2, Expr expr, GroupBy groupBy2, Expr expr2, OrderBy orderBy, Expr expr3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: select");
                }
                if ((n & 1) != 0) {
                    setQuantifier = null;
                }
                if ((n & 8) != 0) {
                    let2 = null;
                }
                if ((n & 0x10) != 0) {
                    expr = null;
                }
                if ((n & 0x20) != 0) {
                    groupBy2 = null;
                }
                if ((n & 0x40) != 0) {
                    expr2 = null;
                }
                if ((n & 0x80) != 0) {
                    orderBy = null;
                }
                if ((n & 0x100) != 0) {
                    expr3 = null;
                }
                if ((n & 0x200) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.select(setQuantifier, projection, fromSource, let2, expr, groupBy2, expr2, orderBy, expr3, map2);
            }

            @NotNull
            public static PathStep.PathExpr pathExpr(Builder $this, @NotNull Expr index, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathStep.PathExpr(index, caseSensitivity, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ PathStep.PathExpr pathExpr$default(Builder builder, Expr expr, CaseSensitivity caseSensitivity, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: pathExpr");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.pathExpr(expr, caseSensitivity, map2);
            }

            @NotNull
            public static PathStep.PathWildcard pathWildcard(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathStep.PathWildcard(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ PathStep.PathWildcard pathWildcard$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: pathWildcard");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.pathWildcard(map2);
            }

            @NotNull
            public static PathStep.PathUnpivot pathUnpivot(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathStep.PathUnpivot(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ PathStep.PathUnpivot pathUnpivot$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: pathUnpivot");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.pathUnpivot(map2);
            }

            @NotNull
            public static Projection.ProjectStar projectStar(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Projection.ProjectStar(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Projection.ProjectStar projectStar$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectStar");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectStar(map2);
            }

            @NotNull
            public static Projection.ProjectList projectList(Builder $this, @NotNull List<? extends ProjectItem> projectItems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Projection.ProjectList(projectItems, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Projection.ProjectList projectList$default(Builder builder, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectList");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectList(list, map2);
            }

            @NotNull
            public static Projection.ProjectList projectList(Builder $this, @NotNull ProjectItem projectItems0, @NotNull ProjectItem[] projectItems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(projectItems0, "projectItems0");
                Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Projection.ProjectList(CollectionsKt.plus((Collection)CollectionsKt.listOf(projectItems0), (Iterable)ArraysKt.toList(projectItems)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Projection.ProjectList projectList$default(Builder builder, ProjectItem projectItem, ProjectItem[] projectItemArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectList");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectList(projectItem, projectItemArray, map2);
            }

            @NotNull
            public static Projection.ProjectPivot projectPivot(Builder $this, @NotNull Expr value, @NotNull Expr key, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(key, "key");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Projection.ProjectPivot(value, key, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Projection.ProjectPivot projectPivot$default(Builder builder, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectPivot");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectPivot(expr, expr2, map2);
            }

            @NotNull
            public static Projection.ProjectValue projectValue(Builder $this, @NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Projection.ProjectValue(value, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Projection.ProjectValue projectValue$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectValue");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectValue(expr, map2);
            }

            @NotNull
            public static ProjectItem.ProjectAll projectAll(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectItem.ProjectAll(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ProjectItem.ProjectAll projectAll$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectAll");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectAll(expr, map2);
            }

            @NotNull
            public static ProjectItem.ProjectExpr projectExpr(Builder $this, @NotNull Expr expr, @Nullable String asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                String string = asAlias;
                return new ProjectItem.ProjectExpr(expr, string != null ? PrimitiveUtilsKt.asPrimitive$default((String)string, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ProjectItem.ProjectExpr projectExpr$default(Builder builder, Expr expr, String string, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectExpr");
                }
                if ((n & 2) != 0) {
                    string = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectExpr(expr, string, map2);
            }

            @NotNull
            public static ProjectItem.ProjectExpr projectExpr_(Builder $this, @NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectItem.ProjectExpr(expr, asAlias, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ProjectItem.ProjectExpr projectExpr_$default(Builder builder, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: projectExpr_");
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.projectExpr_(expr, symbolPrimitive, map2);
            }

            @NotNull
            public static FromSource.Scan scan(Builder $this, @NotNull Expr expr, @Nullable String asAlias, @Nullable String atAlias, @Nullable String byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                String string = asAlias;
                String string2 = atAlias;
                String string3 = byAlias;
                return new FromSource.Scan(expr, string != null ? PrimitiveUtilsKt.asPrimitive$default((String)string, null, (int)1, null) : null, string2 != null ? PrimitiveUtilsKt.asPrimitive$default((String)string2, null, (int)1, null) : null, string3 != null ? PrimitiveUtilsKt.asPrimitive$default((String)string3, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ FromSource.Scan scan$default(Builder builder, Expr expr, String string, String string2, String string3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: scan");
                }
                if ((n & 2) != 0) {
                    string = null;
                }
                if ((n & 4) != 0) {
                    string2 = null;
                }
                if ((n & 8) != 0) {
                    string3 = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.scan(expr, string, string2, string3, map2);
            }

            @NotNull
            public static FromSource.Scan scan_(Builder $this, @NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new FromSource.Scan(expr, asAlias, atAlias, byAlias, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ FromSource.Scan scan_$default(Builder builder, Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: scan_");
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = null;
                }
                if ((n & 4) != 0) {
                    symbolPrimitive2 = null;
                }
                if ((n & 8) != 0) {
                    symbolPrimitive3 = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.scan_(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }

            @NotNull
            public static FromSource.Unpivot unpivot(Builder $this, @NotNull Expr expr, @Nullable String asAlias, @Nullable String atAlias, @Nullable String byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                String string = asAlias;
                String string2 = atAlias;
                String string3 = byAlias;
                return new FromSource.Unpivot(expr, string != null ? PrimitiveUtilsKt.asPrimitive$default((String)string, null, (int)1, null) : null, string2 != null ? PrimitiveUtilsKt.asPrimitive$default((String)string2, null, (int)1, null) : null, string3 != null ? PrimitiveUtilsKt.asPrimitive$default((String)string3, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ FromSource.Unpivot unpivot$default(Builder builder, Expr expr, String string, String string2, String string3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: unpivot");
                }
                if ((n & 2) != 0) {
                    string = null;
                }
                if ((n & 4) != 0) {
                    string2 = null;
                }
                if ((n & 8) != 0) {
                    string3 = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.unpivot(expr, string, string2, string3, map2);
            }

            @NotNull
            public static FromSource.Unpivot unpivot_(Builder $this, @NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new FromSource.Unpivot(expr, asAlias, atAlias, byAlias, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ FromSource.Unpivot unpivot_$default(Builder builder, Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: unpivot_");
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = null;
                }
                if ((n & 4) != 0) {
                    symbolPrimitive2 = null;
                }
                if ((n & 8) != 0) {
                    symbolPrimitive3 = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.unpivot_(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }

            @NotNull
            public static FromSource.Join join(Builder $this, @NotNull JoinType type, @NotNull FromSource left, @NotNull FromSource right, @Nullable Expr predicate, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(left, "left");
                Intrinsics.checkParameterIsNotNull(right, "right");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new FromSource.Join(type, left, right, predicate, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ FromSource.Join join$default(Builder builder, JoinType joinType, FromSource fromSource, FromSource fromSource2, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: join");
                }
                if ((n & 8) != 0) {
                    expr = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.join(joinType, fromSource, fromSource2, expr, map2);
            }

            @NotNull
            public static JoinType.Inner inner(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new JoinType.Inner(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ JoinType.Inner inner$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: inner");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.inner(map2);
            }

            @NotNull
            public static JoinType.Left left(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new JoinType.Left(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ JoinType.Left left$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: left");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.left(map2);
            }

            @NotNull
            public static JoinType.Right right(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new JoinType.Right(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ JoinType.Right right$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: right");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.right(map2);
            }

            @NotNull
            public static JoinType.Full full(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new JoinType.Full(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ JoinType.Full full$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: full");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.full(map2);
            }

            @NotNull
            public static GroupingStrategy.GroupFull groupFull(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupingStrategy.GroupFull(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupingStrategy.GroupFull groupFull$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupFull");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupFull(map2);
            }

            @NotNull
            public static GroupingStrategy.GroupPartial groupPartial(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupingStrategy.GroupPartial(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ GroupingStrategy.GroupPartial groupPartial$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: groupPartial");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.groupPartial(map2);
            }

            @NotNull
            public static OrderingSpec.Asc asc(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new OrderingSpec.Asc(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ OrderingSpec.Asc asc$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: asc");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.asc(map2);
            }

            @NotNull
            public static OrderingSpec.Desc desc(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new OrderingSpec.Desc(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ OrderingSpec.Desc desc$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: desc");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.desc(map2);
            }

            @NotNull
            public static CaseSensitivity.CaseSensitive caseSensitive(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CaseSensitivity.CaseSensitive(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ CaseSensitivity.CaseSensitive caseSensitive$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: caseSensitive");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.caseSensitive(map2);
            }

            @NotNull
            public static CaseSensitivity.CaseInsensitive caseInsensitive(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CaseSensitivity.CaseInsensitive(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ CaseSensitivity.CaseInsensitive caseInsensitive$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: caseInsensitive");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.caseInsensitive(map2);
            }

            @NotNull
            public static ScopeQualifier.Unqualified unqualified(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ScopeQualifier.Unqualified(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ScopeQualifier.Unqualified unqualified$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: unqualified");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.unqualified(map2);
            }

            @NotNull
            public static ScopeQualifier.LocalsFirst localsFirst(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ScopeQualifier.LocalsFirst(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ScopeQualifier.LocalsFirst localsFirst$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: localsFirst");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.localsFirst(map2);
            }

            @NotNull
            public static SetQuantifier.All all(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SetQuantifier.All(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ SetQuantifier.All all$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: all");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.all(map2);
            }

            @NotNull
            public static SetQuantifier.Distinct distinct(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SetQuantifier.Distinct(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ SetQuantifier.Distinct distinct$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: distinct");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.distinct(map2);
            }

            @NotNull
            public static DmlOp.Insert insert(Builder $this, @NotNull Expr target, @NotNull Expr values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOp.Insert(target, values2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOp.Insert insert$default(Builder builder, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: insert");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.insert(expr, expr2, map2);
            }

            @NotNull
            public static DmlOp.InsertValue insertValue(Builder $this, @NotNull Expr target, @NotNull Expr value, @Nullable Expr index, @Nullable OnConflict onConflict, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOp.InsertValue(target, value, index, onConflict, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOp.InsertValue insertValue$default(Builder builder, Expr expr, Expr expr2, Expr expr3, OnConflict onConflict, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: insertValue");
                }
                if ((n & 4) != 0) {
                    expr3 = null;
                }
                if ((n & 8) != 0) {
                    onConflict = null;
                }
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.insertValue(expr, expr2, expr3, onConflict, map2);
            }

            @NotNull
            public static DmlOp.Set set(Builder $this, @NotNull Assignment assignment, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(assignment, "assignment");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOp.Set(assignment, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOp.Set set$default(Builder builder, Assignment assignment, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: set");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.set(assignment, map2);
            }

            @NotNull
            public static DmlOp.Remove remove(Builder $this, @NotNull Expr target, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOp.Remove(target, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOp.Remove remove$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: remove");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.remove(expr, map2);
            }

            @NotNull
            public static DmlOp.Delete delete(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DmlOp.Delete(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DmlOp.Delete delete$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: delete");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.delete(map2);
            }

            @NotNull
            public static ConflictAction.DoNothing doNothing(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ConflictAction.DoNothing(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ConflictAction.DoNothing doNothing$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: doNothing");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.doNothing(map2);
            }

            @NotNull
            public static DdlOp.CreateTable createTable(Builder $this, @NotNull String tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.CreateTable(PrimitiveUtilsKt.asPrimitive$default((String)tableName, null, (int)1, null), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.CreateTable createTable$default(Builder builder, String string, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: createTable");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.createTable(string, map2);
            }

            @NotNull
            public static DdlOp.CreateTable createTable_(Builder $this, @NotNull SymbolPrimitive tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.CreateTable(tableName, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.CreateTable createTable_$default(Builder builder, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: createTable_");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.createTable_(symbolPrimitive, map2);
            }

            @NotNull
            public static DdlOp.DropTable dropTable(Builder $this, @NotNull Identifier tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.DropTable(tableName, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.DropTable dropTable$default(Builder builder, Identifier identifier, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dropTable");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dropTable(identifier, map2);
            }

            @NotNull
            public static DdlOp.CreateIndex createIndex(Builder $this, @NotNull Identifier indexName, @NotNull List<? extends Expr> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(indexName, "indexName");
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.CreateIndex(indexName, fields, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.CreateIndex createIndex$default(Builder builder, Identifier identifier, List list, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: createIndex");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.createIndex(identifier, list, map2);
            }

            @NotNull
            public static DdlOp.CreateIndex createIndex(Builder $this, @NotNull Identifier indexName, @NotNull Expr fields0, @NotNull Expr[] fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(indexName, "indexName");
                Intrinsics.checkParameterIsNotNull(fields0, "fields0");
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.CreateIndex(indexName, CollectionsKt.plus((Collection)CollectionsKt.listOf(fields0), (Iterable)ArraysKt.toList(fields)), IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.CreateIndex createIndex$default(Builder builder, Identifier identifier, Expr expr, Expr[] exprArray, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: createIndex");
                }
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.createIndex(identifier, expr, exprArray, map2);
            }

            @NotNull
            public static DdlOp.DropIndex dropIndex(Builder $this, @NotNull Identifier table2, @NotNull Identifier keys2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(table2, "table");
                Intrinsics.checkParameterIsNotNull(keys2, "keys");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DdlOp.DropIndex(table2, keys2, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ DdlOp.DropIndex dropIndex$default(Builder builder, Identifier identifier, Identifier identifier2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dropIndex");
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dropIndex(identifier, identifier2, map2);
            }

            @NotNull
            public static ColumnComponent.ReturningWildcard returningWildcard(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ColumnComponent.ReturningWildcard(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ColumnComponent.ReturningWildcard returningWildcard$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: returningWildcard");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.returningWildcard(map2);
            }

            @NotNull
            public static ColumnComponent.ReturningColumn returningColumn(Builder $this, @NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ColumnComponent.ReturningColumn(expr, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ColumnComponent.ReturningColumn returningColumn$default(Builder builder, Expr expr, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: returningColumn");
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.returningColumn(expr, map2);
            }

            @NotNull
            public static ReturningMapping.ModifiedNew modifiedNew(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningMapping.ModifiedNew(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningMapping.ModifiedNew modifiedNew$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: modifiedNew");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.modifiedNew(map2);
            }

            @NotNull
            public static ReturningMapping.ModifiedOld modifiedOld(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningMapping.ModifiedOld(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningMapping.ModifiedOld modifiedOld$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: modifiedOld");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.modifiedOld(map2);
            }

            @NotNull
            public static ReturningMapping.AllNew allNew(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningMapping.AllNew(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningMapping.AllNew allNew$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: allNew");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.allNew(map2);
            }

            @NotNull
            public static ReturningMapping.AllOld allOld(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningMapping.AllOld(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ ReturningMapping.AllOld allOld$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: allOld");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.allOld(map2);
            }

            @NotNull
            public static Type.NullType nullType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.NullType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.NullType nullType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: nullType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.nullType(map2);
            }

            @NotNull
            public static Type.BooleanType booleanType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.BooleanType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.BooleanType booleanType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: booleanType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.booleanType(map2);
            }

            @NotNull
            public static Type.SmallintType smallintType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.SmallintType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.SmallintType smallintType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: smallintType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.smallintType(map2);
            }

            @NotNull
            public static Type.IntegerType integerType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.IntegerType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.IntegerType integerType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: integerType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.integerType(map2);
            }

            @NotNull
            public static Type.FloatType floatType(Builder $this, @Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = precision;
                return new Type.FloatType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.FloatType floatType$default(Builder builder, Long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: floatType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.floatType(l, map2);
            }

            @NotNull
            public static Type.FloatType floatType_(Builder $this, @Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.FloatType(precision, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.FloatType floatType_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: floatType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.floatType_(longPrimitive, map2);
            }

            @NotNull
            public static Type.RealType realType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.RealType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.RealType realType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: realType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.realType(map2);
            }

            @NotNull
            public static Type.DoublePrecisionType doublePrecisionType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.DoublePrecisionType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.DoublePrecisionType doublePrecisionType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: doublePrecisionType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.doublePrecisionType(map2);
            }

            @NotNull
            public static Type.DecimalType decimalType(Builder $this, @Nullable Long precision, @Nullable Long scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = precision;
                Long l2 = scale;
                return new Type.DecimalType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, l2 != null ? PrimitiveUtilsKt.asPrimitive$default((long)l2, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.DecimalType decimalType$default(Builder builder, Long l, Long l2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: decimalType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    l2 = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.decimalType(l, l2, map2);
            }

            @NotNull
            public static Type.DecimalType decimalType_(Builder $this, @Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.DecimalType(precision, scale, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.DecimalType decimalType_$default(Builder builder, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: decimalType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    longPrimitive2 = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.decimalType_(longPrimitive, longPrimitive2, map2);
            }

            @NotNull
            public static Type.NumericType numericType(Builder $this, @Nullable Long precision, @Nullable Long scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = precision;
                Long l2 = scale;
                return new Type.NumericType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, l2 != null ? PrimitiveUtilsKt.asPrimitive$default((long)l2, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.NumericType numericType$default(Builder builder, Long l, Long l2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: numericType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    l2 = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.numericType(l, l2, map2);
            }

            @NotNull
            public static Type.NumericType numericType_(Builder $this, @Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.NumericType(precision, scale, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.NumericType numericType_$default(Builder builder, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: numericType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    longPrimitive2 = null;
                }
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.numericType_(longPrimitive, longPrimitive2, map2);
            }

            @NotNull
            public static Type.TimestampType timestampType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.TimestampType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TimestampType timestampType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timestampType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timestampType(map2);
            }

            @NotNull
            public static Type.CharacterType characterType(Builder $this, @Nullable Long length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = length;
                return new Type.CharacterType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.CharacterType characterType$default(Builder builder, Long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: characterType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.characterType(l, map2);
            }

            @NotNull
            public static Type.CharacterType characterType_(Builder $this, @Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.CharacterType(length, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.CharacterType characterType_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: characterType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.characterType_(longPrimitive, map2);
            }

            @NotNull
            public static Type.CharacterVaryingType characterVaryingType(Builder $this, @Nullable Long length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = length;
                return new Type.CharacterVaryingType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.CharacterVaryingType characterVaryingType$default(Builder builder, Long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: characterVaryingType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.characterVaryingType(l, map2);
            }

            @NotNull
            public static Type.CharacterVaryingType characterVaryingType_(Builder $this, @Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.CharacterVaryingType(length, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.CharacterVaryingType characterVaryingType_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: characterVaryingType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.characterVaryingType_(longPrimitive, map2);
            }

            @NotNull
            public static Type.MissingType missingType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.MissingType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.MissingType missingType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: missingType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.missingType(map2);
            }

            @NotNull
            public static Type.StringType stringType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.StringType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.StringType stringType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: stringType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.stringType(map2);
            }

            @NotNull
            public static Type.SymbolType symbolType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.SymbolType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.SymbolType symbolType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: symbolType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.symbolType(map2);
            }

            @NotNull
            public static Type.BlobType blobType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.BlobType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.BlobType blobType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: blobType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.blobType(map2);
            }

            @NotNull
            public static Type.ClobType clobType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.ClobType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.ClobType clobType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: clobType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.clobType(map2);
            }

            @NotNull
            public static Type.DateType dateType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.DateType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.DateType dateType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: dateType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.dateType(map2);
            }

            @NotNull
            public static Type.TimeType timeType(Builder $this, @Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = precision;
                return new Type.TimeType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TimeType timeType$default(Builder builder, Long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeType(l, map2);
            }

            @NotNull
            public static Type.TimeType timeType_(Builder $this, @Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.TimeType(precision, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TimeType timeType_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeType_(longPrimitive, map2);
            }

            @NotNull
            public static Type.TimeWithTimeZoneType timeWithTimeZoneType(Builder $this, @Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                Long l = precision;
                return new Type.TimeWithTimeZoneType(l != null ? PrimitiveUtilsKt.asPrimitive$default((long)l, null, (int)1, null) : null, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TimeWithTimeZoneType timeWithTimeZoneType$default(Builder builder, Long l, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeWithTimeZoneType");
                }
                if ((n & 1) != 0) {
                    l = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeWithTimeZoneType(l, map2);
            }

            @NotNull
            public static Type.TimeWithTimeZoneType timeWithTimeZoneType_(Builder $this, @Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.TimeWithTimeZoneType(precision, IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TimeWithTimeZoneType timeWithTimeZoneType_$default(Builder builder, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: timeWithTimeZoneType_");
                }
                if ((n & 1) != 0) {
                    longPrimitive = null;
                }
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.timeWithTimeZoneType_(longPrimitive, map2);
            }

            @NotNull
            public static Type.StructType structType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.StructType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.StructType structType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: structType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.structType(map2);
            }

            @NotNull
            public static Type.TupleType tupleType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.TupleType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.TupleType tupleType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: tupleType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.tupleType(map2);
            }

            @NotNull
            public static Type.ListType listType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.ListType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.ListType listType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: listType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.listType(map2);
            }

            @NotNull
            public static Type.SexpType sexpType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.SexpType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.SexpType sexpType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: sexpType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.sexpType(map2);
            }

            @NotNull
            public static Type.BagType bagType(Builder $this, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Type.BagType(IonMeta.plus($this.newMetaContainer(), metas));
            }

            public static /* synthetic */ Type.BagType bagType$default(Builder builder, Map map2, int n, Object object) {
                if (object != null) {
                    throw new UnsupportedOperationException("Super calls with default arguments not supported in this target, function: bagType");
                }
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                return builder.bagType(map2);
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\b\u00c2\u0002\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002\u00a8\u0006\u0003"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstBuilder;", "Lorg/partiql/lang/domains/PartiqlAst$Builder;", "()V", "lang"})
    private static final class PartiqlAstBuilder
    implements Builder {
        public static final PartiqlAstBuilder INSTANCE;

        private PartiqlAstBuilder() {
        }

        static {
            PartiqlAstBuilder partiqlAstBuilder;
            INSTANCE = partiqlAstBuilder = new PartiqlAstBuilder();
        }

        @Override
        @NotNull
        public Map<String, Object> newMetaContainer() {
            return Builder.DefaultImpls.newMetaContainer(this);
        }

        @Override
        @NotNull
        public TimeValue timeValue(long hour, long minute, long second, long nano, long precision, @Nullable Long tzMinutes, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeValue(this, hour, minute, second, nano, precision, tzMinutes, metas);
        }

        @Override
        @NotNull
        public TimeValue timeValue_(@NotNull LongPrimitive hour, @NotNull LongPrimitive minute, @NotNull LongPrimitive second, @NotNull LongPrimitive nano, @NotNull LongPrimitive precision, @Nullable LongPrimitive tzMinutes, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(hour, "hour");
            Intrinsics.checkParameterIsNotNull(minute, "minute");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(nano, "nano");
            Intrinsics.checkParameterIsNotNull(precision, "precision");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeValue_(this, hour, minute, second, nano, precision, tzMinutes, metas);
        }

        @Override
        @NotNull
        public Let let(@NotNull List<LetBinding> letBindings, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.let(this, letBindings, metas);
        }

        @Override
        @NotNull
        public Let let(@NotNull LetBinding letBindings0, @NotNull LetBinding[] letBindings, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(letBindings0, "letBindings0");
            Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.let(this, letBindings0, letBindings, metas);
        }

        @Override
        @NotNull
        public LetBinding letBinding(@NotNull Expr expr, @NotNull String name, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.letBinding(this, expr, name, metas);
        }

        @Override
        @NotNull
        public LetBinding letBinding_(@NotNull Expr expr, @NotNull SymbolPrimitive name, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.letBinding_(this, expr, name, metas);
        }

        @Override
        @NotNull
        public ExprPair exprPair(@NotNull Expr first, @NotNull Expr second, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(first, "first");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exprPair(this, first, second, metas);
        }

        @Override
        @NotNull
        public ExprPairList exprPairList(@NotNull List<ExprPair> pairs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(pairs, "pairs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exprPairList((Builder)this, pairs, metas);
        }

        @Override
        @NotNull
        public ExprPairList exprPairList(@NotNull ExprPair[] pairs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(pairs, "pairs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exprPairList((Builder)this, pairs, metas);
        }

        @Override
        @NotNull
        public GroupBy groupBy(@NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable String groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(strategy, "strategy");
            Intrinsics.checkParameterIsNotNull(keyList, "keyList");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupBy(this, strategy, keyList, groupAsAlias, metas);
        }

        @Override
        @NotNull
        public GroupBy groupBy_(@NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable SymbolPrimitive groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(strategy, "strategy");
            Intrinsics.checkParameterIsNotNull(keyList, "keyList");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupBy_(this, strategy, keyList, groupAsAlias, metas);
        }

        @Override
        @NotNull
        public GroupKeyList groupKeyList(@NotNull List<GroupKey> keys2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(keys2, "keys");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupKeyList(this, keys2, metas);
        }

        @Override
        @NotNull
        public GroupKeyList groupKeyList(@NotNull GroupKey keys0, @NotNull GroupKey[] keys2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(keys0, "keys0");
            Intrinsics.checkParameterIsNotNull(keys2, "keys");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupKeyList(this, keys0, keys2, metas);
        }

        @Override
        @NotNull
        public GroupKey groupKey(@NotNull Expr expr, @Nullable String asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupKey(this, expr, asAlias, metas);
        }

        @Override
        @NotNull
        public GroupKey groupKey_(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupKey_(this, expr, asAlias, metas);
        }

        @Override
        @NotNull
        public OrderBy orderBy(@NotNull List<SortSpec> sortSpecs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.orderBy(this, sortSpecs, metas);
        }

        @Override
        @NotNull
        public OrderBy orderBy(@NotNull SortSpec sortSpecs0, @NotNull SortSpec[] sortSpecs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(sortSpecs0, "sortSpecs0");
            Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.orderBy(this, sortSpecs0, sortSpecs, metas);
        }

        @Override
        @NotNull
        public SortSpec sortSpec(@NotNull Expr expr, @Nullable OrderingSpec orderingSpec, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.sortSpec(this, expr, orderingSpec, metas);
        }

        @Override
        @NotNull
        public DmlOpList dmlOpList(@NotNull List<? extends DmlOp> ops, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(ops, "ops");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dmlOpList(this, ops, metas);
        }

        @Override
        @NotNull
        public DmlOpList dmlOpList(@NotNull DmlOp ops0, @NotNull DmlOp[] ops, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(ops0, "ops0");
            Intrinsics.checkParameterIsNotNull(ops, "ops");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dmlOpList(this, ops0, ops, metas);
        }

        @Override
        @NotNull
        public OnConflict onConflict(@NotNull Expr expr, @NotNull ConflictAction conflictAction, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(conflictAction, "conflictAction");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.onConflict(this, expr, conflictAction, metas);
        }

        @Override
        @NotNull
        public ReturningExpr returningExpr(@NotNull List<ReturningElem> elems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(elems, "elems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.returningExpr(this, elems, metas);
        }

        @Override
        @NotNull
        public ReturningExpr returningExpr(@NotNull ReturningElem elems0, @NotNull ReturningElem[] elems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(elems0, "elems0");
            Intrinsics.checkParameterIsNotNull(elems, "elems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.returningExpr(this, elems0, elems, metas);
        }

        @Override
        @NotNull
        public ReturningElem returningElem(@NotNull ReturningMapping mapping, @NotNull ColumnComponent column, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(mapping, "mapping");
            Intrinsics.checkParameterIsNotNull(column, "column");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.returningElem(this, mapping, column, metas);
        }

        @Override
        @NotNull
        public Identifier identifier(@NotNull String name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.identifier(this, name, caseSensitivity, metas);
        }

        @Override
        @NotNull
        public Identifier identifier_(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.identifier_(this, name, caseSensitivity, metas);
        }

        @Override
        @NotNull
        public Assignment assignment(@NotNull Expr target, @NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.assignment(this, target, value, metas);
        }

        @Override
        @NotNull
        public Statement.Query query(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.query(this, expr, metas);
        }

        @Override
        @NotNull
        public Statement.Dml dml(@NotNull DmlOpList operations2, @Nullable FromSource from2, @Nullable Expr where2, @Nullable ReturningExpr returning2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operations2, "operations");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dml(this, operations2, from2, where2, returning2, metas);
        }

        @Override
        @NotNull
        public Statement.Ddl ddl(@NotNull DdlOp op, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(op, "op");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.ddl(this, op, metas);
        }

        @Override
        @NotNull
        public Statement.Exec exec(@NotNull String procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exec((Builder)this, procedureName, args2, metas);
        }

        @Override
        @NotNull
        public Statement.Exec exec(@NotNull String procedureName, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exec((Builder)this, procedureName, args2, metas);
        }

        @Override
        @NotNull
        public Statement.Exec exec_(@NotNull SymbolPrimitive procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exec_((Builder)this, procedureName, args2, metas);
        }

        @Override
        @NotNull
        public Statement.Exec exec_(@NotNull SymbolPrimitive procedureName, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.exec_((Builder)this, procedureName, args2, metas);
        }

        @Override
        @NotNull
        public Expr.Missing missing(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.missing(this, metas);
        }

        @Override
        @NotNull
        public Expr.Lit lit(@NotNull IonElement value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.lit(this, value, metas);
        }

        @Override
        @NotNull
        public Expr.Id id(@NotNull String name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.id(this, name, caseSensitivity, qualifier, metas);
        }

        @Override
        @NotNull
        public Expr.Id id_(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.id_(this, name, caseSensitivity, qualifier, metas);
        }

        @Override
        @NotNull
        public Expr.Parameter parameter(long index, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.parameter(this, index, metas);
        }

        @Override
        @NotNull
        public Expr.Parameter parameter_(@NotNull LongPrimitive index, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(index, "index");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.parameter_(this, index, metas);
        }

        @Override
        @NotNull
        public Expr.Not not(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.not(this, expr, metas);
        }

        @Override
        @NotNull
        public Expr.Pos pos(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.pos(this, expr, metas);
        }

        @Override
        @NotNull
        public Expr.Neg neg(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.neg(this, expr, metas);
        }

        @Override
        @NotNull
        public Expr.Plus plus(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.plus(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Plus plus(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.plus(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Minus minus(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.minus(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Minus minus(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.minus(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Times times(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.times(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Times times(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.times(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Divide divide(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.divide(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Divide divide(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.divide(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Modulo modulo(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.modulo(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Modulo modulo(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.modulo(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Concat concat(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.concat(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Concat concat(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.concat(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.And and(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.and(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.And and(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.and(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Or or(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.or(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Or or(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.or(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Eq eq(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.eq(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Eq eq(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.eq(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Ne ne(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.ne(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Ne ne(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.ne(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Gt gt(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.gt(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Gt gt(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.gt(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Gte gte(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.gte(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Gte gte(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.gte(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Lt lt(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.lt(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Lt lt(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.lt(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Lte lte(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.lte(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Lte lte(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.lte(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Like like(@NotNull Expr value, @NotNull Expr pattern, @Nullable Expr escape, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(pattern, "pattern");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.like(this, value, pattern, escape, metas);
        }

        @Override
        @NotNull
        public Expr.Between between(@NotNull Expr value, @NotNull Expr from2, @NotNull Expr to, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(from2, "from");
            Intrinsics.checkParameterIsNotNull(to, "to");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.between(this, value, from2, to, metas);
        }

        @Override
        @NotNull
        public Expr.InCollection inCollection(@NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.inCollection(this, operands, metas);
        }

        @Override
        @NotNull
        public Expr.InCollection inCollection(@NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.inCollection(this, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.IsType isType(@NotNull Expr value, @NotNull Type type, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(type, "type");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.isType(this, value, type, metas);
        }

        @Override
        @NotNull
        public Expr.SimpleCase simpleCase(@NotNull Expr expr, @NotNull ExprPairList cases, @Nullable Expr expr2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(cases, "cases");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.simpleCase(this, expr, cases, expr2, metas);
        }

        @Override
        @NotNull
        public Expr.SearchedCase searchedCase(@NotNull ExprPairList cases, @Nullable Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(cases, "cases");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.searchedCase(this, cases, expr, metas);
        }

        @Override
        @NotNull
        public Expr.Struct struct(@NotNull List<ExprPair> fields, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(fields, "fields");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.struct((Builder)this, fields, metas);
        }

        @Override
        @NotNull
        public Expr.Struct struct(@NotNull ExprPair[] fields, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(fields, "fields");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.struct((Builder)this, fields, metas);
        }

        @Override
        @NotNull
        public Expr.Bag bag(@NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.bag((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.Bag bag(@NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.bag((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.List list(@NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.list((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.List list(@NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.list((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.Sexp sexp(@NotNull List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.sexp((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.Sexp sexp(@NotNull Expr[] values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.sexp((Builder)this, values2, metas);
        }

        @Override
        @NotNull
        public Expr.Date date(long year2, long month, long day, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.date(this, year2, month, day, metas);
        }

        @Override
        @NotNull
        public Expr.Date date_(@NotNull LongPrimitive year2, @NotNull LongPrimitive month, @NotNull LongPrimitive day, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(year2, "year");
            Intrinsics.checkParameterIsNotNull(month, "month");
            Intrinsics.checkParameterIsNotNull(day, "day");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.date_(this, year2, month, day, metas);
        }

        @Override
        @NotNull
        public Expr.LitTime litTime(@NotNull TimeValue value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.litTime(this, value, metas);
        }

        @Override
        @NotNull
        public Expr.Union union(@NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.union(this, setq2, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Union union(@NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.union(this, setq2, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Except except(@NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.except(this, setq2, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Except except(@NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.except(this, setq2, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Intersect intersect(@NotNull SetQuantifier setq2, @NotNull List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.intersect(this, setq2, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Intersect intersect(@NotNull SetQuantifier setq2, @NotNull Expr operands0, @NotNull Expr operands1, @NotNull Expr[] operands, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(operands0, "operands0");
            Intrinsics.checkParameterIsNotNull(operands1, "operands1");
            Intrinsics.checkParameterIsNotNull(operands, "operands");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.intersect(this, setq2, operands0, operands1, operands, metas);
        }

        @Override
        @NotNull
        public Expr.Path path(@NotNull Expr root, @NotNull List<? extends PathStep> steps, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(root, "root");
            Intrinsics.checkParameterIsNotNull(steps, "steps");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.path(this, root, steps, metas);
        }

        @Override
        @NotNull
        public Expr.Path path(@NotNull Expr root, @NotNull PathStep steps0, @NotNull PathStep[] steps, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(root, "root");
            Intrinsics.checkParameterIsNotNull(steps0, "steps0");
            Intrinsics.checkParameterIsNotNull(steps, "steps");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.path(this, root, steps0, steps, metas);
        }

        @Override
        @NotNull
        public Expr.Call call(@NotNull String funcName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.call(this, funcName, args2, metas);
        }

        @Override
        @NotNull
        public Expr.Call call(@NotNull String funcName, @NotNull Expr args0, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(args0, "args0");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.call(this, funcName, args0, args2, metas);
        }

        @Override
        @NotNull
        public Expr.Call call_(@NotNull SymbolPrimitive funcName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.call_(this, funcName, args2, metas);
        }

        @Override
        @NotNull
        public Expr.Call call_(@NotNull SymbolPrimitive funcName, @NotNull Expr args0, @NotNull Expr[] args2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(args0, "args0");
            Intrinsics.checkParameterIsNotNull(args2, "args");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.call_(this, funcName, args0, args2, metas);
        }

        @Override
        @NotNull
        public Expr.CallAgg callAgg(@NotNull SetQuantifier setq2, @NotNull String funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(arg, "arg");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.callAgg(this, setq2, funcName, arg, metas);
        }

        @Override
        @NotNull
        public Expr.CallAgg callAgg_(@NotNull SetQuantifier setq2, @NotNull SymbolPrimitive funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(setq2, "setq");
            Intrinsics.checkParameterIsNotNull(funcName, "funcName");
            Intrinsics.checkParameterIsNotNull(arg, "arg");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.callAgg_(this, setq2, funcName, arg, metas);
        }

        @Override
        @NotNull
        public Expr.Cast cast(@NotNull Expr value, @NotNull Type asType, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(asType, "asType");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.cast(this, value, asType, metas);
        }

        @Override
        @NotNull
        public Expr.Select select(@Nullable SetQuantifier setq2, @NotNull Projection project2, @NotNull FromSource from2, @Nullable Let fromLet2, @Nullable Expr where2, @Nullable GroupBy group2, @Nullable Expr having2, @Nullable OrderBy order2, @Nullable Expr limit2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(project2, "project");
            Intrinsics.checkParameterIsNotNull(from2, "from");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.select(this, setq2, project2, from2, fromLet2, where2, group2, having2, order2, limit2, metas);
        }

        @Override
        @NotNull
        public PathStep.PathExpr pathExpr(@NotNull Expr index, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(index, "index");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.pathExpr(this, index, caseSensitivity, metas);
        }

        @Override
        @NotNull
        public PathStep.PathWildcard pathWildcard(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.pathWildcard(this, metas);
        }

        @Override
        @NotNull
        public PathStep.PathUnpivot pathUnpivot(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.pathUnpivot(this, metas);
        }

        @Override
        @NotNull
        public Projection.ProjectStar projectStar(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectStar(this, metas);
        }

        @Override
        @NotNull
        public Projection.ProjectList projectList(@NotNull List<? extends ProjectItem> projectItems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectList(this, projectItems, metas);
        }

        @Override
        @NotNull
        public Projection.ProjectList projectList(@NotNull ProjectItem projectItems0, @NotNull ProjectItem[] projectItems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(projectItems0, "projectItems0");
            Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectList(this, projectItems0, projectItems, metas);
        }

        @Override
        @NotNull
        public Projection.ProjectPivot projectPivot(@NotNull Expr value, @NotNull Expr key, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(key, "key");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectPivot(this, value, key, metas);
        }

        @Override
        @NotNull
        public Projection.ProjectValue projectValue(@NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectValue(this, value, metas);
        }

        @Override
        @NotNull
        public ProjectItem.ProjectAll projectAll(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectAll(this, expr, metas);
        }

        @Override
        @NotNull
        public ProjectItem.ProjectExpr projectExpr(@NotNull Expr expr, @Nullable String asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectExpr(this, expr, asAlias, metas);
        }

        @Override
        @NotNull
        public ProjectItem.ProjectExpr projectExpr_(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.projectExpr_(this, expr, asAlias, metas);
        }

        @Override
        @NotNull
        public FromSource.Scan scan(@NotNull Expr expr, @Nullable String asAlias, @Nullable String atAlias, @Nullable String byAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.scan(this, expr, asAlias, atAlias, byAlias, metas);
        }

        @Override
        @NotNull
        public FromSource.Scan scan_(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.scan_(this, expr, asAlias, atAlias, byAlias, metas);
        }

        @Override
        @NotNull
        public FromSource.Unpivot unpivot(@NotNull Expr expr, @Nullable String asAlias, @Nullable String atAlias, @Nullable String byAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.unpivot(this, expr, asAlias, atAlias, byAlias, metas);
        }

        @Override
        @NotNull
        public FromSource.Unpivot unpivot_(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.unpivot_(this, expr, asAlias, atAlias, byAlias, metas);
        }

        @Override
        @NotNull
        public FromSource.Join join(@NotNull JoinType type, @NotNull FromSource left, @NotNull FromSource right, @Nullable Expr predicate, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(type, "type");
            Intrinsics.checkParameterIsNotNull(left, "left");
            Intrinsics.checkParameterIsNotNull(right, "right");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.join(this, type, left, right, predicate, metas);
        }

        @Override
        @NotNull
        public JoinType.Inner inner(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.inner(this, metas);
        }

        @Override
        @NotNull
        public JoinType.Left left(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.left(this, metas);
        }

        @Override
        @NotNull
        public JoinType.Right right(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.right(this, metas);
        }

        @Override
        @NotNull
        public JoinType.Full full(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.full(this, metas);
        }

        @Override
        @NotNull
        public GroupingStrategy.GroupFull groupFull(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupFull(this, metas);
        }

        @Override
        @NotNull
        public GroupingStrategy.GroupPartial groupPartial(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.groupPartial(this, metas);
        }

        @Override
        @NotNull
        public OrderingSpec.Asc asc(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.asc(this, metas);
        }

        @Override
        @NotNull
        public OrderingSpec.Desc desc(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.desc(this, metas);
        }

        @Override
        @NotNull
        public CaseSensitivity.CaseSensitive caseSensitive(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.caseSensitive(this, metas);
        }

        @Override
        @NotNull
        public CaseSensitivity.CaseInsensitive caseInsensitive(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.caseInsensitive(this, metas);
        }

        @Override
        @NotNull
        public ScopeQualifier.Unqualified unqualified(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.unqualified(this, metas);
        }

        @Override
        @NotNull
        public ScopeQualifier.LocalsFirst localsFirst(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.localsFirst(this, metas);
        }

        @Override
        @NotNull
        public SetQuantifier.All all(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.all(this, metas);
        }

        @Override
        @NotNull
        public SetQuantifier.Distinct distinct(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.distinct(this, metas);
        }

        @Override
        @NotNull
        public DmlOp.Insert insert(@NotNull Expr target, @NotNull Expr values2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(values2, "values");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.insert(this, target, values2, metas);
        }

        @Override
        @NotNull
        public DmlOp.InsertValue insertValue(@NotNull Expr target, @NotNull Expr value, @Nullable Expr index, @Nullable OnConflict onConflict, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.insertValue(this, target, value, index, onConflict, metas);
        }

        @Override
        @NotNull
        public DmlOp.Set set(@NotNull Assignment assignment, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(assignment, "assignment");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.set(this, assignment, metas);
        }

        @Override
        @NotNull
        public DmlOp.Remove remove(@NotNull Expr target, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.remove(this, target, metas);
        }

        @Override
        @NotNull
        public DmlOp.Delete delete(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.delete(this, metas);
        }

        @Override
        @NotNull
        public ConflictAction.DoNothing doNothing(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.doNothing(this, metas);
        }

        @Override
        @NotNull
        public DdlOp.CreateTable createTable(@NotNull String tableName, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(tableName, "tableName");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.createTable(this, tableName, metas);
        }

        @Override
        @NotNull
        public DdlOp.CreateTable createTable_(@NotNull SymbolPrimitive tableName, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(tableName, "tableName");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.createTable_(this, tableName, metas);
        }

        @Override
        @NotNull
        public DdlOp.DropTable dropTable(@NotNull Identifier tableName, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(tableName, "tableName");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dropTable(this, tableName, metas);
        }

        @Override
        @NotNull
        public DdlOp.CreateIndex createIndex(@NotNull Identifier indexName, @NotNull List<? extends Expr> fields, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(indexName, "indexName");
            Intrinsics.checkParameterIsNotNull(fields, "fields");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.createIndex(this, indexName, fields, metas);
        }

        @Override
        @NotNull
        public DdlOp.CreateIndex createIndex(@NotNull Identifier indexName, @NotNull Expr fields0, @NotNull Expr[] fields, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(indexName, "indexName");
            Intrinsics.checkParameterIsNotNull(fields0, "fields0");
            Intrinsics.checkParameterIsNotNull(fields, "fields");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.createIndex(this, indexName, fields0, fields, metas);
        }

        @Override
        @NotNull
        public DdlOp.DropIndex dropIndex(@NotNull Identifier table2, @NotNull Identifier keys2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(table2, "table");
            Intrinsics.checkParameterIsNotNull(keys2, "keys");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dropIndex(this, table2, keys2, metas);
        }

        @Override
        @NotNull
        public ColumnComponent.ReturningWildcard returningWildcard(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.returningWildcard(this, metas);
        }

        @Override
        @NotNull
        public ColumnComponent.ReturningColumn returningColumn(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.returningColumn(this, expr, metas);
        }

        @Override
        @NotNull
        public ReturningMapping.ModifiedNew modifiedNew(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.modifiedNew(this, metas);
        }

        @Override
        @NotNull
        public ReturningMapping.ModifiedOld modifiedOld(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.modifiedOld(this, metas);
        }

        @Override
        @NotNull
        public ReturningMapping.AllNew allNew(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.allNew(this, metas);
        }

        @Override
        @NotNull
        public ReturningMapping.AllOld allOld(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.allOld(this, metas);
        }

        @Override
        @NotNull
        public Type.NullType nullType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.nullType(this, metas);
        }

        @Override
        @NotNull
        public Type.BooleanType booleanType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.booleanType(this, metas);
        }

        @Override
        @NotNull
        public Type.SmallintType smallintType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.smallintType(this, metas);
        }

        @Override
        @NotNull
        public Type.IntegerType integerType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.integerType(this, metas);
        }

        @Override
        @NotNull
        public Type.FloatType floatType(@Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.floatType(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.FloatType floatType_(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.floatType_(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.RealType realType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.realType(this, metas);
        }

        @Override
        @NotNull
        public Type.DoublePrecisionType doublePrecisionType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.doublePrecisionType(this, metas);
        }

        @Override
        @NotNull
        public Type.DecimalType decimalType(@Nullable Long precision, @Nullable Long scale, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.decimalType(this, precision, scale, metas);
        }

        @Override
        @NotNull
        public Type.DecimalType decimalType_(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.decimalType_(this, precision, scale, metas);
        }

        @Override
        @NotNull
        public Type.NumericType numericType(@Nullable Long precision, @Nullable Long scale, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.numericType(this, precision, scale, metas);
        }

        @Override
        @NotNull
        public Type.NumericType numericType_(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.numericType_(this, precision, scale, metas);
        }

        @Override
        @NotNull
        public Type.TimestampType timestampType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timestampType(this, metas);
        }

        @Override
        @NotNull
        public Type.CharacterType characterType(@Nullable Long length, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.characterType(this, length, metas);
        }

        @Override
        @NotNull
        public Type.CharacterType characterType_(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.characterType_(this, length, metas);
        }

        @Override
        @NotNull
        public Type.CharacterVaryingType characterVaryingType(@Nullable Long length, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.characterVaryingType(this, length, metas);
        }

        @Override
        @NotNull
        public Type.CharacterVaryingType characterVaryingType_(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.characterVaryingType_(this, length, metas);
        }

        @Override
        @NotNull
        public Type.MissingType missingType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.missingType(this, metas);
        }

        @Override
        @NotNull
        public Type.StringType stringType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.stringType(this, metas);
        }

        @Override
        @NotNull
        public Type.SymbolType symbolType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.symbolType(this, metas);
        }

        @Override
        @NotNull
        public Type.BlobType blobType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.blobType(this, metas);
        }

        @Override
        @NotNull
        public Type.ClobType clobType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.clobType(this, metas);
        }

        @Override
        @NotNull
        public Type.DateType dateType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.dateType(this, metas);
        }

        @Override
        @NotNull
        public Type.TimeType timeType(@Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeType(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.TimeType timeType_(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeType_(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.TimeWithTimeZoneType timeWithTimeZoneType(@Nullable Long precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeWithTimeZoneType(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.TimeWithTimeZoneType timeWithTimeZoneType_(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.timeWithTimeZoneType_(this, precision, metas);
        }

        @Override
        @NotNull
        public Type.StructType structType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.structType(this, metas);
        }

        @Override
        @NotNull
        public Type.TupleType tupleType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.tupleType(this, metas);
        }

        @Override
        @NotNull
        public Type.ListType listType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.listType(this, metas);
        }

        @Override
        @NotNull
        public Type.SexpType sexpType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.sexpType(this, metas);
        }

        @Override
        @NotNull
        public Type.BagType bagType(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return Builder.DefaultImpls.bagType(this, metas);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\b&\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J \u0010\u0003\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH&J\b\u0010\t\u001a\u00020\nH&J\b\u0010\u000b\u001a\u00020\u0006H\u0016J\u0018\u0010\f\u001a\u00020\u00002\u0006\u0010\r\u001a\u00020\u00062\u0006\u0010\u000e\u001a\u00020\u0007H&\u00a8\u0006\u000f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "Lorg/partiql/pig/runtime/DomainNode;", "()V", "copy", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "toString", "withMeta", "metaKey", "metaValue", "lang"})
    public static abstract class PartiqlAstNode
    implements DomainNode {
        @NotNull
        public abstract PartiqlAstNode copy(@NotNull Map<String, ? extends Object> var1);

        @NotNull
        public String toString() {
            return this.toIonElement().toString();
        }

        @NotNull
        public abstract PartiqlAstNode withMeta(@NotNull String var1, @NotNull Object var2);

        @NotNull
        public abstract SexpElement toIonElement();
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BQ\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\u0006\u0010\u0006\u001a\u00020\u0003\u0012\u0006\u0010\u0007\u001a\u00020\u0003\u0012\b\u0010\b\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\t\u001a\u0012\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\f0\nj\u0002`\r\u00a2\u0006\u0002\u0010\u000eJ \u0010\u001e\u001a\u00020\u00002\u0016\u0010\t\u001a\u0012\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\f0\nj\u0002`\rH\u0016J^\u0010\u001e\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00032\b\b\u0002\u0010\u0006\u001a\u00020\u00032\b\b\u0002\u0010\u0007\u001a\u00020\u00032\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\t\u001a\u0012\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\f0\nj\u0002`\rJ\u0013\u0010\u001f\u001a\u00020 2\b\u0010!\u001a\u0004\u0018\u00010\fH\u0096\u0002J\b\u0010\"\u001a\u00020\u0015H\u0016J\b\u0010#\u001a\u00020$H\u0016J\u0018\u0010%\u001a\u00020\u00002\u0006\u0010&\u001a\u00020\u000b2\u0006\u0010'\u001a\u00020\fH\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R$\u0010\t\u001a\u0012\u0012\u0004\u0012\u00020\u000b\u0012\u0004\u0012\u00020\f0\nj\u0002`\rX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0010R\u001b\u0010\u0014\u001a\u00020\u00158BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0018\u0010\u0019\u001a\u0004\b\u0016\u0010\u0017R\u0011\u0010\u0006\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u0010R\u0011\u0010\u0007\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001b\u0010\u0010R\u0011\u0010\u0005\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001c\u0010\u0010R\u0013\u0010\b\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001d\u0010\u0010\u00a8\u0006("}, d2={"Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "hour", "Lorg/partiql/pig/runtime/LongPrimitive;", "minute", "second", "nano", "precision", "tzMinutes", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getHour", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getMetas", "()Ljava/util/Map;", "getMinute", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getNano", "getPrecision", "getSecond", "getTzMinutes", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class TimeValue
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final LongPrimitive hour;
        @NotNull
        private final LongPrimitive minute;
        @NotNull
        private final LongPrimitive second;
        @NotNull
        private final LongPrimitive nano;
        @NotNull
        private final LongPrimitive precision;
        @Nullable
        private final LongPrimitive tzMinutes;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(TimeValue.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public TimeValue copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new TimeValue(this.hour, this.minute, this.second, this.nano, this.precision, this.tzMinutes, metas);
        }

        @Override
        @NotNull
        public TimeValue withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new TimeValue(this.hour, this.minute, this.second, this.nano, this.precision, this.tzMinutes, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            Map<String, Object> map2 = this.getMetas();
            IonElement[] ionElementArray = new IonElement[7];
            ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"time_value", null, null, (int)6, null);
            ionElementArray[1] = this.hour.toIonElement();
            ionElementArray[2] = this.minute.toIonElement();
            ionElementArray[3] = this.second.toIonElement();
            ionElementArray[4] = this.nano.toIonElement();
            ionElementArray[5] = this.precision.toIonElement();
            LongPrimitive longPrimitive = this.tzMinutes;
            if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                longPrimitive = Ion.ionNull$default(null, (int)1, null);
            }
            ionElementArray[6] = longPrimitive;
            IonElement[] ionElementArray2 = ionElementArray;
            List list = null;
            Map<String, Object> map3 = map2;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
            return elements;
        }

        @NotNull
        public final TimeValue copy(@NotNull LongPrimitive hour, @NotNull LongPrimitive minute, @NotNull LongPrimitive second, @NotNull LongPrimitive nano, @NotNull LongPrimitive precision, @Nullable LongPrimitive tzMinutes, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(hour, "hour");
            Intrinsics.checkParameterIsNotNull(minute, "minute");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(nano, "nano");
            Intrinsics.checkParameterIsNotNull(precision, "precision");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new TimeValue(hour, minute, second, nano, precision, tzMinutes, metas);
        }

        public static /* synthetic */ TimeValue copy$default(TimeValue timeValue, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, LongPrimitive longPrimitive4, LongPrimitive longPrimitive5, LongPrimitive longPrimitive6, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                longPrimitive = timeValue.hour;
            }
            if ((n & 2) != 0) {
                longPrimitive2 = timeValue.minute;
            }
            if ((n & 4) != 0) {
                longPrimitive3 = timeValue.second;
            }
            if ((n & 8) != 0) {
                longPrimitive4 = timeValue.nano;
            }
            if ((n & 0x10) != 0) {
                longPrimitive5 = timeValue.precision;
            }
            if ((n & 0x20) != 0) {
                longPrimitive6 = timeValue.tzMinutes;
            }
            if ((n & 0x40) != 0) {
                map2 = timeValue.getMetas();
            }
            return timeValue.copy(longPrimitive, longPrimitive2, longPrimitive3, longPrimitive4, longPrimitive5, longPrimitive6, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), TimeValue.class) ^ true) {
                return false;
            }
            TimeValue cfr_ignored_0 = (TimeValue)other;
            if (Intrinsics.areEqual(this.hour, ((TimeValue)other).hour) ^ true) {
                return false;
            }
            if (Intrinsics.areEqual(this.minute, ((TimeValue)other).minute) ^ true) {
                return false;
            }
            if (Intrinsics.areEqual(this.second, ((TimeValue)other).second) ^ true) {
                return false;
            }
            if (Intrinsics.areEqual(this.nano, ((TimeValue)other).nano) ^ true) {
                return false;
            }
            if (Intrinsics.areEqual(this.precision, ((TimeValue)other).precision) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.tzMinutes, ((TimeValue)other).tzMinutes) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            TimeValue timeValue = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final LongPrimitive getHour() {
            return this.hour;
        }

        @NotNull
        public final LongPrimitive getMinute() {
            return this.minute;
        }

        @NotNull
        public final LongPrimitive getSecond() {
            return this.second;
        }

        @NotNull
        public final LongPrimitive getNano() {
            return this.nano;
        }

        @NotNull
        public final LongPrimitive getPrecision() {
            return this.precision;
        }

        @Nullable
        public final LongPrimitive getTzMinutes() {
            return this.tzMinutes;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public TimeValue(@NotNull LongPrimitive hour, @NotNull LongPrimitive minute, @NotNull LongPrimitive second, @NotNull LongPrimitive nano, @NotNull LongPrimitive precision, @Nullable LongPrimitive tzMinutes, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(hour, "hour");
            Intrinsics.checkParameterIsNotNull(minute, "minute");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(nano, "nano");
            Intrinsics.checkParameterIsNotNull(precision, "precision");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.nano = nano;
            this.precision = precision;
            this.tzMinutes = tzMinutes;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ TimeValue this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getHour().hashCode();
                    hc = 31 * hc + this.this$0.getMinute().hashCode();
                    hc = 31 * hc + this.this$0.getSecond().hashCode();
                    hc = 31 * hc + this.this$0.getNano().hashCode();
                    hc = 31 * hc + this.this$0.getPrecision().hashCode();
                    LongPrimitive longPrimitive = this.this$0.getTzMinutes();
                    int n = 31 * hc;
                    boolean bl = false;
                    LongPrimitive longPrimitive2 = longPrimitive;
                    int n2 = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                    hc = n + n2;
                    return (int)var1_1;
                }
                {
                    this.this$0 = timeValue;
                    super(0);
                }
            });
        }

        public /* synthetic */ TimeValue(LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, LongPrimitive longPrimitive4, LongPrimitive longPrimitive5, LongPrimitive longPrimitive6, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 0x40) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(longPrimitive, longPrimitive2, longPrimitive3, longPrimitive4, longPrimitive5, longPrimitive6, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u0010H\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Let;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "letBindings", "", "Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getLetBindings", "()Ljava/util/List;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class Let
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<LetBinding> letBindings;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Let.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public Let copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Let(this.letBindings, metas);
        }

        @Override
        @NotNull
        public Let withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new Let(this.letBindings, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"let", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.letBindings;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                LetBinding letBinding = (LetBinding)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final Let copy(@NotNull List<LetBinding> letBindings, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Let(letBindings, metas);
        }

        public static /* synthetic */ Let copy$default(Let let2, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = let2.letBindings;
            }
            if ((n & 2) != 0) {
                map2 = let2.getMetas();
            }
            return let2.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), Let.class) ^ true) {
                return false;
            }
            Let cfr_ignored_0 = (Let)other;
            return !(Intrinsics.areEqual(this.letBindings, ((Let)other).letBindings) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            Let let2 = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<LetBinding> getLetBindings() {
            return this.letBindings;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public Let(@NotNull List<LetBinding> letBindings, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(letBindings, "letBindings");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.letBindings = letBindings;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ Let this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getLetBindings()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = let2;
                    super(0);
                }
            });
        }

        public /* synthetic */ Let(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J4\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0011H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u001b\u0010\u0010\u001a\u00020\u00118BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0014\u0010\u0015\u001a\u0004\b\u0012\u0010\u0013R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "name", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class LetBinding
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr expr;
        @NotNull
        private final SymbolPrimitive name;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(LetBinding.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public LetBinding copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new LetBinding(this.expr, this.name, metas);
        }

        @Override
        @NotNull
        public LetBinding withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new LetBinding(this.expr, this.name, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"let_binding", null, null, (int)6, null), (IonElement)this.expr.toIonElement(), this.name.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final LetBinding copy(@NotNull Expr expr, @NotNull SymbolPrimitive name, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new LetBinding(expr, name, metas);
        }

        public static /* synthetic */ LetBinding copy$default(LetBinding letBinding, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = letBinding.expr;
            }
            if ((n & 2) != 0) {
                symbolPrimitive = letBinding.name;
            }
            if ((n & 4) != 0) {
                map2 = letBinding.getMetas();
            }
            return letBinding.copy(expr, symbolPrimitive, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), LetBinding.class) ^ true) {
                return false;
            }
            LetBinding cfr_ignored_0 = (LetBinding)other;
            if (Intrinsics.areEqual(this.expr, ((LetBinding)other).expr) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.name, ((LetBinding)other).name) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            LetBinding letBinding = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getExpr() {
            return this.expr;
        }

        @NotNull
        public final SymbolPrimitive getName() {
            return this.name;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public LetBinding(@NotNull Expr expr, @NotNull SymbolPrimitive name, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.expr = expr;
            this.name = name;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ LetBinding this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getExpr().hashCode();
                    hc = 31 * hc + this.this$0.getName().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = letBinding;
                    super(0);
                }
            });
        }

        public /* synthetic */ LetBinding(Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, symbolPrimitive, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0016\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u0010H\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\f\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "first", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "second", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getFirst", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getSecond", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class ExprPair
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr first;
        @NotNull
        private final Expr second;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ExprPair.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public ExprPair copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ExprPair(this.first, this.second, metas);
        }

        @Override
        @NotNull
        public ExprPair withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new ExprPair(this.first, this.second, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"expr_pair", null, null, (int)6, null), (IonElement)this.first.toIonElement(), (IonElement)this.second.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final ExprPair copy(@NotNull Expr first, @NotNull Expr second, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(first, "first");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ExprPair(first, second, metas);
        }

        public static /* synthetic */ ExprPair copy$default(ExprPair exprPair, Expr expr, Expr expr2, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = exprPair.first;
            }
            if ((n & 2) != 0) {
                expr2 = exprPair.second;
            }
            if ((n & 4) != 0) {
                map2 = exprPair.getMetas();
            }
            return exprPair.copy(expr, expr2, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), ExprPair.class) ^ true) {
                return false;
            }
            ExprPair cfr_ignored_0 = (ExprPair)other;
            if (Intrinsics.areEqual(this.first, ((ExprPair)other).first) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.second, ((ExprPair)other).second) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            ExprPair exprPair = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getFirst() {
            return this.first;
        }

        @NotNull
        public final Expr getSecond() {
            return this.second;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public ExprPair(@NotNull Expr first, @NotNull Expr second, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(first, "first");
            Intrinsics.checkParameterIsNotNull(second, "second");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.first = first;
            this.second = second;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ ExprPair this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getFirst().hashCode();
                    hc = 31 * hc + this.this$0.getSecond().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = exprPair;
                    super(0);
                }
            });
        }

        public /* synthetic */ ExprPair(Expr expr, Expr expr2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, expr2, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u000eH\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "pairs", "", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPairs", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class ExprPairList
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<ExprPair> pairs;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ExprPairList.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public ExprPairList copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ExprPairList(this.pairs, metas);
        }

        @Override
        @NotNull
        public ExprPairList withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new ExprPairList(this.pairs, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"expr_pair_list", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.pairs;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final ExprPairList copy(@NotNull List<ExprPair> pairs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(pairs, "pairs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ExprPairList(pairs, metas);
        }

        public static /* synthetic */ ExprPairList copy$default(ExprPairList exprPairList, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = exprPairList.pairs;
            }
            if ((n & 2) != 0) {
                map2 = exprPairList.getMetas();
            }
            return exprPairList.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), ExprPairList.class) ^ true) {
                return false;
            }
            ExprPairList cfr_ignored_0 = (ExprPairList)other;
            return !(Intrinsics.areEqual(this.pairs, ((ExprPairList)other).pairs) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            ExprPairList exprPairList = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<ExprPair> getPairs() {
            return this.pairs;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public ExprPairList(@NotNull List<ExprPair> pairs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(pairs, "pairs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.pairs = pairs;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ ExprPairList this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getPairs()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = exprPairList;
                    super(0);
                }
            });
        }

        public /* synthetic */ ExprPairList(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000H\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B9\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001c\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016J@\u0010\u001c\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010 \u001a\u00020\u0015H\u0016J\b\u0010!\u001a\u00020\"H\u0016J\u0018\u0010#\u001a\u00020\u00002\u0006\u0010$\u001a\u00020\n2\u0006\u0010%\u001a\u00020\u000bH\u0016R\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013R\u001b\u0010\u0014\u001a\u00020\u00158BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0018\u0010\u0019\u001a\u0004\b\u0016\u0010\u0017R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u001b\u00a8\u0006&"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "strategy", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "keyList", "Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "groupAsAlias", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getGroupAsAlias", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getKeyList", "()Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getStrategy", "()Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class GroupBy
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final GroupingStrategy strategy;
        @NotNull
        private final GroupKeyList keyList;
        @Nullable
        private final SymbolPrimitive groupAsAlias;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(GroupBy.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public GroupBy copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupBy(this.strategy, this.keyList, this.groupAsAlias, metas);
        }

        @Override
        @NotNull
        public GroupBy withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new GroupBy(this.strategy, this.keyList, this.groupAsAlias, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            Map<String, Object> map2 = this.getMetas();
            IonElement[] ionElementArray = new IonElement[4];
            ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"group_by", null, null, (int)6, null);
            ionElementArray[1] = (IonElement)this.strategy.toIonElement();
            ionElementArray[2] = (IonElement)this.keyList.toIonElement();
            SymbolPrimitive symbolPrimitive = this.groupAsAlias;
            if (symbolPrimitive == null || (symbolPrimitive = symbolPrimitive.toIonElement()) == null) {
                symbolPrimitive = Ion.ionNull$default(null, (int)1, null);
            }
            ionElementArray[3] = symbolPrimitive;
            IonElement[] ionElementArray2 = ionElementArray;
            List list = null;
            Map<String, Object> map3 = map2;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
            return elements;
        }

        @NotNull
        public final GroupBy copy(@NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable SymbolPrimitive groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(strategy, "strategy");
            Intrinsics.checkParameterIsNotNull(keyList, "keyList");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupBy(strategy, keyList, groupAsAlias, metas);
        }

        public static /* synthetic */ GroupBy copy$default(GroupBy groupBy2, GroupingStrategy groupingStrategy, GroupKeyList groupKeyList, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                groupingStrategy = groupBy2.strategy;
            }
            if ((n & 2) != 0) {
                groupKeyList = groupBy2.keyList;
            }
            if ((n & 4) != 0) {
                symbolPrimitive = groupBy2.groupAsAlias;
            }
            if ((n & 8) != 0) {
                map2 = groupBy2.getMetas();
            }
            return groupBy2.copy(groupingStrategy, groupKeyList, symbolPrimitive, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), GroupBy.class) ^ true) {
                return false;
            }
            GroupBy cfr_ignored_0 = (GroupBy)other;
            if (Intrinsics.areEqual(this.strategy, ((GroupBy)other).strategy) ^ true) {
                return false;
            }
            if (Intrinsics.areEqual(this.keyList, ((GroupBy)other).keyList) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.groupAsAlias, ((GroupBy)other).groupAsAlias) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            GroupBy groupBy2 = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final GroupingStrategy getStrategy() {
            return this.strategy;
        }

        @NotNull
        public final GroupKeyList getKeyList() {
            return this.keyList;
        }

        @Nullable
        public final SymbolPrimitive getGroupAsAlias() {
            return this.groupAsAlias;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public GroupBy(@NotNull GroupingStrategy strategy, @NotNull GroupKeyList keyList, @Nullable SymbolPrimitive groupAsAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(strategy, "strategy");
            Intrinsics.checkParameterIsNotNull(keyList, "keyList");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.strategy = strategy;
            this.keyList = keyList;
            this.groupAsAlias = groupAsAlias;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ GroupBy this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getStrategy().hashCode();
                    hc = 31 * hc + this.this$0.getKeyList().hashCode();
                    SymbolPrimitive symbolPrimitive = this.this$0.getGroupAsAlias();
                    int n = 31 * hc;
                    boolean bl = false;
                    SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                    int n2 = symbolPrimitive2 != null ? symbolPrimitive2.hashCode() : 0;
                    hc = n + n2;
                    return (int)var1_1;
                }
                {
                    this.this$0 = groupBy2;
                    super(0);
                }
            });
        }

        public /* synthetic */ GroupBy(GroupingStrategy groupingStrategy, GroupKeyList groupKeyList, SymbolPrimitive symbolPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 8) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(groupingStrategy, groupKeyList, symbolPrimitive, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u0010H\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "keys", "", "Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getKeys", "()Ljava/util/List;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class GroupKeyList
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<GroupKey> keys;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(GroupKeyList.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public GroupKeyList copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupKeyList(this.keys, metas);
        }

        @Override
        @NotNull
        public GroupKeyList withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new GroupKeyList(this.keys, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"group_key_list", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.keys;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                GroupKey groupKey = (GroupKey)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final GroupKeyList copy(@NotNull List<GroupKey> keys2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(keys2, "keys");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupKeyList(keys2, metas);
        }

        public static /* synthetic */ GroupKeyList copy$default(GroupKeyList groupKeyList, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = groupKeyList.keys;
            }
            if ((n & 2) != 0) {
                map2 = groupKeyList.getMetas();
            }
            return groupKeyList.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), GroupKeyList.class) ^ true) {
                return false;
            }
            GroupKeyList cfr_ignored_0 = (GroupKeyList)other;
            return !(Intrinsics.areEqual(this.keys, ((GroupKeyList)other).keys) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            GroupKeyList groupKeyList = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<GroupKey> getKeys() {
            return this.keys;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public GroupKeyList(@NotNull List<GroupKey> keys2, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(keys2, "keys");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.keys = keys2;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ GroupKeyList this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getKeys()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = groupKeyList;
                    super(0);
                }
            });
        }

        public /* synthetic */ GroupKeyList(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B1\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J6\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "asAlias", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getAsAlias", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class GroupKey
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr expr;
        @Nullable
        private final SymbolPrimitive asAlias;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(GroupKey.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public GroupKey copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupKey(this.expr, this.asAlias, metas);
        }

        @Override
        @NotNull
        public GroupKey withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new GroupKey(this.expr, this.asAlias, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            Map<String, Object> map2 = this.getMetas();
            IonElement[] ionElementArray = new IonElement[3];
            ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"group_key", null, null, (int)6, null);
            ionElementArray[1] = (IonElement)this.expr.toIonElement();
            SymbolPrimitive symbolPrimitive = this.asAlias;
            if (symbolPrimitive == null || (symbolPrimitive = symbolPrimitive.toIonElement()) == null) {
                symbolPrimitive = Ion.ionNull$default(null, (int)1, null);
            }
            ionElementArray[2] = symbolPrimitive;
            IonElement[] ionElementArray2 = ionElementArray;
            List list = null;
            Map<String, Object> map3 = map2;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
            return elements;
        }

        @NotNull
        public final GroupKey copy(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new GroupKey(expr, asAlias, metas);
        }

        public static /* synthetic */ GroupKey copy$default(GroupKey groupKey, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = groupKey.expr;
            }
            if ((n & 2) != 0) {
                symbolPrimitive = groupKey.asAlias;
            }
            if ((n & 4) != 0) {
                map2 = groupKey.getMetas();
            }
            return groupKey.copy(expr, symbolPrimitive, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), GroupKey.class) ^ true) {
                return false;
            }
            GroupKey cfr_ignored_0 = (GroupKey)other;
            if (Intrinsics.areEqual(this.expr, ((GroupKey)other).expr) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.asAlias, ((GroupKey)other).asAlias) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            GroupKey groupKey = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getExpr() {
            return this.expr;
        }

        @Nullable
        public final SymbolPrimitive getAsAlias() {
            return this.asAlias;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public GroupKey(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.expr = expr;
            this.asAlias = asAlias;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ GroupKey this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getExpr().hashCode();
                    SymbolPrimitive symbolPrimitive = this.this$0.getAsAlias();
                    int n = 31 * hc;
                    boolean bl = false;
                    SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                    int n2 = symbolPrimitive2 != null ? symbolPrimitive2.hashCode() : 0;
                    hc = n + n2;
                    return (int)var1_1;
                }
                {
                    this.this$0 = groupKey;
                    super(0);
                }
            });
        }

        public /* synthetic */ GroupKey(Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, symbolPrimitive, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u000eH\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "sortSpecs", "", "Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getSortSpecs", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class OrderBy
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<SortSpec> sortSpecs;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(OrderBy.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public OrderBy copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new OrderBy(this.sortSpecs, metas);
        }

        @Override
        @NotNull
        public OrderBy withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new OrderBy(this.sortSpecs, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"order_by", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.sortSpecs;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                SortSpec sortSpec = (SortSpec)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final OrderBy copy(@NotNull List<SortSpec> sortSpecs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new OrderBy(sortSpecs, metas);
        }

        public static /* synthetic */ OrderBy copy$default(OrderBy orderBy, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = orderBy.sortSpecs;
            }
            if ((n & 2) != 0) {
                map2 = orderBy.getMetas();
            }
            return orderBy.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), OrderBy.class) ^ true) {
                return false;
            }
            OrderBy cfr_ignored_0 = (OrderBy)other;
            return !(Intrinsics.areEqual(this.sortSpecs, ((OrderBy)other).sortSpecs) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            OrderBy orderBy = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<SortSpec> getSortSpecs() {
            return this.sortSpecs;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public OrderBy(@NotNull List<SortSpec> sortSpecs, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(sortSpecs, "sortSpecs");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.sortSpecs = sortSpecs;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ OrderBy this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getSortSpecs()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = orderBy;
                    super(0);
                }
            });
        }

        public /* synthetic */ OrderBy(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B1\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J6\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0011H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u001b\u0010\u0010\u001a\u00020\u00118BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0014\u0010\u0015\u001a\u0004\b\u0012\u0010\u0013R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "orderingSpec", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOrderingSpec", "()Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class SortSpec
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr expr;
        @Nullable
        private final OrderingSpec orderingSpec;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(SortSpec.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public SortSpec copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new SortSpec(this.expr, this.orderingSpec, metas);
        }

        @Override
        @NotNull
        public SortSpec withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new SortSpec(this.expr, this.orderingSpec, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            OrderingSpec orderingSpec;
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"sort_spec", null, null, (int)6, null), (IonElement)this.expr.toIonElement(), (orderingSpec = this.orderingSpec) != null && (orderingSpec = orderingSpec.toIonElement()) != null ? (IonElement)orderingSpec : Ion.ionNull$default(null, (int)1, null)};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final SortSpec copy(@NotNull Expr expr, @Nullable OrderingSpec orderingSpec, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new SortSpec(expr, orderingSpec, metas);
        }

        public static /* synthetic */ SortSpec copy$default(SortSpec sortSpec, Expr expr, OrderingSpec orderingSpec, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = sortSpec.expr;
            }
            if ((n & 2) != 0) {
                orderingSpec = sortSpec.orderingSpec;
            }
            if ((n & 4) != 0) {
                map2 = sortSpec.getMetas();
            }
            return sortSpec.copy(expr, orderingSpec, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), SortSpec.class) ^ true) {
                return false;
            }
            SortSpec cfr_ignored_0 = (SortSpec)other;
            if (Intrinsics.areEqual(this.expr, ((SortSpec)other).expr) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.orderingSpec, ((SortSpec)other).orderingSpec) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            SortSpec sortSpec = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getExpr() {
            return this.expr;
        }

        @Nullable
        public final OrderingSpec getOrderingSpec() {
            return this.orderingSpec;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public SortSpec(@NotNull Expr expr, @Nullable OrderingSpec orderingSpec, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.expr = expr;
            this.orderingSpec = orderingSpec;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ SortSpec this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getExpr().hashCode();
                    OrderingSpec orderingSpec = this.this$0.getOrderingSpec();
                    int n = 31 * hc;
                    boolean bl = false;
                    OrderingSpec orderingSpec2 = orderingSpec;
                    int n2 = orderingSpec2 != null ? orderingSpec2.hashCode() : 0;
                    hc = n + n2;
                    return (int)var1_1;
                }
                {
                    this.this$0 = sortSpec;
                    super(0);
                }
            });
        }

        public /* synthetic */ SortSpec(Expr expr, OrderingSpec orderingSpec, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, orderingSpec, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u000eH\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "ops", "", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOps", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class DmlOpList
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<DmlOp> ops;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DmlOpList.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public DmlOpList copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new DmlOpList(this.ops, metas);
        }

        @Override
        @NotNull
        public DmlOpList withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new DmlOpList(this.ops, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"dml_op_list", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.ops;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                DmlOp dmlOp = (DmlOp)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final DmlOpList copy(@NotNull List<? extends DmlOp> ops, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(ops, "ops");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new DmlOpList(ops, metas);
        }

        public static /* synthetic */ DmlOpList copy$default(DmlOpList dmlOpList, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = dmlOpList.ops;
            }
            if ((n & 2) != 0) {
                map2 = dmlOpList.getMetas();
            }
            return dmlOpList.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), DmlOpList.class) ^ true) {
                return false;
            }
            DmlOpList cfr_ignored_0 = (DmlOpList)other;
            return !(Intrinsics.areEqual(this.ops, ((DmlOpList)other).ops) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            DmlOpList dmlOpList = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<DmlOp> getOps() {
            return this.ops;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public DmlOpList(@NotNull List<? extends DmlOp> ops, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(ops, "ops");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.ops = ops;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ DmlOpList this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getOps()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = dmlOpList;
                    super(0);
                }
            });
        }

        public /* synthetic */ DmlOpList(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J4\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "conflictAction", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;Ljava/util/Map;)V", "getConflictAction", "()Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class OnConflict
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr expr;
        @NotNull
        private final ConflictAction conflictAction;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(OnConflict.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public OnConflict copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new OnConflict(this.expr, this.conflictAction, metas);
        }

        @Override
        @NotNull
        public OnConflict withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new OnConflict(this.expr, this.conflictAction, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"on_conflict", null, null, (int)6, null), (IonElement)this.expr.toIonElement(), (IonElement)this.conflictAction.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final OnConflict copy(@NotNull Expr expr, @NotNull ConflictAction conflictAction, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(conflictAction, "conflictAction");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new OnConflict(expr, conflictAction, metas);
        }

        public static /* synthetic */ OnConflict copy$default(OnConflict onConflict, Expr expr, ConflictAction conflictAction, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = onConflict.expr;
            }
            if ((n & 2) != 0) {
                conflictAction = onConflict.conflictAction;
            }
            if ((n & 4) != 0) {
                map2 = onConflict.getMetas();
            }
            return onConflict.copy(expr, conflictAction, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), OnConflict.class) ^ true) {
                return false;
            }
            OnConflict cfr_ignored_0 = (OnConflict)other;
            if (Intrinsics.areEqual(this.expr, ((OnConflict)other).expr) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.conflictAction, ((OnConflict)other).conflictAction) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            OnConflict onConflict = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getExpr() {
            return this.expr;
        }

        @NotNull
        public final ConflictAction getConflictAction() {
            return this.conflictAction;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public OnConflict(@NotNull Expr expr, @NotNull ConflictAction conflictAction, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(expr, "expr");
            Intrinsics.checkParameterIsNotNull(conflictAction, "conflictAction");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.expr = expr;
            this.conflictAction = conflictAction;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ OnConflict this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getExpr().hashCode();
                    hc = 31 * hc + this.this$0.getConflictAction().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = onConflict;
                    super(0);
                }
            });
        }

        public /* synthetic */ OnConflict(Expr expr, ConflictAction conflictAction, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, conflictAction, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u0010H\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "elems", "", "Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getElems", "()Ljava/util/List;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class ReturningExpr
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final List<ReturningElem> elems;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ReturningExpr.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public ReturningExpr copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ReturningExpr(this.elems, metas);
        }

        @Override
        @NotNull
        public ReturningExpr withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new ReturningExpr(this.elems, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        /*
         * WARNING - void declaration
         */
        @Override
        @NotNull
        public SexpElement toIonElement() {
            void $this$toTypedArray$iv;
            Collection<SexpElement> collection;
            void $this$mapTo$iv$iv;
            Collection $this$map$iv;
            Map<String, Object> map2 = this.getMetas();
            SpreadBuilder spreadBuilder = new SpreadBuilder(2);
            spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"returning_expr", null, null, (int)6, null));
            IonElement[] ionElementArray = (IonElement[])this.elems;
            SpreadBuilder spreadBuilder2 = spreadBuilder;
            SpreadBuilder spreadBuilder3 = spreadBuilder;
            List list = null;
            Map<String, Object> map3 = map2;
            boolean $i$f$map = false;
            Map<String, Object> map4 = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ReturningElem returningElem = (ReturningElem)item$iv$iv;
                collection = destination$iv$iv;
                boolean bl = false;
                SexpElement sexpElement = it.toIonElement();
                collection.add(sexpElement);
            }
            collection = (List)destination$iv$iv;
            $this$map$iv = collection;
            boolean $i$f$toTypedArray = false;
            void thisCollection$iv = $this$toTypedArray$iv;
            SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
            if (sexpElementArray == null) {
                throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
            }
            collection = sexpElementArray;
            SpreadBuilder spreadBuilder4 = spreadBuilder3;
            spreadBuilder2.addSpread(collection);
            ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
            List list2 = list;
            map4 = map3;
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
            return elements;
        }

        @NotNull
        public final ReturningExpr copy(@NotNull List<ReturningElem> elems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(elems, "elems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ReturningExpr(elems, metas);
        }

        public static /* synthetic */ ReturningExpr copy$default(ReturningExpr returningExpr, List list, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                list = returningExpr.elems;
            }
            if ((n & 2) != 0) {
                map2 = returningExpr.getMetas();
            }
            return returningExpr.copy(list, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), ReturningExpr.class) ^ true) {
                return false;
            }
            ReturningExpr cfr_ignored_0 = (ReturningExpr)other;
            return !(Intrinsics.areEqual(this.elems, ((ReturningExpr)other).elems) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            ReturningExpr returningExpr = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final List<ReturningElem> getElems() {
            return this.elems;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public ReturningExpr(@NotNull List<ReturningElem> elems, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(elems, "elems");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.elems = elems;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ ReturningExpr this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = ((Object)this.this$0.getElems()).hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = returningExpr;
                    super(0);
                }
            });
        }

        public /* synthetic */ ReturningExpr(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 2) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(list, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J4\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "mapping", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "column", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;Ljava/util/Map;)V", "getColumn", "()Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "getMapping", "()Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class ReturningElem
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final ReturningMapping mapping;
        @NotNull
        private final ColumnComponent column;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ReturningElem.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public ReturningElem copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ReturningElem(this.mapping, this.column, metas);
        }

        @Override
        @NotNull
        public ReturningElem withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new ReturningElem(this.mapping, this.column, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"returning_elem", null, null, (int)6, null), (IonElement)this.mapping.toIonElement(), (IonElement)this.column.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final ReturningElem copy(@NotNull ReturningMapping mapping, @NotNull ColumnComponent column, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(mapping, "mapping");
            Intrinsics.checkParameterIsNotNull(column, "column");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new ReturningElem(mapping, column, metas);
        }

        public static /* synthetic */ ReturningElem copy$default(ReturningElem returningElem, ReturningMapping returningMapping, ColumnComponent columnComponent, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                returningMapping = returningElem.mapping;
            }
            if ((n & 2) != 0) {
                columnComponent = returningElem.column;
            }
            if ((n & 4) != 0) {
                map2 = returningElem.getMetas();
            }
            return returningElem.copy(returningMapping, columnComponent, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), ReturningElem.class) ^ true) {
                return false;
            }
            ReturningElem cfr_ignored_0 = (ReturningElem)other;
            if (Intrinsics.areEqual(this.mapping, ((ReturningElem)other).mapping) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.column, ((ReturningElem)other).column) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            ReturningElem returningElem = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final ReturningMapping getMapping() {
            return this.mapping;
        }

        @NotNull
        public final ColumnComponent getColumn() {
            return this.column;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public ReturningElem(@NotNull ReturningMapping mapping, @NotNull ColumnComponent column, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(mapping, "mapping");
            Intrinsics.checkParameterIsNotNull(column, "column");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.mapping = mapping;
            this.column = column;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ ReturningElem this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getMapping().hashCode();
                    hc = 31 * hc + this.this$0.getColumn().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = returningElem;
                    super(0);
                }
            });
        }

        public /* synthetic */ ReturningElem(ReturningMapping returningMapping, ColumnComponent columnComponent, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(returningMapping, columnComponent, map2);
        }
    }

    /*
     * Illegal identifiers - consider using --renameillegalidents true
     */
    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J4\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0011H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u001b\u0010\u0010\u001a\u00020\u00118BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0014\u0010\u0015\u001a\u0004\b\u0012\u0010\u0013R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "name", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "case", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;Ljava/util/Map;)V", "getCase", "()Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class Identifier
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final SymbolPrimitive name;
        @NotNull
        private final CaseSensitivity case;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Identifier.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public Identifier copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Identifier(this.name, this.case, metas);
        }

        @Override
        @NotNull
        public Identifier withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new Identifier(this.name, this.case, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"identifier", null, null, (int)6, null), this.name.toIonElement(), (IonElement)this.case.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final Identifier copy(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Identifier(name, caseSensitivity, metas);
        }

        public static /* synthetic */ Identifier copy$default(Identifier identifier, SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                symbolPrimitive = identifier.name;
            }
            if ((n & 2) != 0) {
                caseSensitivity = identifier.case;
            }
            if ((n & 4) != 0) {
                map2 = identifier.getMetas();
            }
            return identifier.copy(symbolPrimitive, caseSensitivity, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), Identifier.class) ^ true) {
                return false;
            }
            Identifier cfr_ignored_0 = (Identifier)other;
            if (Intrinsics.areEqual(this.name, ((Identifier)other).name) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.case, ((Identifier)other).case) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            Identifier identifier = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final SymbolPrimitive getName() {
            return this.name;
        }

        @NotNull
        public final CaseSensitivity getCase() {
            return this.case;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public Identifier(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(name, "name");
            Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.name = name;
            this.case = caseSensitivity;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ Identifier this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getName().hashCode();
                    hc = 31 * hc + this.this$0.getCase().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = identifier;
                    super(0);
                }
            });
        }

        public /* synthetic */ Identifier(SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(symbolPrimitive, caseSensitivity, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0016\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u000eH\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0014\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "target", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTarget", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getValue", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
    public static final class Assignment
    extends PartiqlAstNode {
        static final /* synthetic */ KProperty[] $$delegatedProperties;
        private final Lazy myHashCode$delegate;
        @NotNull
        private final Expr target;
        @NotNull
        private final Expr value;
        @NotNull
        private final Map<String, Object> metas;

        static {
            $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Assignment.class), "myHashCode", "getMyHashCode()I"))};
        }

        @Override
        @NotNull
        public Assignment copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Assignment(this.target, this.value, metas);
        }

        @Override
        @NotNull
        public Assignment withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
            Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
            Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
            return new Assignment(this.target, this.value, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
        }

        @Override
        @NotNull
        public SexpElement toIonElement() {
            IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"assignment", null, null, (int)6, null), (IonElement)this.target.toIonElement(), (IonElement)this.value.toIonElement()};
            List list = null;
            Map<String, Object> map2 = this.getMetas();
            SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
            return elements;
        }

        @NotNull
        public final Assignment copy(@NotNull Expr target, @NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            return new Assignment(target, value, metas);
        }

        public static /* synthetic */ Assignment copy$default(Assignment assignment, Expr expr, Expr expr2, Map map2, int n, Object object) {
            if ((n & 1) != 0) {
                expr = assignment.target;
            }
            if ((n & 2) != 0) {
                expr2 = assignment.value;
            }
            if ((n & 4) != 0) {
                map2 = assignment.getMetas();
            }
            return assignment.copy(expr, expr2, map2);
        }

        public boolean equals(@Nullable Object other) {
            if (other == null) {
                return false;
            }
            if (this == other) {
                return true;
            }
            if (Intrinsics.areEqual(other.getClass(), Assignment.class) ^ true) {
                return false;
            }
            Assignment cfr_ignored_0 = (Assignment)other;
            if (Intrinsics.areEqual(this.target, ((Assignment)other).target) ^ true) {
                return false;
            }
            return !(Intrinsics.areEqual(this.value, ((Assignment)other).value) ^ true);
        }

        private final int getMyHashCode() {
            Lazy lazy = this.myHashCode$delegate;
            Assignment assignment = this;
            KProperty kProperty = $$delegatedProperties[0];
            boolean bl = false;
            return ((Number)lazy.getValue()).intValue();
        }

        public int hashCode() {
            return this.getMyHashCode();
        }

        @NotNull
        public final Expr getTarget() {
            return this.target;
        }

        @NotNull
        public final Expr getValue() {
            return this.value;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        public Assignment(@NotNull Expr target, @NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(target, "target");
            Intrinsics.checkParameterIsNotNull(value, "value");
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            this.target = target;
            this.value = value;
            this.metas = metas;
            this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                final /* synthetic */ Assignment this$0;

                /*
                 * WARNING - void declaration
                 */
                public final int invoke() {
                    void var1_1;
                    int hc = this.this$0.getTarget().hashCode();
                    hc = 31 * hc + this.this$0.getValue().hashCode();
                    return (int)var1_1;
                }
                {
                    this.this$0 = assignment;
                    super(0);
                }
            });
        }

        public /* synthetic */ Assignment(Expr expr, Expr expr2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 4) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(expr, expr2, map2);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u000b\f\r\u000e\u000fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0004\u0010\u0011\u0012\u0013\u00a8\u0006\u0014"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "Ddl", "Dml", "Exec", "Query", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "lang"})
    public static abstract class Statement
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public Statement copy(@NotNull Map<String, ? extends Object> metas) {
            Statement statement;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            Statement statement2 = this;
            if (statement2 instanceof Query) {
                statement = (Statement)((Query)this).copy((Map)metas);
            } else if (statement2 instanceof Dml) {
                statement = (Statement)((Dml)this).copy((Map)metas);
            } else if (statement2 instanceof Ddl) {
                statement = (Statement)((Ddl)this).copy((Map)metas);
            } else if (statement2 instanceof Exec) {
                statement = (Statement)((Exec)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return statement;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private Statement(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ Statement(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Query
        extends Statement {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Query.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Query copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Query(this.expr, metas);
            }

            @Override
            @NotNull
            public Query withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Query(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"query", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Query copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Query(expr, metas);
            }

            public static /* synthetic */ Query copy$default(Query query, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = query.expr;
                }
                if ((n & 2) != 0) {
                    map2 = query.getMetas();
                }
                return query.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Query.class) ^ true) {
                    return false;
                }
                Query cfr_ignored_0 = (Query)other;
                return !(Intrinsics.areEqual(this.expr, ((Query)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Query query = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Query(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Query this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = query;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Query(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000N\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\f\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BE\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\b\u001a\u0004\u0018\u00010\t\u0012\u0018\b\u0002\u0010\n\u001a\u0012\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\r0\u000bj\u0002`\u000e\u00a2\u0006\u0002\u0010\u000fJ \u0010 \u001a\u00020\u00002\u0016\u0010\n\u001a\u0012\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\r0\u000bj\u0002`\u000eH\u0016JN\u0010 \u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\t2\u0018\b\u0002\u0010\n\u001a\u0012\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\r0\u000bj\u0002`\u000eJ\u0013\u0010!\u001a\u00020\"2\b\u0010#\u001a\u0004\u0018\u00010\rH\u0096\u0002J\b\u0010$\u001a\u00020\u0015H\u0016J\b\u0010%\u001a\u00020&H\u0016J\u0018\u0010'\u001a\u00020\u00002\u0006\u0010(\u001a\u00020\f2\u0006\u0010)\u001a\u00020\rH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R$\u0010\n\u001a\u0012\u0012\u0004\u0012\u00020\f\u0012\u0004\u0012\u00020\r0\u000bj\u0002`\u000eX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013R\u001b\u0010\u0014\u001a\u00020\u00158BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0018\u0010\u0019\u001a\u0004\b\u0016\u0010\u0017R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u001bR\u0013\u0010\b\u001a\u0004\u0018\u00010\t\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001c\u0010\u001dR\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001e\u0010\u001f\u00a8\u0006*"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "operations", "Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "from", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "where", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "returning", "Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;Lorg/partiql/lang/domains/PartiqlAst$FromSource;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;Ljava/util/Map;)V", "getFrom", "()Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperations", "()Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "getReturning", "()Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "getWhere", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Dml
        extends Statement {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final DmlOpList operations;
            @Nullable
            private final FromSource from;
            @Nullable
            private final Expr where;
            @Nullable
            private final ReturningExpr returning;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Dml.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Dml copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Dml(this.operations, this.from, this.where, this.returning, metas);
            }

            @Override
            @NotNull
            public Dml withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Dml(this.operations, this.from, this.where, this.returning, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                SexpElement sexpElement;
                SexpElement sexpElement2;
                SexpElement sexpElement3;
                SexpElement sexpElement4;
                SexpElement sexpElement5;
                DmlOpList it;
                boolean bl;
                boolean bl2;
                IonElement[] ionElementArray;
                IonElement[] ionElementArray2;
                int n;
                PartiqlAstNode partiqlAstNode;
                IonElement[] ionElementArray3 = new IonElement[5];
                ionElementArray3[0] = (IonElement)Ion.ionSymbol$default((String)"dml", null, null, (int)6, null);
                IonElement[] ionElementArray4 = ionElementArray3;
                IonElement[] ionElementArray5 = ionElementArray3;
                int n2 = 1;
                DmlOpList dmlOpList = this.operations;
                if (dmlOpList != null) {
                    partiqlAstNode = dmlOpList;
                    n = n2;
                    ionElementArray2 = ionElementArray4;
                    ionElementArray = ionElementArray5;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl3 = false;
                    sexpElement5 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"operations", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray5 = ionElementArray;
                    ionElementArray4 = ionElementArray2;
                    n2 = n;
                    sexpElement4 = sexpElement5;
                } else {
                    sexpElement4 = null;
                }
                ionElementArray4[n2] = (IonElement)sexpElement4;
                IonElement[] ionElementArray6 = ionElementArray5;
                IonElement[] ionElementArray7 = ionElementArray5;
                int n3 = 2;
                FromSource fromSource = this.from;
                if (fromSource != null) {
                    partiqlAstNode = fromSource;
                    n = n3;
                    ionElementArray2 = ionElementArray6;
                    ionElementArray = ionElementArray7;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl4 = false;
                    sexpElement5 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"from", null, null, (int)6, null), (IonElement)((PartiqlAstNode)it).toIonElement()}, null, null, (int)6, null);
                    ionElementArray7 = ionElementArray;
                    ionElementArray6 = ionElementArray2;
                    n3 = n;
                    sexpElement3 = sexpElement5;
                } else {
                    sexpElement3 = null;
                }
                ionElementArray6[n3] = (IonElement)sexpElement3;
                IonElement[] ionElementArray8 = ionElementArray7;
                IonElement[] ionElementArray9 = ionElementArray7;
                int n4 = 3;
                Expr expr = this.where;
                if (expr != null) {
                    partiqlAstNode = expr;
                    n = n4;
                    ionElementArray2 = ionElementArray8;
                    ionElementArray = ionElementArray9;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl5 = false;
                    sexpElement5 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"where", null, null, (int)6, null), (IonElement)((PartiqlAstNode)it).toIonElement()}, null, null, (int)6, null);
                    ionElementArray9 = ionElementArray;
                    ionElementArray8 = ionElementArray2;
                    n4 = n;
                    sexpElement2 = sexpElement5;
                } else {
                    sexpElement2 = null;
                }
                ionElementArray8[n4] = (IonElement)sexpElement2;
                IonElement[] ionElementArray10 = ionElementArray9;
                IonElement[] ionElementArray11 = ionElementArray9;
                int n5 = 4;
                ReturningExpr returningExpr = this.returning;
                if (returningExpr != null) {
                    partiqlAstNode = returningExpr;
                    n = n5;
                    ionElementArray2 = ionElementArray10;
                    ionElementArray = ionElementArray11;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl6 = false;
                    sexpElement5 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"returning", null, null, (int)6, null), (IonElement)((ReturningExpr)((Object)it)).toIonElement()}, null, null, (int)6, null);
                    ionElementArray11 = ionElementArray;
                    ionElementArray10 = ionElementArray2;
                    n5 = n;
                    sexpElement = sexpElement5;
                } else {
                    sexpElement = null;
                }
                ionElementArray10[n5] = (IonElement)sexpElement;
                List<IonElement> elements = CollectionsKt.listOfNotNull(ionElementArray11);
                return Ion.ionSexpOf$default((Iterable)elements, null, this.getMetas(), (int)2, null);
            }

            @NotNull
            public final Dml copy(@NotNull DmlOpList operations2, @Nullable FromSource from2, @Nullable Expr where2, @Nullable ReturningExpr returning2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operations2, "operations");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Dml(operations2, from2, where2, returning2, metas);
            }

            public static /* synthetic */ Dml copy$default(Dml dml, DmlOpList dmlOpList, FromSource fromSource, Expr expr, ReturningExpr returningExpr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    dmlOpList = dml.operations;
                }
                if ((n & 2) != 0) {
                    fromSource = dml.from;
                }
                if ((n & 4) != 0) {
                    expr = dml.where;
                }
                if ((n & 8) != 0) {
                    returningExpr = dml.returning;
                }
                if ((n & 0x10) != 0) {
                    map2 = dml.getMetas();
                }
                return dml.copy(dmlOpList, fromSource, expr, returningExpr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Dml.class) ^ true) {
                    return false;
                }
                Dml cfr_ignored_0 = (Dml)other;
                if (Intrinsics.areEqual(this.operations, ((Dml)other).operations) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.from, ((Dml)other).from) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.where, ((Dml)other).where) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.returning, ((Dml)other).returning) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Dml dml = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final DmlOpList getOperations() {
                return this.operations;
            }

            @Nullable
            public final FromSource getFrom() {
                return this.from;
            }

            @Nullable
            public final Expr getWhere() {
                return this.where;
            }

            @Nullable
            public final ReturningExpr getReturning() {
                return this.returning;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Dml(@NotNull DmlOpList operations2, @Nullable FromSource from2, @Nullable Expr where2, @Nullable ReturningExpr returning2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operations2, "operations");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operations = operations2;
                this.from = from2;
                this.where = where2;
                this.returning = returning2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Dml this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getOperations().hashCode();
                        PartiqlAstNode partiqlAstNode = this.this$0.getFrom();
                        int n = 31 * hc;
                        boolean bl = false;
                        FromSource fromSource = partiqlAstNode;
                        int n2 = fromSource != null ? fromSource.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getWhere();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode2 = partiqlAstNode;
                        n2 = partiqlAstNode2 != null ? partiqlAstNode2.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getReturning();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode3 = partiqlAstNode;
                        n2 = partiqlAstNode3 != null ? partiqlAstNode3.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = dml;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Dml(DmlOpList dmlOpList, FromSource fromSource, Expr expr, ReturningExpr returningExpr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(dmlOpList, fromSource, expr, returningExpr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "op", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOp", "()Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Ddl
        extends Statement {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final DdlOp op;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Ddl.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Ddl copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Ddl(this.op, metas);
            }

            @Override
            @NotNull
            public Ddl withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Ddl(this.op, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"ddl", null, null, (int)6, null), (IonElement)this.op.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Ddl copy(@NotNull DdlOp op, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(op, "op");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Ddl(op, metas);
            }

            public static /* synthetic */ Ddl copy$default(Ddl ddl, DdlOp ddlOp, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    ddlOp = ddl.op;
                }
                if ((n & 2) != 0) {
                    map2 = ddl.getMetas();
                }
                return ddl.copy(ddlOp, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Ddl.class) ^ true) {
                    return false;
                }
                Ddl cfr_ignored_0 = (Ddl)other;
                return !(Intrinsics.areEqual(this.op, ((Ddl)other).op) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Ddl ddl = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final DdlOp getOp() {
                return this.op;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Ddl(@NotNull DdlOp op, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(op, "op");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.op = op;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Ddl this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getOp().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = ddl;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Ddl(DdlOp ddlOp, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(ddlOp, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000F\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u0005\u0012\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000b\u00a2\u0006\u0002\u0010\fJ \u0010\u0019\u001a\u00020\u00002\u0016\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bH\u0016J:\u0010\u0019\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u00052\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bJ\u0013\u0010\u001a\u001a\u00020\u001b2\b\u0010\u001c\u001a\u0004\u0018\u00010\nH\u0096\u0002J\b\u0010\u001d\u001a\u00020\u0012H\u0016J\b\u0010\u001e\u001a\u00020\u001fH\u0016J\u0018\u0010 \u001a\u00020\u00002\u0006\u0010!\u001a\u00020\t2\u0006\u0010\"\u001a\u00020\nH\u0016R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR$\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R\u001b\u0010\u0011\u001a\u00020\u00128BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0015\u0010\u0016\u001a\u0004\b\u0013\u0010\u0014R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\u0018\u00a8\u0006#"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "procedureName", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "args", "", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/List;Ljava/util/Map;)V", "getArgs", "()Ljava/util/List;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getProcedureName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Exec
        extends Statement {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SymbolPrimitive procedureName;
            @NotNull
            private final List<Expr> args;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Exec.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Exec copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Exec(this.procedureName, this.args, metas);
            }

            @Override
            @NotNull
            public Exec withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Exec(this.procedureName, this.args, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"exec", null, null, (int)6, null));
                spreadBuilder.add(this.procedureName.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.args;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Exec copy(@NotNull SymbolPrimitive procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Exec(procedureName, args2, metas);
            }

            public static /* synthetic */ Exec copy$default(Exec exec, SymbolPrimitive symbolPrimitive, List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    symbolPrimitive = exec.procedureName;
                }
                if ((n & 2) != 0) {
                    list = exec.args;
                }
                if ((n & 4) != 0) {
                    map2 = exec.getMetas();
                }
                return exec.copy(symbolPrimitive, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Exec.class) ^ true) {
                    return false;
                }
                Exec cfr_ignored_0 = (Exec)other;
                if (Intrinsics.areEqual(this.procedureName, ((Exec)other).procedureName) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.args, ((Exec)other).args) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Exec exec = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SymbolPrimitive getProcedureName() {
                return this.procedureName;
            }

            @NotNull
            public final List<Expr> getArgs() {
                return this.args;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Exec(@NotNull SymbolPrimitive procedureName, @NotNull List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(procedureName, "procedureName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.procedureName = procedureName;
                this.args = args2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Exec this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getProcedureName().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getArgs()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = exec;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Exec(SymbolPrimitive symbolPrimitive, List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(symbolPrimitive, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012\u00a8\u0006\u0013"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Statement$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement;)Ljava/lang/Object;", "convertDdl", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;)Ljava/lang/Object;", "convertDml", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;)Ljava/lang/Object;", "convertExec", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;)Ljava/lang/Object;", "convertQuery", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull Statement var1);

            public T convertQuery(@NotNull Query var1);

            public T convertDml(@NotNull Dml var1);

            public T convertDdl(@NotNull Ddl var1);

            public T convertExec(@NotNull Exec var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull Statement node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    Statement statement = node;
                    if (statement instanceof Query) {
                        t = $this.convertQuery((Query)node);
                    } else if (statement instanceof Dml) {
                        t = $this.convertDml((Dml)node);
                    } else if (statement instanceof Ddl) {
                        t = $this.convertDdl((Ddl)node);
                    } else if (statement instanceof Exec) {
                        t = $this.convertExec((Exec)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u00c4\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b.\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:*\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./01234B!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001)56789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]\u00a8\u0006^"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "And", "Bag", "Between", "Call", "CallAgg", "Cast", "Concat", "Converter", "Date", "Divide", "Eq", "Except", "Gt", "Gte", "Id", "InCollection", "Intersect", "IsType", "Like", "List", "Lit", "LitTime", "Lt", "Lte", "Minus", "Missing", "Modulo", "Ne", "Neg", "Not", "Or", "Parameter", "Path", "Plus", "Pos", "SearchedCase", "Select", "Sexp", "SimpleCase", "Struct", "Times", "Union", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "lang"})
    public static abstract class Expr
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public Expr copy(@NotNull Map<String, ? extends Object> metas) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            Expr expr2 = this;
            if (expr2 instanceof Missing) {
                expr = (Expr)((Missing)this).copy((Map)metas);
            } else if (expr2 instanceof Lit) {
                expr = (Expr)((Lit)this).copy((Map)metas);
            } else if (expr2 instanceof Id) {
                expr = (Expr)((Id)this).copy((Map)metas);
            } else if (expr2 instanceof Parameter) {
                expr = (Expr)((Parameter)this).copy((Map)metas);
            } else if (expr2 instanceof Not) {
                expr = (Expr)((Not)this).copy((Map)metas);
            } else if (expr2 instanceof Pos) {
                expr = (Expr)((Pos)this).copy((Map)metas);
            } else if (expr2 instanceof Neg) {
                expr = (Expr)((Neg)this).copy((Map)metas);
            } else if (expr2 instanceof Plus) {
                expr = (Expr)((Plus)this).copy((Map)metas);
            } else if (expr2 instanceof Minus) {
                expr = (Expr)((Minus)this).copy((Map)metas);
            } else if (expr2 instanceof Times) {
                expr = (Expr)((Times)this).copy((Map)metas);
            } else if (expr2 instanceof Divide) {
                expr = (Expr)((Divide)this).copy((Map)metas);
            } else if (expr2 instanceof Modulo) {
                expr = (Expr)((Modulo)this).copy((Map)metas);
            } else if (expr2 instanceof Concat) {
                expr = (Expr)((Concat)this).copy((Map)metas);
            } else if (expr2 instanceof And) {
                expr = (Expr)((And)this).copy((Map)metas);
            } else if (expr2 instanceof Or) {
                expr = (Expr)((Or)this).copy((Map)metas);
            } else if (expr2 instanceof Eq) {
                expr = (Expr)((Eq)this).copy((Map)metas);
            } else if (expr2 instanceof Ne) {
                expr = (Expr)((Ne)this).copy((Map)metas);
            } else if (expr2 instanceof Gt) {
                expr = (Expr)((Gt)this).copy((Map)metas);
            } else if (expr2 instanceof Gte) {
                expr = (Expr)((Gte)this).copy((Map)metas);
            } else if (expr2 instanceof Lt) {
                expr = (Expr)((Lt)this).copy((Map)metas);
            } else if (expr2 instanceof Lte) {
                expr = (Expr)((Lte)this).copy((Map)metas);
            } else if (expr2 instanceof Like) {
                expr = (Expr)((Like)this).copy((Map)metas);
            } else if (expr2 instanceof Between) {
                expr = (Expr)((Between)this).copy((Map)metas);
            } else if (expr2 instanceof InCollection) {
                expr = (Expr)((InCollection)this).copy((Map)metas);
            } else if (expr2 instanceof IsType) {
                expr = (Expr)((IsType)this).copy((Map)metas);
            } else if (expr2 instanceof SimpleCase) {
                expr = (Expr)((SimpleCase)this).copy((Map)metas);
            } else if (expr2 instanceof SearchedCase) {
                expr = (Expr)((SearchedCase)this).copy((Map)metas);
            } else if (expr2 instanceof Struct) {
                expr = (Expr)((Struct)this).copy((Map)metas);
            } else if (expr2 instanceof Bag) {
                expr = (Expr)((Bag)this).copy((Map)metas);
            } else if (expr2 instanceof List) {
                expr = (Expr)((List)this).copy((Map)metas);
            } else if (expr2 instanceof Sexp) {
                expr = (Expr)((Sexp)this).copy((Map)metas);
            } else if (expr2 instanceof Date) {
                expr = (Expr)((Date)this).copy((Map)metas);
            } else if (expr2 instanceof LitTime) {
                expr = (Expr)((LitTime)this).copy((Map)metas);
            } else if (expr2 instanceof Union) {
                expr = (Expr)((Union)this).copy((Map)metas);
            } else if (expr2 instanceof Except) {
                expr = (Expr)((Except)this).copy((Map)metas);
            } else if (expr2 instanceof Intersect) {
                expr = (Expr)((Intersect)this).copy((Map)metas);
            } else if (expr2 instanceof Path) {
                expr = (Expr)((Path)this).copy((Map)metas);
            } else if (expr2 instanceof Call) {
                expr = (Expr)((Call)this).copy((Map)metas);
            } else if (expr2 instanceof CallAgg) {
                expr = (Expr)((CallAgg)this).copy((Map)metas);
            } else if (expr2 instanceof Cast) {
                expr = (Expr)((Cast)this).copy((Map)metas);
            } else if (expr2 instanceof Select) {
                expr = (Expr)((Select)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private Expr(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ Expr(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Missing
        extends Expr {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Missing copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Missing(metas);
            }

            @Override
            @NotNull
            public Missing withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Missing(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"missing", null, null, (int)6, null)};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Missing.class) ^ true);
            }

            public int hashCode() {
                return 2000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Missing(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Missing(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Missing() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "Lcom/amazon/ionelement/api/AnyElement;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lcom/amazon/ionelement/api/AnyElement;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValue", "()Lcom/amazon/ionelement/api/AnyElement;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Lit
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final AnyElement value;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Lit.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Lit copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lit(this.value, metas);
            }

            @Override
            @NotNull
            public Lit withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Lit(this.value, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"lit", null, null, (int)6, null), IonElementHelpersKt.toIonElement((IonElement)((IonElement)this.value))};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Lit copy(@NotNull AnyElement value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lit(value, metas);
            }

            public static /* synthetic */ Lit copy$default(Lit lit, AnyElement anyElement, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    anyElement = lit.value;
                }
                if ((n & 2) != 0) {
                    map2 = lit.getMetas();
                }
                return lit.copy(anyElement, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Lit.class) ^ true) {
                    return false;
                }
                Lit cfr_ignored_0 = (Lit)other;
                return !(Intrinsics.areEqual(this.value, ((Lit)other).value) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Lit lit = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final AnyElement getValue() {
                return this.value;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Lit(@NotNull AnyElement value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Lit this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = lit;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Lit(AnyElement anyElement, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(anyElement, map2);
            }
        }

        /*
         * Illegal identifiers - consider using --renameillegalidents true
         */
        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000H\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B7\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001c\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016J>\u0010\u001c\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\b\b\u0002\u0010\u0006\u001a\u00020\u00072\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010 \u001a\u00020\u0013H\u0016J\b\u0010!\u001a\u00020\"H\u0016J\u0018\u0010#\u001a\u00020\u00002\u0006\u0010$\u001a\u00020\n2\u0006\u0010%\u001a\u00020\u000bH\u0016R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0018\u0010\u0019R\u0011\u0010\u0006\u001a\u00020\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u001b\u00a8\u0006&"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "name", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "case", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "qualifier", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;Ljava/util/Map;)V", "getCase", "()Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getQualifier", "()Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Id
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SymbolPrimitive name;
            @NotNull
            private final CaseSensitivity case;
            @NotNull
            private final ScopeQualifier qualifier;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Id.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Id copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Id(this.name, this.case, this.qualifier, metas);
            }

            @Override
            @NotNull
            public Id withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Id(this.name, this.case, this.qualifier, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"id", null, null, (int)6, null), this.name.toIonElement(), (IonElement)this.case.toIonElement(), (IonElement)this.qualifier.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Id copy(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Id(name, caseSensitivity, qualifier, metas);
            }

            public static /* synthetic */ Id copy$default(Id id, SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, ScopeQualifier scopeQualifier, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    symbolPrimitive = id.name;
                }
                if ((n & 2) != 0) {
                    caseSensitivity = id.case;
                }
                if ((n & 4) != 0) {
                    scopeQualifier = id.qualifier;
                }
                if ((n & 8) != 0) {
                    map2 = id.getMetas();
                }
                return id.copy(symbolPrimitive, caseSensitivity, scopeQualifier, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Id.class) ^ true) {
                    return false;
                }
                Id cfr_ignored_0 = (Id)other;
                if (Intrinsics.areEqual(this.name, ((Id)other).name) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.case, ((Id)other).case) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.qualifier, ((Id)other).qualifier) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Id id = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SymbolPrimitive getName() {
                return this.name;
            }

            @NotNull
            public final CaseSensitivity getCase() {
                return this.case;
            }

            @NotNull
            public final ScopeQualifier getQualifier() {
                return this.qualifier;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Id(@NotNull SymbolPrimitive name, @NotNull CaseSensitivity caseSensitivity, @NotNull ScopeQualifier qualifier, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(name, "name");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(qualifier, "qualifier");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.name = name;
                this.case = caseSensitivity;
                this.qualifier = qualifier;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Id this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getName().hashCode();
                        hc = 31 * hc + this.this$0.getCase().hashCode();
                        hc = 31 * hc + this.this$0.getQualifier().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = id;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Id(SymbolPrimitive symbolPrimitive, CaseSensitivity caseSensitivity, ScopeQualifier scopeQualifier, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(symbolPrimitive, caseSensitivity, scopeQualifier, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "index", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getIndex", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Parameter
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final LongPrimitive index;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Parameter.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Parameter copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Parameter(this.index, metas);
            }

            @Override
            @NotNull
            public Parameter withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Parameter(this.index, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"parameter", null, null, (int)6, null), this.index.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Parameter copy(@NotNull LongPrimitive index, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Parameter(index, metas);
            }

            public static /* synthetic */ Parameter copy$default(Parameter parameter, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = parameter.index;
                }
                if ((n & 2) != 0) {
                    map2 = parameter.getMetas();
                }
                return parameter.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Parameter.class) ^ true) {
                    return false;
                }
                Parameter cfr_ignored_0 = (Parameter)other;
                return !(Intrinsics.areEqual(this.index, ((Parameter)other).index) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Parameter parameter = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final LongPrimitive getIndex() {
                return this.index;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Parameter(@NotNull LongPrimitive index, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.index = index;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Parameter this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getIndex().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = parameter;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Parameter(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00008\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007\u00a2\u0006\u0002\u0010\bJ \u0010\u0013\u001a\u00020\u00002\u0016\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007H\u0016J*\u0010\u0013\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007J\u0013\u0010\u0014\u001a\u00020\u00152\b\u0010\u0016\u001a\u0004\u0018\u00010\u0006H\u0096\u0002J\b\u0010\u0017\u001a\u00020\u000eH\u0016J\b\u0010\u0018\u001a\u00020\u0019H\u0016J\u0018\u0010\u001a\u001a\u00020\u00002\u0006\u0010\u001b\u001a\u00020\u00052\u0006\u0010\u001c\u001a\u00020\u0006H\u0016R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\t\u0010\nR$\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010\u00a8\u0006\u001d"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "expr", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Not
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Not.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Not copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Not(this.expr, metas);
            }

            @Override
            @NotNull
            public Not withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Not(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"not", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Not copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Not(expr, metas);
            }

            public static /* synthetic */ Not copy$default(Not not, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = not.expr;
                }
                if ((n & 2) != 0) {
                    map2 = not.getMetas();
                }
                return not.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Not.class) ^ true) {
                    return false;
                }
                Not cfr_ignored_0 = (Not)other;
                return !(Intrinsics.areEqual(this.expr, ((Not)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Not not = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Not(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Not this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = not;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Not(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00008\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007\u00a2\u0006\u0002\u0010\bJ \u0010\u0013\u001a\u00020\u00002\u0016\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007H\u0016J*\u0010\u0013\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007J\u0013\u0010\u0014\u001a\u00020\u00152\b\u0010\u0016\u001a\u0004\u0018\u00010\u0006H\u0096\u0002J\b\u0010\u0017\u001a\u00020\u000eH\u0016J\b\u0010\u0018\u001a\u00020\u0019H\u0016J\u0018\u0010\u001a\u001a\u00020\u00002\u0006\u0010\u001b\u001a\u00020\u00052\u0006\u0010\u001c\u001a\u00020\u0006H\u0016R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\t\u0010\nR$\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010\u00a8\u0006\u001d"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "expr", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Pos
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Pos.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Pos copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Pos(this.expr, metas);
            }

            @Override
            @NotNull
            public Pos withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Pos(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"pos", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Pos copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Pos(expr, metas);
            }

            public static /* synthetic */ Pos copy$default(Pos pos, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = pos.expr;
                }
                if ((n & 2) != 0) {
                    map2 = pos.getMetas();
                }
                return pos.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Pos.class) ^ true) {
                    return false;
                }
                Pos cfr_ignored_0 = (Pos)other;
                return !(Intrinsics.areEqual(this.expr, ((Pos)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Pos pos = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Pos(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Pos this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = pos;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Pos(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00008\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007\u00a2\u0006\u0002\u0010\bJ \u0010\u0013\u001a\u00020\u00002\u0016\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007H\u0016J*\u0010\u0013\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\u0018\b\u0002\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007J\u0013\u0010\u0014\u001a\u00020\u00152\b\u0010\u0016\u001a\u0004\u0018\u00010\u0006H\u0096\u0002J\b\u0010\u0017\u001a\u00020\u000eH\u0016J\b\u0010\u0018\u001a\u00020\u0019H\u0016J\u0018\u0010\u001a\u001a\u00020\u00002\u0006\u0010\u001b\u001a\u00020\u00052\u0006\u0010\u001c\u001a\u00020\u0006H\u0016R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\t\u0010\nR$\u0010\u0003\u001a\u0012\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004j\u0002`\u0007X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010\u00a8\u0006\u001d"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "expr", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Neg
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Neg.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Neg copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Neg(this.expr, metas);
            }

            @Override
            @NotNull
            public Neg withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Neg(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"neg", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Neg copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Neg(expr, metas);
            }

            public static /* synthetic */ Neg copy$default(Neg neg, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = neg.expr;
                }
                if ((n & 2) != 0) {
                    map2 = neg.getMetas();
                }
                return neg.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Neg.class) ^ true) {
                    return false;
                }
                Neg cfr_ignored_0 = (Neg)other;
                return !(Intrinsics.areEqual(this.expr, ((Neg)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Neg neg = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Neg(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Neg this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = neg;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Neg(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Plus
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Plus.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Plus copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Plus(this.operands, metas);
            }

            @Override
            @NotNull
            public Plus withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Plus(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"plus", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Plus copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Plus(operands, metas);
            }

            public static /* synthetic */ Plus copy$default(Plus plus2, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = plus2.operands;
                }
                if ((n & 2) != 0) {
                    map2 = plus2.getMetas();
                }
                return plus2.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Plus.class) ^ true) {
                    return false;
                }
                Plus cfr_ignored_0 = (Plus)other;
                return !(Intrinsics.areEqual(this.operands, ((Plus)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Plus plus2 = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Plus(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Plus this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = plus2;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Plus(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Minus
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Minus.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Minus copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Minus(this.operands, metas);
            }

            @Override
            @NotNull
            public Minus withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Minus(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"minus", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Minus copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Minus(operands, metas);
            }

            public static /* synthetic */ Minus copy$default(Minus minus2, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = minus2.operands;
                }
                if ((n & 2) != 0) {
                    map2 = minus2.getMetas();
                }
                return minus2.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Minus.class) ^ true) {
                    return false;
                }
                Minus cfr_ignored_0 = (Minus)other;
                return !(Intrinsics.areEqual(this.operands, ((Minus)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Minus minus2 = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Minus(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Minus this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = minus2;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Minus(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Times
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Times.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Times copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Times(this.operands, metas);
            }

            @Override
            @NotNull
            public Times withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Times(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"times", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Times copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Times(operands, metas);
            }

            public static /* synthetic */ Times copy$default(Times times, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = times.operands;
                }
                if ((n & 2) != 0) {
                    map2 = times.getMetas();
                }
                return times.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Times.class) ^ true) {
                    return false;
                }
                Times cfr_ignored_0 = (Times)other;
                return !(Intrinsics.areEqual(this.operands, ((Times)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Times times = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Times(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Times this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = times;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Times(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Divide
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Divide.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Divide copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Divide(this.operands, metas);
            }

            @Override
            @NotNull
            public Divide withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Divide(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"divide", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Divide copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Divide(operands, metas);
            }

            public static /* synthetic */ Divide copy$default(Divide divide, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = divide.operands;
                }
                if ((n & 2) != 0) {
                    map2 = divide.getMetas();
                }
                return divide.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Divide.class) ^ true) {
                    return false;
                }
                Divide cfr_ignored_0 = (Divide)other;
                return !(Intrinsics.areEqual(this.operands, ((Divide)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Divide divide = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Divide(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Divide this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = divide;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Divide(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Modulo
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Modulo.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Modulo copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Modulo(this.operands, metas);
            }

            @Override
            @NotNull
            public Modulo withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Modulo(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"modulo", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Modulo copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Modulo(operands, metas);
            }

            public static /* synthetic */ Modulo copy$default(Modulo modulo, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = modulo.operands;
                }
                if ((n & 2) != 0) {
                    map2 = modulo.getMetas();
                }
                return modulo.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Modulo.class) ^ true) {
                    return false;
                }
                Modulo cfr_ignored_0 = (Modulo)other;
                return !(Intrinsics.areEqual(this.operands, ((Modulo)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Modulo modulo = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Modulo(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Modulo this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = modulo;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Modulo(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Concat
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Concat.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Concat copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Concat(this.operands, metas);
            }

            @Override
            @NotNull
            public Concat withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Concat(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"concat", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Concat copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Concat(operands, metas);
            }

            public static /* synthetic */ Concat copy$default(Concat concat, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = concat.operands;
                }
                if ((n & 2) != 0) {
                    map2 = concat.getMetas();
                }
                return concat.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Concat.class) ^ true) {
                    return false;
                }
                Concat cfr_ignored_0 = (Concat)other;
                return !(Intrinsics.areEqual(this.operands, ((Concat)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Concat concat = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Concat(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Concat this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = concat;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Concat(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class And
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(And.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public And copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new And(this.operands, metas);
            }

            @Override
            @NotNull
            public And withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new And(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"and", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final And copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new And(operands, metas);
            }

            public static /* synthetic */ And copy$default(And and, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = and.operands;
                }
                if ((n & 2) != 0) {
                    map2 = and.getMetas();
                }
                return and.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), And.class) ^ true) {
                    return false;
                }
                And cfr_ignored_0 = (And)other;
                return !(Intrinsics.areEqual(this.operands, ((And)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                And and = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public And(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ And this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = and;
                        super(0);
                    }
                });
            }

            public /* synthetic */ And(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Or
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Or.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Or copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Or(this.operands, metas);
            }

            @Override
            @NotNull
            public Or withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Or(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"or", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Or copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Or(operands, metas);
            }

            public static /* synthetic */ Or copy$default(Or or, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = or.operands;
                }
                if ((n & 2) != 0) {
                    map2 = or.getMetas();
                }
                return or.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Or.class) ^ true) {
                    return false;
                }
                Or cfr_ignored_0 = (Or)other;
                return !(Intrinsics.areEqual(this.operands, ((Or)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Or or = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Or(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Or this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = or;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Or(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Eq
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Eq.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Eq copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Eq(this.operands, metas);
            }

            @Override
            @NotNull
            public Eq withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Eq(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"eq", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Eq copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Eq(operands, metas);
            }

            public static /* synthetic */ Eq copy$default(Eq eq, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = eq.operands;
                }
                if ((n & 2) != 0) {
                    map2 = eq.getMetas();
                }
                return eq.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Eq.class) ^ true) {
                    return false;
                }
                Eq cfr_ignored_0 = (Eq)other;
                return !(Intrinsics.areEqual(this.operands, ((Eq)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Eq eq = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Eq(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Eq this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = eq;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Eq(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Ne
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Ne.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Ne copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Ne(this.operands, metas);
            }

            @Override
            @NotNull
            public Ne withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Ne(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"ne", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Ne copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Ne(operands, metas);
            }

            public static /* synthetic */ Ne copy$default(Ne ne, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = ne.operands;
                }
                if ((n & 2) != 0) {
                    map2 = ne.getMetas();
                }
                return ne.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Ne.class) ^ true) {
                    return false;
                }
                Ne cfr_ignored_0 = (Ne)other;
                return !(Intrinsics.areEqual(this.operands, ((Ne)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Ne ne = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Ne(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Ne this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = ne;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Ne(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Gt
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Gt.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Gt copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Gt(this.operands, metas);
            }

            @Override
            @NotNull
            public Gt withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Gt(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"gt", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Gt copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Gt(operands, metas);
            }

            public static /* synthetic */ Gt copy$default(Gt gt, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = gt.operands;
                }
                if ((n & 2) != 0) {
                    map2 = gt.getMetas();
                }
                return gt.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Gt.class) ^ true) {
                    return false;
                }
                Gt cfr_ignored_0 = (Gt)other;
                return !(Intrinsics.areEqual(this.operands, ((Gt)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Gt gt = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Gt(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Gt this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = gt;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Gt(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Gte
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Gte.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Gte copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Gte(this.operands, metas);
            }

            @Override
            @NotNull
            public Gte withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Gte(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"gte", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Gte copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Gte(operands, metas);
            }

            public static /* synthetic */ Gte copy$default(Gte gte, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = gte.operands;
                }
                if ((n & 2) != 0) {
                    map2 = gte.getMetas();
                }
                return gte.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Gte.class) ^ true) {
                    return false;
                }
                Gte cfr_ignored_0 = (Gte)other;
                return !(Intrinsics.areEqual(this.operands, ((Gte)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Gte gte = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Gte(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Gte this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = gte;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Gte(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Lt
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Lt.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Lt copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lt(this.operands, metas);
            }

            @Override
            @NotNull
            public Lt withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Lt(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"lt", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Lt copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lt(operands, metas);
            }

            public static /* synthetic */ Lt copy$default(Lt lt, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = lt.operands;
                }
                if ((n & 2) != 0) {
                    map2 = lt.getMetas();
                }
                return lt.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Lt.class) ^ true) {
                    return false;
                }
                Lt cfr_ignored_0 = (Lt)other;
                return !(Intrinsics.areEqual(this.operands, ((Lt)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Lt lt = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Lt(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Lt this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = lt;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Lt(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Lte
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Lte.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Lte copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lte(this.operands, metas);
            }

            @Override
            @NotNull
            public Lte withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Lte(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"lte", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Lte copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Lte(operands, metas);
            }

            public static /* synthetic */ Lte copy$default(Lte lte, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = lte.operands;
                }
                if ((n & 2) != 0) {
                    map2 = lte.getMetas();
                }
                return lte.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Lte.class) ^ true) {
                    return false;
                }
                Lte cfr_ignored_0 = (Lte)other;
                return !(Intrinsics.areEqual(this.operands, ((Lte)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Lte lte = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Lte(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Lte this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = lte;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Lte(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00008\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B9\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0006\u0010\u0003\u001a\u00020\u0001\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0001\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0017\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J@\u0010\u0017\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\b\b\u0002\u0010\u0003\u001a\u00020\u00012\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001b\u001a\u00020\u0010H\u0016J\b\u0010\u001c\u001a\u00020\u001dH\u0016J\u0018\u0010\u001e\u001a\u00020\u00002\u0006\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\bH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0003\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\fR\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\f\u00a8\u0006!"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "pattern", "escape", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getEscape", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPattern", "getValue", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Like
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Expr pattern;
            @Nullable
            private final Expr escape;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Like.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Like copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Like(this.value, this.pattern, this.escape, metas);
            }

            @Override
            @NotNull
            public Like withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Like(this.value, this.pattern, this.escape, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Expr expr;
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"like", null, null, (int)6, null), (IonElement)this.value.toIonElement(), (IonElement)this.pattern.toIonElement(), (expr = this.escape) != null && (expr = expr.toIonElement()) != null ? (IonElement)expr : Ion.ionNull$default(null, (int)1, null)};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Like copy(@NotNull Expr value, @NotNull Expr pattern, @Nullable Expr escape, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(pattern, "pattern");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Like(value, pattern, escape, metas);
            }

            public static /* synthetic */ Like copy$default(Like like, Expr expr, Expr expr2, Expr expr3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = like.value;
                }
                if ((n & 2) != 0) {
                    expr2 = like.pattern;
                }
                if ((n & 4) != 0) {
                    expr3 = like.escape;
                }
                if ((n & 8) != 0) {
                    map2 = like.getMetas();
                }
                return like.copy(expr, expr2, expr3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Like.class) ^ true) {
                    return false;
                }
                Like cfr_ignored_0 = (Like)other;
                if (Intrinsics.areEqual(this.value, ((Like)other).value) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.pattern, ((Like)other).pattern) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.escape, ((Like)other).escape) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Like like = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @NotNull
            public final Expr getPattern() {
                return this.pattern;
            }

            @Nullable
            public final Expr getEscape() {
                return this.escape;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Like(@NotNull Expr value, @NotNull Expr pattern, @Nullable Expr escape, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(pattern, "pattern");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.pattern = pattern;
                this.escape = escape;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Like this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        hc = 31 * hc + this.this$0.getPattern().hashCode();
                        Expr expr = this.this$0.getEscape();
                        int n = 31 * hc;
                        boolean bl = false;
                        Expr expr2 = expr;
                        int n2 = expr2 != null ? expr2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = like;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Like(Expr expr, Expr expr2, Expr expr3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, expr2, expr3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00008\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B7\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0006\u0010\u0003\u001a\u00020\u0001\u0012\u0006\u0010\u0004\u001a\u00020\u0001\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0017\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J>\u0010\u0017\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\b\b\u0002\u0010\u0003\u001a\u00020\u00012\b\b\u0002\u0010\u0004\u001a\u00020\u00012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001b\u001a\u00020\u0010H\u0016J\b\u0010\u001c\u001a\u00020\u001dH\u0016J\u0018\u0010\u001e\u001a\u00020\u00002\u0006\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\bH\u0016R\u0011\u0010\u0003\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0004\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\fR\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\f\u00a8\u0006!"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "from", "to", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getFrom", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTo", "getValue", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Between
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Expr from;
            @NotNull
            private final Expr to;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Between.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Between copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Between(this.value, this.from, this.to, metas);
            }

            @Override
            @NotNull
            public Between withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Between(this.value, this.from, this.to, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"between", null, null, (int)6, null), (IonElement)this.value.toIonElement(), (IonElement)this.from.toIonElement(), (IonElement)this.to.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Between copy(@NotNull Expr value, @NotNull Expr from2, @NotNull Expr to, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(to, "to");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Between(value, from2, to, metas);
            }

            public static /* synthetic */ Between copy$default(Between between, Expr expr, Expr expr2, Expr expr3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = between.value;
                }
                if ((n & 2) != 0) {
                    expr2 = between.from;
                }
                if ((n & 4) != 0) {
                    expr3 = between.to;
                }
                if ((n & 8) != 0) {
                    map2 = between.getMetas();
                }
                return between.copy(expr, expr2, expr3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Between.class) ^ true) {
                    return false;
                }
                Between cfr_ignored_0 = (Between)other;
                if (Intrinsics.areEqual(this.value, ((Between)other).value) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.from, ((Between)other).from) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.to, ((Between)other).to) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Between between = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @NotNull
            public final Expr getFrom() {
                return this.from;
            }

            @NotNull
            public final Expr getTo() {
                return this.to;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Between(@NotNull Expr value, @NotNull Expr from2, @NotNull Expr to, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(to, "to");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.from = from2;
                this.to = to;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Between this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        hc = 31 * hc + this.this$0.getFrom().hashCode();
                        hc = 31 * hc + this.this$0.getTo().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = between;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Between(Expr expr, Expr expr2, Expr expr3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, expr2, expr3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class InCollection
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(InCollection.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public InCollection copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new InCollection(this.operands, metas);
            }

            @Override
            @NotNull
            public InCollection withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new InCollection(this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"in_collection", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final InCollection copy(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new InCollection(operands, metas);
            }

            public static /* synthetic */ InCollection copy$default(InCollection inCollection, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = inCollection.operands;
                }
                if ((n & 2) != 0) {
                    map2 = inCollection.getMetas();
                }
                return inCollection.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), InCollection.class) ^ true) {
                    return false;
                }
                InCollection cfr_ignored_0 = (InCollection)other;
                return !(Intrinsics.areEqual(this.operands, ((InCollection)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                InCollection inCollection = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public InCollection(@NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ InCollection this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = inCollection;
                        super(0);
                    }
                });
            }

            public /* synthetic */ InCollection(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0017\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0017\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\b\b\u0002\u0010\u0003\u001a\u00020\u00042\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001b\u001a\u00020\u000eH\u0016J\b\u0010\u001c\u001a\u00020\u001dH\u0016J\u0018\u0010\u001e\u001a\u00020\u00002\u0006\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0011\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0016\u00a8\u0006!"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "type", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Type;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getType", "()Lorg/partiql/lang/domains/PartiqlAst$Type;", "getValue", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class IsType
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Type type;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(IsType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public IsType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new IsType(this.value, this.type, metas);
            }

            @Override
            @NotNull
            public IsType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new IsType(this.value, this.type, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"is_type", null, null, (int)6, null), (IonElement)this.value.toIonElement(), (IonElement)this.type.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final IsType copy(@NotNull Expr value, @NotNull Type type, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new IsType(value, type, metas);
            }

            public static /* synthetic */ IsType copy$default(IsType isType, Expr expr, Type type, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = isType.value;
                }
                if ((n & 2) != 0) {
                    type = isType.type;
                }
                if ((n & 4) != 0) {
                    map2 = isType.getMetas();
                }
                return isType.copy(expr, type, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), IsType.class) ^ true) {
                    return false;
                }
                IsType cfr_ignored_0 = (IsType)other;
                if (Intrinsics.areEqual(this.value, ((IsType)other).value) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.type, ((IsType)other).type) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                IsType isType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @NotNull
            public final Type getType() {
                return this.type;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public IsType(@NotNull Expr value, @NotNull Type type, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.type = type;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ IsType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        hc = 31 * hc + this.this$0.getType().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = isType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ IsType(Expr expr, Type type, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, type, map2);
            }
        }

        /*
         * Illegal identifiers - consider using --renameillegalidents true
         */
        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B9\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\b\u0010\u0005\u001a\u0004\u0018\u00010\u0001\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0019\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J@\u0010\u0019\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\b\b\u0002\u0010\u0003\u001a\u00020\u00042\n\b\u0002\u0010\u0005\u001a\u0004\u0018\u00010\u00012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u001a\u001a\u00020\u001b2\b\u0010\u001c\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001d\u001a\u00020\u0014H\u0016J\b\u0010\u001e\u001a\u00020\u001fH\u0016J\u0018\u0010 \u001a\u00020\u00002\u0006\u0010!\u001a\u00020\b2\u0006\u0010\"\u001a\u00020\tH\u0016R\u0011\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0013\u0010\u0005\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u001b\u0010\u0013\u001a\u00020\u00148BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0017\u0010\u0018\u001a\u0004\b\u0015\u0010\u0016\u00a8\u0006#"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "expr", "cases", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "default", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getCases", "()Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "getDefault", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getExpr", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class SimpleCase
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final ExprPairList cases;
            @Nullable
            private final Expr default;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(SimpleCase.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public SimpleCase copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SimpleCase(this.expr, this.cases, this.default, metas);
            }

            @Override
            @NotNull
            public SimpleCase withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new SimpleCase(this.expr, this.cases, this.default, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Expr expr;
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"simple_case", null, null, (int)6, null), (IonElement)this.expr.toIonElement(), (IonElement)this.cases.toIonElement(), (expr = this.default) != null && (expr = expr.toIonElement()) != null ? (IonElement)expr : Ion.ionNull$default(null, (int)1, null)};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final SimpleCase copy(@NotNull Expr expr, @NotNull ExprPairList cases, @Nullable Expr expr2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SimpleCase(expr, cases, expr2, metas);
            }

            public static /* synthetic */ SimpleCase copy$default(SimpleCase simpleCase, Expr expr, ExprPairList exprPairList, Expr expr2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = simpleCase.expr;
                }
                if ((n & 2) != 0) {
                    exprPairList = simpleCase.cases;
                }
                if ((n & 4) != 0) {
                    expr2 = simpleCase.default;
                }
                if ((n & 8) != 0) {
                    map2 = simpleCase.getMetas();
                }
                return simpleCase.copy(expr, exprPairList, expr2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), SimpleCase.class) ^ true) {
                    return false;
                }
                SimpleCase cfr_ignored_0 = (SimpleCase)other;
                if (Intrinsics.areEqual(this.expr, ((SimpleCase)other).expr) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.cases, ((SimpleCase)other).cases) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.default, ((SimpleCase)other).default) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                SimpleCase simpleCase = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @NotNull
            public final ExprPairList getCases() {
                return this.cases;
            }

            @Nullable
            public final Expr getDefault() {
                return this.default;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public SimpleCase(@NotNull Expr expr, @NotNull ExprPairList cases, @Nullable Expr expr2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.cases = cases;
                this.default = expr2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ SimpleCase this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        hc = 31 * hc + this.this$0.getCases().hashCode();
                        Expr expr = this.this$0.getDefault();
                        int n = 31 * hc;
                        boolean bl = false;
                        Expr expr2 = expr;
                        int n2 = expr2 != null ? expr2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = simpleCase;
                        super(0);
                    }
                });
            }

            public /* synthetic */ SimpleCase(Expr expr, ExprPairList exprPairList, Expr expr2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, exprPairList, expr2, map2);
            }
        }

        /*
         * Illegal identifiers - consider using --renameillegalidents true
         */
        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B1\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0001\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0017\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J6\u0010\u0017\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001b\u001a\u00020\u0012H\u0016J\b\u0010\u001c\u001a\u00020\u001dH\u0016J\u0018\u0010\u001e\u001a\u00020\u00002\u0006\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\bH\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R\u001b\u0010\u0011\u001a\u00020\u00128BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0015\u0010\u0016\u001a\u0004\b\u0013\u0010\u0014\u00a8\u0006!"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "cases", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "default", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getCases", "()Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "getDefault", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class SearchedCase
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final ExprPairList cases;
            @Nullable
            private final Expr default;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(SearchedCase.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public SearchedCase copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SearchedCase(this.cases, this.default, metas);
            }

            @Override
            @NotNull
            public SearchedCase withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new SearchedCase(this.cases, this.default, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Expr expr;
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"searched_case", null, null, (int)6, null), (IonElement)this.cases.toIonElement(), (expr = this.default) != null && (expr = expr.toIonElement()) != null ? (IonElement)expr : Ion.ionNull$default(null, (int)1, null)};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final SearchedCase copy(@NotNull ExprPairList cases, @Nullable Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SearchedCase(cases, expr, metas);
            }

            public static /* synthetic */ SearchedCase copy$default(SearchedCase searchedCase, ExprPairList exprPairList, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    exprPairList = searchedCase.cases;
                }
                if ((n & 2) != 0) {
                    expr = searchedCase.default;
                }
                if ((n & 4) != 0) {
                    map2 = searchedCase.getMetas();
                }
                return searchedCase.copy(exprPairList, expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), SearchedCase.class) ^ true) {
                    return false;
                }
                SearchedCase cfr_ignored_0 = (SearchedCase)other;
                if (Intrinsics.areEqual(this.cases, ((SearchedCase)other).cases) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.default, ((SearchedCase)other).default) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                SearchedCase searchedCase = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final ExprPairList getCases() {
                return this.cases;
            }

            @Nullable
            public final Expr getDefault() {
                return this.default;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public SearchedCase(@NotNull ExprPairList cases, @Nullable Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(cases, "cases");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.cases = cases;
                this.default = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ SearchedCase this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getCases().hashCode();
                        Expr expr = this.this$0.getDefault();
                        int n = 31 * hc;
                        boolean bl = false;
                        Expr expr2 = expr;
                        int n2 = expr2 != null ? expr2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = searchedCase;
                        super(0);
                    }
                });
            }

            public /* synthetic */ SearchedCase(ExprPairList exprPairList, Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(exprPairList, expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u0010H\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "fields", "", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getFields", "()Ljava/util/List;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Struct
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<ExprPair> fields;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Struct.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Struct copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Struct(this.fields, metas);
            }

            @Override
            @NotNull
            public Struct withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Struct(this.fields, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"struct", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.fields;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    ExprPair exprPair = (ExprPair)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Struct copy(@NotNull java.util.List<ExprPair> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Struct(fields, metas);
            }

            public static /* synthetic */ Struct copy$default(Struct struct, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = struct.fields;
                }
                if ((n & 2) != 0) {
                    map2 = struct.getMetas();
                }
                return struct.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Struct.class) ^ true) {
                    return false;
                }
                Struct cfr_ignored_0 = (Struct)other;
                return !(Intrinsics.areEqual(this.fields, ((Struct)other).fields) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Struct struct = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<ExprPair> getFields() {
                return this.fields;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Struct(@NotNull java.util.List<ExprPair> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.fields = fields;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Struct this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getFields()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = struct;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Struct(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "values", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValues", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Bag
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> values;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Bag.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Bag copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Bag(this.values, metas);
            }

            @Override
            @NotNull
            public Bag withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Bag(this.values, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"bag", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.values;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Bag copy(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Bag(values2, metas);
            }

            public static /* synthetic */ Bag copy$default(Bag bag, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = bag.values;
                }
                if ((n & 2) != 0) {
                    map2 = bag.getMetas();
                }
                return bag.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Bag.class) ^ true) {
                    return false;
                }
                Bag cfr_ignored_0 = (Bag)other;
                return !(Intrinsics.areEqual(this.values, ((Bag)other).values) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Bag bag = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getValues() {
                return this.values;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Bag(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.values = values2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Bag this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getValues()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = bag;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Bag(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "values", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValues", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class List
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> values;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(List.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public List copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new List(this.values, metas);
            }

            @Override
            @NotNull
            public List withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new List(this.values, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"list", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.values;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final List copy(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new List(values2, metas);
            }

            public static /* synthetic */ List copy$default(List list, java.util.List list2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list2 = list.values;
                }
                if ((n & 2) != 0) {
                    map2 = list.getMetas();
                }
                return list.copy(list2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), List.class) ^ true) {
                    return false;
                }
                List cfr_ignored_0 = (List)other;
                return !(Intrinsics.areEqual(this.values, ((List)other).values) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                List list = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getValues() {
                return this.values;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public List(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.values = values2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ List this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getValues()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = list;
                        super(0);
                    }
                });
            }

            public /* synthetic */ List(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J0\u0010\u0014\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "values", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValues", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Sexp
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final java.util.List<Expr> values;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Sexp.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Sexp copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Sexp(this.values, metas);
            }

            @Override
            @NotNull
            public Sexp withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Sexp(this.values, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"sexp", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.values;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Sexp copy(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Sexp(values2, metas);
            }

            public static /* synthetic */ Sexp copy$default(Sexp sexp, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = sexp.values;
                }
                if ((n & 2) != 0) {
                    map2 = sexp.getMetas();
                }
                return sexp.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Sexp.class) ^ true) {
                    return false;
                }
                Sexp cfr_ignored_0 = (Sexp)other;
                return !(Intrinsics.areEqual(this.values, ((Sexp)other).values) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Sexp sexp = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final java.util.List<Expr> getValues() {
                return this.values;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Sexp(@NotNull java.util.List<? extends Expr> values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.values = values2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Sexp this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getValues()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = sexp;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Sexp(java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\b\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B7\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J>\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00032\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0012H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0005\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\rR\u001b\u0010\u0011\u001a\u00020\u00128BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0015\u0010\u0016\u001a\u0004\b\u0013\u0010\u0014R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\r\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "year", "Lorg/partiql/pig/runtime/LongPrimitive;", "month", "day", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getDay", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getMetas", "()Ljava/util/Map;", "getMonth", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getYear", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Date
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final LongPrimitive year;
            @NotNull
            private final LongPrimitive month;
            @NotNull
            private final LongPrimitive day;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Date.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Date copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Date(this.year, this.month, this.day, metas);
            }

            @Override
            @NotNull
            public Date withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Date(this.year, this.month, this.day, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"date", null, null, (int)6, null), this.year.toIonElement(), this.month.toIonElement(), this.day.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Date copy(@NotNull LongPrimitive year2, @NotNull LongPrimitive month, @NotNull LongPrimitive day, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(year2, "year");
                Intrinsics.checkParameterIsNotNull(month, "month");
                Intrinsics.checkParameterIsNotNull(day, "day");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Date(year2, month, day, metas);
            }

            public static /* synthetic */ Date copy$default(Date date, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = date.year;
                }
                if ((n & 2) != 0) {
                    longPrimitive2 = date.month;
                }
                if ((n & 4) != 0) {
                    longPrimitive3 = date.day;
                }
                if ((n & 8) != 0) {
                    map2 = date.getMetas();
                }
                return date.copy(longPrimitive, longPrimitive2, longPrimitive3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Date.class) ^ true) {
                    return false;
                }
                Date cfr_ignored_0 = (Date)other;
                if (Intrinsics.areEqual(this.year, ((Date)other).year) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.month, ((Date)other).month) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.day, ((Date)other).day) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Date date = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final LongPrimitive getYear() {
                return this.year;
            }

            @NotNull
            public final LongPrimitive getMonth() {
                return this.month;
            }

            @NotNull
            public final LongPrimitive getDay() {
                return this.day;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Date(@NotNull LongPrimitive year2, @NotNull LongPrimitive month, @NotNull LongPrimitive day, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(year2, "year");
                Intrinsics.checkParameterIsNotNull(month, "month");
                Intrinsics.checkParameterIsNotNull(day, "day");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.year = year2;
                this.month = month;
                this.day = day;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Date this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getYear().hashCode();
                        hc = 31 * hc + this.this$0.getMonth().hashCode();
                        hc = 31 * hc + this.this$0.getDay().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = date;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Date(LongPrimitive longPrimitive, LongPrimitive longPrimitive2, LongPrimitive longPrimitive3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, longPrimitive2, longPrimitive3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$TimeValue;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValue", "()Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class LitTime
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final TimeValue value;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(LitTime.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public LitTime copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new LitTime(this.value, metas);
            }

            @Override
            @NotNull
            public LitTime withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new LitTime(this.value, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"lit_time", null, null, (int)6, null), (IonElement)this.value.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final LitTime copy(@NotNull TimeValue value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new LitTime(value, metas);
            }

            public static /* synthetic */ LitTime copy$default(LitTime litTime, TimeValue timeValue, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    timeValue = litTime.value;
                }
                if ((n & 2) != 0) {
                    map2 = litTime.getMetas();
                }
                return litTime.copy(timeValue, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), LitTime.class) ^ true) {
                    return false;
                }
                LitTime cfr_ignored_0 = (LitTime)other;
                return !(Intrinsics.areEqual(this.value, ((LitTime)other).value) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                LitTime litTime = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final TimeValue getValue() {
                return this.value;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public LitTime(@NotNull TimeValue value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ LitTime this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = litTime;
                        super(0);
                    }
                });
            }

            public /* synthetic */ LitTime(TimeValue timeValue, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(timeValue, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J:\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u000fH\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "getSetq", "()Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Union
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SetQuantifier setq;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Union.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Union copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Union(this.setq, this.operands, metas);
            }

            @Override
            @NotNull
            public Union withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Union(this.setq, this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"union", null, null, (int)6, null));
                spreadBuilder.add((IonElement)this.setq.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Union copy(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Union(setq2, operands, metas);
            }

            public static /* synthetic */ Union copy$default(Union union, SetQuantifier setQuantifier, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    setQuantifier = union.setq;
                }
                if ((n & 2) != 0) {
                    list = union.operands;
                }
                if ((n & 4) != 0) {
                    map2 = union.getMetas();
                }
                return union.copy(setQuantifier, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Union.class) ^ true) {
                    return false;
                }
                Union cfr_ignored_0 = (Union)other;
                if (Intrinsics.areEqual(this.setq, ((Union)other).setq) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.operands, ((Union)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Union union = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SetQuantifier getSetq() {
                return this.setq;
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Union(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.setq = setq2;
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Union this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getSetq().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = union;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Union(SetQuantifier setQuantifier, java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(setQuantifier, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J:\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u000fH\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "getSetq", "()Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Except
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SetQuantifier setq;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Except.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Except copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Except(this.setq, this.operands, metas);
            }

            @Override
            @NotNull
            public Except withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Except(this.setq, this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"except", null, null, (int)6, null));
                spreadBuilder.add((IonElement)this.setq.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Except copy(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Except(setq2, operands, metas);
            }

            public static /* synthetic */ Except copy$default(Except except, SetQuantifier setQuantifier, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    setQuantifier = except.setq;
                }
                if ((n & 2) != 0) {
                    list = except.operands;
                }
                if ((n & 4) != 0) {
                    map2 = except.getMetas();
                }
                return except.copy(setQuantifier, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Except.class) ^ true) {
                    return false;
                }
                Except cfr_ignored_0 = (Except)other;
                if (Intrinsics.areEqual(this.setq, ((Except)other).setq) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.operands, ((Except)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Except except = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SetQuantifier getSetq() {
                return this.setq;
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Except(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.setq = setq2;
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Except this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getSetq().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = except;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Except(SetQuantifier setQuantifier, java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(setQuantifier, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J:\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u000fH\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "operands", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOperands", "()Ljava/util/List;", "getSetq", "()Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Intersect
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SetQuantifier setq;
            @NotNull
            private final java.util.List<Expr> operands;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Intersect.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Intersect copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Intersect(this.setq, this.operands, metas);
            }

            @Override
            @NotNull
            public Intersect withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Intersect(this.setq, this.operands, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"intersect", null, null, (int)6, null));
                spreadBuilder.add((IonElement)this.setq.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.operands;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Intersect copy(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Intersect(setq2, operands, metas);
            }

            public static /* synthetic */ Intersect copy$default(Intersect intersect, SetQuantifier setQuantifier, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    setQuantifier = intersect.setq;
                }
                if ((n & 2) != 0) {
                    list = intersect.operands;
                }
                if ((n & 4) != 0) {
                    map2 = intersect.getMetas();
                }
                return intersect.copy(setQuantifier, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Intersect.class) ^ true) {
                    return false;
                }
                Intersect cfr_ignored_0 = (Intersect)other;
                if (Intrinsics.areEqual(this.setq, ((Intersect)other).setq) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.operands, ((Intersect)other).operands) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Intersect intersect = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SetQuantifier getSetq() {
                return this.setq;
            }

            @NotNull
            public final java.util.List<Expr> getOperands() {
                return this.operands;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Intersect(@NotNull SetQuantifier setq2, @NotNull java.util.List<? extends Expr> operands, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(operands, "operands");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.setq = setq2;
                this.operands = operands;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Intersect this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getSetq().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getOperands()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = intersect;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Intersect(SetQuantifier setQuantifier, java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(setQuantifier, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J:\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\u000e\b\u0002\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u00042\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u000fH\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u0017\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0016\u0010\u0017\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "root", "steps", "", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getRoot", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getSteps", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Path
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr root;
            @NotNull
            private final java.util.List<PathStep> steps;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Path.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Path copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Path(this.root, this.steps, metas);
            }

            @Override
            @NotNull
            public Path withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Path(this.root, this.steps, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"path", null, null, (int)6, null));
                spreadBuilder.add((IonElement)this.root.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.steps;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    PathStep pathStep = (PathStep)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Path copy(@NotNull Expr root, @NotNull java.util.List<? extends PathStep> steps, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(root, "root");
                Intrinsics.checkParameterIsNotNull(steps, "steps");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Path(root, steps, metas);
            }

            public static /* synthetic */ Path copy$default(Path path, Expr expr, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = path.root;
                }
                if ((n & 2) != 0) {
                    list = path.steps;
                }
                if ((n & 4) != 0) {
                    map2 = path.getMetas();
                }
                return path.copy(expr, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Path.class) ^ true) {
                    return false;
                }
                Path cfr_ignored_0 = (Path)other;
                if (Intrinsics.areEqual(this.root, ((Path)other).root) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.steps, ((Path)other).steps) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Path path = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getRoot() {
                return this.root;
            }

            @NotNull
            public final java.util.List<PathStep> getSteps() {
                return this.steps;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Path(@NotNull Expr root, @NotNull java.util.List<? extends PathStep> steps, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(root, "root");
                Intrinsics.checkParameterIsNotNull(steps, "steps");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.root = root;
                this.steps = steps;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Path this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getRoot().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getSteps()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = path;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Path(Expr expr, java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J:\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "funcName", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "args", "", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/List;Ljava/util/Map;)V", "getArgs", "()Ljava/util/List;", "getFuncName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Call
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SymbolPrimitive funcName;
            @NotNull
            private final java.util.List<Expr> args;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Call.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Call copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Call(this.funcName, this.args, metas);
            }

            @Override
            @NotNull
            public Call withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Call(this.funcName, this.args, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"call", null, null, (int)6, null));
                spreadBuilder.add(this.funcName.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.args;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                java.util.List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (java.util.List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                java.util.List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final Call copy(@NotNull SymbolPrimitive funcName, @NotNull java.util.List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Call(funcName, args2, metas);
            }

            public static /* synthetic */ Call copy$default(Call call, SymbolPrimitive symbolPrimitive, java.util.List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    symbolPrimitive = call.funcName;
                }
                if ((n & 2) != 0) {
                    list = call.args;
                }
                if ((n & 4) != 0) {
                    map2 = call.getMetas();
                }
                return call.copy(symbolPrimitive, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Call.class) ^ true) {
                    return false;
                }
                Call cfr_ignored_0 = (Call)other;
                if (Intrinsics.areEqual(this.funcName, ((Call)other).funcName) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.args, ((Call)other).args) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Call call = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SymbolPrimitive getFuncName() {
                return this.funcName;
            }

            @NotNull
            public final java.util.List<Expr> getArgs() {
                return this.args;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Call(@NotNull SymbolPrimitive funcName, @NotNull java.util.List<? extends Expr> args2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(args2, "args");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.funcName = funcName;
                this.args = args2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Call this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getFuncName().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getArgs()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = call;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Call(SymbolPrimitive symbolPrimitive, java.util.List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(symbolPrimitive, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000D\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B7\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0001\u0012\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000b\u00a2\u0006\u0002\u0010\fJ \u0010\u001b\u001a\u00020\u00002\u0016\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bH\u0016J>\u0010\u001b\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\b\b\u0002\u0010\u0006\u001a\u00020\u00012\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bJ\u0013\u0010\u001c\u001a\u00020\u001d2\b\u0010\u001e\u001a\u0004\u0018\u00010\nH\u0096\u0002J\b\u0010\u001f\u001a\u00020\u0014H\u0016J\b\u0010 \u001a\u00020!H\u0016J\u0018\u0010\"\u001a\u00020\u00002\u0006\u0010#\u001a\u00020\t2\u0006\u0010$\u001a\u00020\nH\u0016R\u0011\u0010\u0006\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R$\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u001b\u0010\u0013\u001a\u00020\u00148BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0017\u0010\u0018\u001a\u0004\b\u0015\u0010\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0019\u0010\u001a\u00a8\u0006%"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "funcName", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "arg", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getArg", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getFuncName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getSetq", "()Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CallAgg
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SetQuantifier setq;
            @NotNull
            private final SymbolPrimitive funcName;
            @NotNull
            private final Expr arg;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(CallAgg.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public CallAgg copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CallAgg(this.setq, this.funcName, this.arg, metas);
            }

            @Override
            @NotNull
            public CallAgg withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CallAgg(this.setq, this.funcName, this.arg, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"call_agg", null, null, (int)6, null), (IonElement)this.setq.toIonElement(), this.funcName.toIonElement(), (IonElement)this.arg.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final CallAgg copy(@NotNull SetQuantifier setq2, @NotNull SymbolPrimitive funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(arg, "arg");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CallAgg(setq2, funcName, arg, metas);
            }

            public static /* synthetic */ CallAgg copy$default(CallAgg callAgg, SetQuantifier setQuantifier, SymbolPrimitive symbolPrimitive, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    setQuantifier = callAgg.setq;
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = callAgg.funcName;
                }
                if ((n & 4) != 0) {
                    expr = callAgg.arg;
                }
                if ((n & 8) != 0) {
                    map2 = callAgg.getMetas();
                }
                return callAgg.copy(setQuantifier, symbolPrimitive, expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), CallAgg.class) ^ true) {
                    return false;
                }
                CallAgg cfr_ignored_0 = (CallAgg)other;
                if (Intrinsics.areEqual(this.setq, ((CallAgg)other).setq) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.funcName, ((CallAgg)other).funcName) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.arg, ((CallAgg)other).arg) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                CallAgg callAgg = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SetQuantifier getSetq() {
                return this.setq;
            }

            @NotNull
            public final SymbolPrimitive getFuncName() {
                return this.funcName;
            }

            @NotNull
            public final Expr getArg() {
                return this.arg;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CallAgg(@NotNull SetQuantifier setq2, @NotNull SymbolPrimitive funcName, @NotNull Expr arg, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(setq2, "setq");
                Intrinsics.checkParameterIsNotNull(funcName, "funcName");
                Intrinsics.checkParameterIsNotNull(arg, "arg");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.setq = setq2;
                this.funcName = funcName;
                this.arg = arg;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ CallAgg this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getSetq().hashCode();
                        hc = 31 * hc + this.this$0.getFuncName().hashCode();
                        hc = 31 * hc + this.this$0.getArg().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = callAgg;
                        super(0);
                    }
                });
            }

            public /* synthetic */ CallAgg(SetQuantifier setQuantifier, SymbolPrimitive symbolPrimitive, Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 8) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(setQuantifier, symbolPrimitive, expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0001\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0017\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0017\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00012\b\b\u0002\u0010\u0003\u001a\u00020\u00042\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0018\u001a\u00020\u00192\b\u0010\u001a\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001b\u001a\u00020\u0010H\u0016J\b\u0010\u001c\u001a\u00020\u001dH\u0016J\u0018\u0010\u001e\u001a\u00020\u00002\u0006\u0010\u001f\u001a\u00020\u00072\u0006\u0010 \u001a\u00020\bH\u0016R\u0011\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0002\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0016\u00a8\u0006!"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "asType", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Type;Ljava/util/Map;)V", "getAsType", "()Lorg/partiql/lang/domains/PartiqlAst$Type;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValue", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Cast
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Type asType;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Cast.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Cast copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Cast(this.value, this.asType, metas);
            }

            @Override
            @NotNull
            public Cast withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Cast(this.value, this.asType, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"cast", null, null, (int)6, null), (IonElement)this.value.toIonElement(), (IonElement)this.asType.toIonElement()};
                java.util.List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Cast copy(@NotNull Expr value, @NotNull Type asType, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(asType, "asType");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Cast(value, asType, metas);
            }

            public static /* synthetic */ Cast copy$default(Cast cast2, Expr expr, Type type, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = cast2.value;
                }
                if ((n & 2) != 0) {
                    type = cast2.asType;
                }
                if ((n & 4) != 0) {
                    map2 = cast2.getMetas();
                }
                return cast2.copy(expr, type, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Cast.class) ^ true) {
                    return false;
                }
                Cast cfr_ignored_0 = (Cast)other;
                if (Intrinsics.areEqual(this.value, ((Cast)other).value) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.asType, ((Cast)other).asType) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Cast cast2 = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @NotNull
            public final Type getAsType() {
                return this.asType;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Cast(@NotNull Expr value, @NotNull Type asType, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(asType, "asType");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.asType = asType;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Cast this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        hc = 31 * hc + this.this$0.getAsType().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = cast2;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Cast(Expr expr, Type type, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, type, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000`\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\r\n\u0002\u0010\b\n\u0002\b\r\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001Bu\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\b\u0010\b\u001a\u0004\u0018\u00010\t\u0012\b\u0010\n\u001a\u0004\u0018\u00010\u0001\u0012\b\u0010\u000b\u001a\u0004\u0018\u00010\f\u0012\b\u0010\r\u001a\u0004\u0018\u00010\u0001\u0012\b\u0010\u000e\u001a\u0004\u0018\u00010\u000f\u0012\b\u0010\u0010\u001a\u0004\u0018\u00010\u0001\u0012\u0018\b\u0002\u0010\u0011\u001a\u0012\u0012\u0004\u0012\u00020\u0013\u0012\u0004\u0012\u00020\u00140\u0012j\u0002`\u0015\u00a2\u0006\u0002\u0010\u0016J \u0010/\u001a\u00020\u00002\u0016\u0010\u0011\u001a\u0012\u0012\u0004\u0012\u00020\u0013\u0012\u0004\u0012\u00020\u00140\u0012j\u0002`\u0015H\u0016J\u0088\u0001\u0010/\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\b\b\u0002\u0010\u0006\u001a\u00020\u00072\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\t2\n\b\u0002\u0010\n\u001a\u0004\u0018\u00010\u00012\n\b\u0002\u0010\u000b\u001a\u0004\u0018\u00010\f2\n\b\u0002\u0010\r\u001a\u0004\u0018\u00010\u00012\n\b\u0002\u0010\u000e\u001a\u0004\u0018\u00010\u000f2\n\b\u0002\u0010\u0010\u001a\u0004\u0018\u00010\u00012\u0018\b\u0002\u0010\u0011\u001a\u0012\u0012\u0004\u0012\u00020\u0013\u0012\u0004\u0012\u00020\u00140\u0012j\u0002`\u0015J\u0013\u00100\u001a\u0002012\b\u00102\u001a\u0004\u0018\u00010\u0014H\u0096\u0002J\b\u00103\u001a\u00020#H\u0016J\b\u00104\u001a\u000205H\u0016J\u0018\u00106\u001a\u00020\u00002\u0006\u00107\u001a\u00020\u00132\u0006\u00108\u001a\u00020\u0014H\u0016R\u0011\u0010\u0006\u001a\u00020\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0017\u0010\u0018R\u0013\u0010\b\u001a\u0004\u0018\u00010\t\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0019\u0010\u001aR\u0013\u0010\u000b\u001a\u0004\u0018\u00010\f\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001b\u0010\u001cR\u0013\u0010\r\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001d\u0010\u001eR\u0013\u0010\u0010\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001f\u0010\u001eR$\u0010\u0011\u001a\u0012\u0012\u0004\u0012\u00020\u0013\u0012\u0004\u0012\u00020\u00140\u0012j\u0002`\u0015X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b \u0010!R\u001b\u0010\"\u001a\u00020#8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b&\u0010'\u001a\u0004\b$\u0010%R\u0013\u0010\u000e\u001a\u0004\u0018\u00010\u000f\u00a2\u0006\b\n\u0000\u001a\u0004\b(\u0010)R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b*\u0010+R\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b,\u0010-R\u0013\u0010\n\u001a\u0004\u0018\u00010\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b.\u0010\u001e\u00a8\u00069"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "project", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "from", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "fromLet", "Lorg/partiql/lang/domains/PartiqlAst$Let;", "where", "group", "Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "having", "order", "Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "limit", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Lorg/partiql/lang/domains/PartiqlAst$Projection;Lorg/partiql/lang/domains/PartiqlAst$FromSource;Lorg/partiql/lang/domains/PartiqlAst$Let;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$GroupBy;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$OrderBy;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getFrom", "()Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "getFromLet", "()Lorg/partiql/lang/domains/PartiqlAst$Let;", "getGroup", "()Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "getHaving", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getLimit", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOrder", "()Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "getProject", "()Lorg/partiql/lang/domains/PartiqlAst$Projection;", "getSetq", "()Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "getWhere", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Select
        extends Expr {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final SetQuantifier setq;
            @NotNull
            private final Projection project;
            @NotNull
            private final FromSource from;
            @Nullable
            private final Let fromLet;
            @Nullable
            private final Expr where;
            @Nullable
            private final GroupBy group;
            @Nullable
            private final Expr having;
            @Nullable
            private final OrderBy order;
            @Nullable
            private final Expr limit;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Select.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Select copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Select(this.setq, this.project, this.from, this.fromLet, this.where, this.group, this.having, this.order, this.limit, metas);
            }

            @Override
            @NotNull
            public Select withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Select(this.setq, this.project, this.from, this.fromLet, this.where, this.group, this.having, this.order, this.limit, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                SexpElement sexpElement;
                SexpElement sexpElement2;
                SexpElement sexpElement3;
                SexpElement sexpElement4;
                SexpElement sexpElement5;
                SexpElement sexpElement6;
                SexpElement sexpElement7;
                SexpElement sexpElement8;
                SexpElement sexpElement9;
                SexpElement sexpElement10;
                SetQuantifier it;
                boolean bl;
                boolean bl2;
                IonElement[] ionElementArray;
                IonElement[] ionElementArray2;
                int n;
                PartiqlAstNode partiqlAstNode;
                IonElement[] ionElementArray3 = new IonElement[10];
                ionElementArray3[0] = (IonElement)Ion.ionSymbol$default((String)"select", null, null, (int)6, null);
                IonElement[] ionElementArray4 = ionElementArray3;
                IonElement[] ionElementArray5 = ionElementArray3;
                int n2 = 1;
                SetQuantifier setQuantifier = this.setq;
                if (setQuantifier != null) {
                    partiqlAstNode = setQuantifier;
                    n = n2;
                    ionElementArray2 = ionElementArray4;
                    ionElementArray = ionElementArray5;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl3 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"setq", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray5 = ionElementArray;
                    ionElementArray4 = ionElementArray2;
                    n2 = n;
                    sexpElement9 = sexpElement10;
                } else {
                    sexpElement9 = null;
                }
                ionElementArray4[n2] = (IonElement)sexpElement9;
                IonElement[] ionElementArray6 = ionElementArray5;
                IonElement[] ionElementArray7 = ionElementArray5;
                int n3 = 2;
                Projection projection = this.project;
                if (projection != null) {
                    partiqlAstNode = projection;
                    n = n3;
                    ionElementArray2 = ionElementArray6;
                    ionElementArray = ionElementArray7;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl4 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"project", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray7 = ionElementArray;
                    ionElementArray6 = ionElementArray2;
                    n3 = n;
                    sexpElement8 = sexpElement10;
                } else {
                    sexpElement8 = null;
                }
                ionElementArray6[n3] = (IonElement)sexpElement8;
                IonElement[] ionElementArray8 = ionElementArray7;
                IonElement[] ionElementArray9 = ionElementArray7;
                int n4 = 3;
                FromSource fromSource = this.from;
                if (fromSource != null) {
                    partiqlAstNode = fromSource;
                    n = n4;
                    ionElementArray2 = ionElementArray8;
                    ionElementArray = ionElementArray9;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl5 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"from", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray9 = ionElementArray;
                    ionElementArray8 = ionElementArray2;
                    n4 = n;
                    sexpElement7 = sexpElement10;
                } else {
                    sexpElement7 = null;
                }
                ionElementArray8[n4] = (IonElement)sexpElement7;
                IonElement[] ionElementArray10 = ionElementArray9;
                IonElement[] ionElementArray11 = ionElementArray9;
                int n5 = 4;
                Let let2 = this.fromLet;
                if (let2 != null) {
                    partiqlAstNode = let2;
                    n = n5;
                    ionElementArray2 = ionElementArray10;
                    ionElementArray = ionElementArray11;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl6 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"from_let", null, null, (int)6, null), (IonElement)((Let)((Object)it)).toIonElement()}, null, null, (int)6, null);
                    ionElementArray11 = ionElementArray;
                    ionElementArray10 = ionElementArray2;
                    n5 = n;
                    sexpElement6 = sexpElement10;
                } else {
                    sexpElement6 = null;
                }
                ionElementArray10[n5] = (IonElement)sexpElement6;
                IonElement[] ionElementArray12 = ionElementArray11;
                IonElement[] ionElementArray13 = ionElementArray11;
                int n6 = 5;
                Expr expr = this.where;
                if (expr != null) {
                    partiqlAstNode = expr;
                    n = n6;
                    ionElementArray2 = ionElementArray12;
                    ionElementArray = ionElementArray13;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl7 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"where", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray13 = ionElementArray;
                    ionElementArray12 = ionElementArray2;
                    n6 = n;
                    sexpElement5 = sexpElement10;
                } else {
                    sexpElement5 = null;
                }
                ionElementArray12[n6] = (IonElement)sexpElement5;
                IonElement[] ionElementArray14 = ionElementArray13;
                IonElement[] ionElementArray15 = ionElementArray13;
                int n7 = 6;
                GroupBy groupBy2 = this.group;
                if (groupBy2 != null) {
                    partiqlAstNode = groupBy2;
                    n = n7;
                    ionElementArray2 = ionElementArray14;
                    ionElementArray = ionElementArray15;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl8 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"group", null, null, (int)6, null), (IonElement)((GroupBy)((Object)it)).toIonElement()}, null, null, (int)6, null);
                    ionElementArray15 = ionElementArray;
                    ionElementArray14 = ionElementArray2;
                    n7 = n;
                    sexpElement4 = sexpElement10;
                } else {
                    sexpElement4 = null;
                }
                ionElementArray14[n7] = (IonElement)sexpElement4;
                IonElement[] ionElementArray16 = ionElementArray15;
                IonElement[] ionElementArray17 = ionElementArray15;
                int n8 = 7;
                Expr expr2 = this.having;
                if (expr2 != null) {
                    partiqlAstNode = expr2;
                    n = n8;
                    ionElementArray2 = ionElementArray16;
                    ionElementArray = ionElementArray17;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl9 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"having", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray17 = ionElementArray;
                    ionElementArray16 = ionElementArray2;
                    n8 = n;
                    sexpElement3 = sexpElement10;
                } else {
                    sexpElement3 = null;
                }
                ionElementArray16[n8] = (IonElement)sexpElement3;
                IonElement[] ionElementArray18 = ionElementArray17;
                IonElement[] ionElementArray19 = ionElementArray17;
                int n9 = 8;
                OrderBy orderBy = this.order;
                if (orderBy != null) {
                    partiqlAstNode = orderBy;
                    n = n9;
                    ionElementArray2 = ionElementArray18;
                    ionElementArray = ionElementArray19;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl10 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"order", null, null, (int)6, null), (IonElement)((OrderBy)((Object)it)).toIonElement()}, null, null, (int)6, null);
                    ionElementArray19 = ionElementArray;
                    ionElementArray18 = ionElementArray2;
                    n9 = n;
                    sexpElement2 = sexpElement10;
                } else {
                    sexpElement2 = null;
                }
                ionElementArray18[n9] = (IonElement)sexpElement2;
                IonElement[] ionElementArray20 = ionElementArray19;
                IonElement[] ionElementArray21 = ionElementArray19;
                int n10 = 9;
                Expr expr3 = this.limit;
                if (expr3 != null) {
                    partiqlAstNode = expr3;
                    n = n10;
                    ionElementArray2 = ionElementArray20;
                    ionElementArray = ionElementArray21;
                    bl2 = false;
                    bl = false;
                    it = partiqlAstNode;
                    boolean bl11 = false;
                    sexpElement10 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"limit", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray21 = ionElementArray;
                    ionElementArray20 = ionElementArray2;
                    n10 = n;
                    sexpElement = sexpElement10;
                } else {
                    sexpElement = null;
                }
                ionElementArray20[n10] = (IonElement)sexpElement;
                java.util.List<IonElement> elements = CollectionsKt.listOfNotNull(ionElementArray21);
                return Ion.ionSexpOf$default((Iterable)elements, null, this.getMetas(), (int)2, null);
            }

            @NotNull
            public final Select copy(@Nullable SetQuantifier setq2, @NotNull Projection project2, @NotNull FromSource from2, @Nullable Let fromLet2, @Nullable Expr where2, @Nullable GroupBy group2, @Nullable Expr having2, @Nullable OrderBy order2, @Nullable Expr limit2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(project2, "project");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Select(setq2, project2, from2, fromLet2, where2, group2, having2, order2, limit2, metas);
            }

            public static /* synthetic */ Select copy$default(Select select, SetQuantifier setQuantifier, Projection projection, FromSource fromSource, Let let2, Expr expr, GroupBy groupBy2, Expr expr2, OrderBy orderBy, Expr expr3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    setQuantifier = select.setq;
                }
                if ((n & 2) != 0) {
                    projection = select.project;
                }
                if ((n & 4) != 0) {
                    fromSource = select.from;
                }
                if ((n & 8) != 0) {
                    let2 = select.fromLet;
                }
                if ((n & 0x10) != 0) {
                    expr = select.where;
                }
                if ((n & 0x20) != 0) {
                    groupBy2 = select.group;
                }
                if ((n & 0x40) != 0) {
                    expr2 = select.having;
                }
                if ((n & 0x80) != 0) {
                    orderBy = select.order;
                }
                if ((n & 0x100) != 0) {
                    expr3 = select.limit;
                }
                if ((n & 0x200) != 0) {
                    map2 = select.getMetas();
                }
                return select.copy(setQuantifier, projection, fromSource, let2, expr, groupBy2, expr2, orderBy, expr3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Select.class) ^ true) {
                    return false;
                }
                Select cfr_ignored_0 = (Select)other;
                if (Intrinsics.areEqual(this.setq, ((Select)other).setq) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.project, ((Select)other).project) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.from, ((Select)other).from) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.fromLet, ((Select)other).fromLet) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.where, ((Select)other).where) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.group, ((Select)other).group) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.having, ((Select)other).having) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.order, ((Select)other).order) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.limit, ((Select)other).limit) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Select select = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final SetQuantifier getSetq() {
                return this.setq;
            }

            @NotNull
            public final Projection getProject() {
                return this.project;
            }

            @NotNull
            public final FromSource getFrom() {
                return this.from;
            }

            @Nullable
            public final Let getFromLet() {
                return this.fromLet;
            }

            @Nullable
            public final Expr getWhere() {
                return this.where;
            }

            @Nullable
            public final GroupBy getGroup() {
                return this.group;
            }

            @Nullable
            public final Expr getHaving() {
                return this.having;
            }

            @Nullable
            public final OrderBy getOrder() {
                return this.order;
            }

            @Nullable
            public final Expr getLimit() {
                return this.limit;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Select(@Nullable SetQuantifier setq2, @NotNull Projection project2, @NotNull FromSource from2, @Nullable Let fromLet2, @Nullable Expr where2, @Nullable GroupBy group2, @Nullable Expr having2, @Nullable OrderBy order2, @Nullable Expr limit2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(project2, "project");
                Intrinsics.checkParameterIsNotNull(from2, "from");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.setq = setq2;
                this.project = project2;
                this.from = from2;
                this.fromLet = fromLet2;
                this.where = where2;
                this.group = group2;
                this.having = having2;
                this.order = order2;
                this.limit = limit2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Select this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        PartiqlAstNode partiqlAstNode = this.this$0.getSetq();
                        boolean bl = false;
                        SetQuantifier setQuantifier = partiqlAstNode;
                        int hc = setQuantifier != null ? setQuantifier.hashCode() : 0;
                        hc = 31 * hc + this.this$0.getProject().hashCode();
                        hc = 31 * hc + this.this$0.getFrom().hashCode();
                        partiqlAstNode = this.this$0.getFromLet();
                        int n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode2 = partiqlAstNode;
                        int n2 = partiqlAstNode2 != null ? partiqlAstNode2.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getWhere();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode3 = partiqlAstNode;
                        n2 = partiqlAstNode3 != null ? partiqlAstNode3.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getGroup();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode4 = partiqlAstNode;
                        n2 = partiqlAstNode4 != null ? partiqlAstNode4.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getHaving();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode5 = partiqlAstNode;
                        n2 = partiqlAstNode5 != null ? partiqlAstNode5.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getOrder();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode6 = partiqlAstNode;
                        n2 = partiqlAstNode6 != null ? partiqlAstNode6.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getLimit();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode7 = partiqlAstNode;
                        n2 = partiqlAstNode7 != null ? partiqlAstNode7.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = select;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Select(SetQuantifier setQuantifier, Projection projection, FromSource fromSource, Let let2, Expr expr, GroupBy groupBy2, Expr expr2, OrderBy orderBy, Expr expr3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x200) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(setQuantifier, projection, fromSource, let2, expr, groupBy2, expr2, orderBy, expr3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u00de\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012J\u0015\u0010\u0013\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0014H&\u00a2\u0006\u0002\u0010\u0015J\u0015\u0010\u0016\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0017H&\u00a2\u0006\u0002\u0010\u0018J\u0015\u0010\u0019\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u001aH&\u00a2\u0006\u0002\u0010\u001bJ\u0015\u0010\u001c\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u001dH&\u00a2\u0006\u0002\u0010\u001eJ\u0015\u0010\u001f\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020 H&\u00a2\u0006\u0002\u0010!J\u0015\u0010\"\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020#H&\u00a2\u0006\u0002\u0010$J\u0015\u0010%\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020&H&\u00a2\u0006\u0002\u0010'J\u0015\u0010(\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020)H&\u00a2\u0006\u0002\u0010*J\u0015\u0010+\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020,H&\u00a2\u0006\u0002\u0010-J\u0015\u0010.\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020/H&\u00a2\u0006\u0002\u00100J\u0015\u00101\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000202H&\u00a2\u0006\u0002\u00103J\u0015\u00104\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000205H&\u00a2\u0006\u0002\u00106J\u0015\u00107\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000208H&\u00a2\u0006\u0002\u00109J\u0015\u0010:\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020;H&\u00a2\u0006\u0002\u0010<J\u0015\u0010=\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020>H&\u00a2\u0006\u0002\u0010?J\u0015\u0010@\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020AH&\u00a2\u0006\u0002\u0010BJ\u0015\u0010C\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020DH&\u00a2\u0006\u0002\u0010EJ\u0015\u0010F\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020GH&\u00a2\u0006\u0002\u0010HJ\u0015\u0010I\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020JH&\u00a2\u0006\u0002\u0010KJ\u0015\u0010L\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020MH&\u00a2\u0006\u0002\u0010NJ\u0015\u0010O\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020PH&\u00a2\u0006\u0002\u0010QJ\u0015\u0010R\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020SH&\u00a2\u0006\u0002\u0010TJ\u0015\u0010U\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020VH&\u00a2\u0006\u0002\u0010WJ\u0015\u0010X\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020YH&\u00a2\u0006\u0002\u0010ZJ\u0015\u0010[\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\\H&\u00a2\u0006\u0002\u0010]J\u0015\u0010^\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020_H&\u00a2\u0006\u0002\u0010`J\u0015\u0010a\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020bH&\u00a2\u0006\u0002\u0010cJ\u0015\u0010d\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020eH&\u00a2\u0006\u0002\u0010fJ\u0015\u0010g\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020hH&\u00a2\u0006\u0002\u0010iJ\u0015\u0010j\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020kH&\u00a2\u0006\u0002\u0010lJ\u0015\u0010m\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020nH&\u00a2\u0006\u0002\u0010oJ\u0015\u0010p\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020qH&\u00a2\u0006\u0002\u0010rJ\u0015\u0010s\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020tH&\u00a2\u0006\u0002\u0010uJ\u0015\u0010v\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020wH&\u00a2\u0006\u0002\u0010xJ\u0015\u0010y\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020zH&\u00a2\u0006\u0002\u0010{J\u0015\u0010|\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020}H&\u00a2\u0006\u0002\u0010~J\u0017\u0010\u007f\u001a\u00028\u00002\u0007\u0010\u0004\u001a\u00030\u0080\u0001H&\u00a2\u0006\u0003\u0010\u0081\u0001\u00a8\u0006\u0082\u0001"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Expr$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;)Ljava/lang/Object;", "convertAnd", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$And;)Ljava/lang/Object;", "convertBag", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;)Ljava/lang/Object;", "convertBetween", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;)Ljava/lang/Object;", "convertCall", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;)Ljava/lang/Object;", "convertCallAgg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;)Ljava/lang/Object;", "convertCast", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;)Ljava/lang/Object;", "convertConcat", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;)Ljava/lang/Object;", "convertDate", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;)Ljava/lang/Object;", "convertDivide", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;)Ljava/lang/Object;", "convertEq", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;)Ljava/lang/Object;", "convertExcept", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;)Ljava/lang/Object;", "convertGt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;)Ljava/lang/Object;", "convertGte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;)Ljava/lang/Object;", "convertId", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;)Ljava/lang/Object;", "convertInCollection", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;)Ljava/lang/Object;", "convertIntersect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;)Ljava/lang/Object;", "convertIsType", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;)Ljava/lang/Object;", "convertLike", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;)Ljava/lang/Object;", "convertList", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$List;)Ljava/lang/Object;", "convertLit", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;)Ljava/lang/Object;", "convertLitTime", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;)Ljava/lang/Object;", "convertLt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;)Ljava/lang/Object;", "convertLte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;)Ljava/lang/Object;", "convertMinus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;)Ljava/lang/Object;", "convertMissing", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;)Ljava/lang/Object;", "convertModulo", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;)Ljava/lang/Object;", "convertNe", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;)Ljava/lang/Object;", "convertNeg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;)Ljava/lang/Object;", "convertNot", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;)Ljava/lang/Object;", "convertOr", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;)Ljava/lang/Object;", "convertParameter", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;)Ljava/lang/Object;", "convertPath", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;)Ljava/lang/Object;", "convertPlus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;)Ljava/lang/Object;", "convertPos", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;)Ljava/lang/Object;", "convertSearchedCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;)Ljava/lang/Object;", "convertSelect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;)Ljava/lang/Object;", "convertSexp", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;)Ljava/lang/Object;", "convertSimpleCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;)Ljava/lang/Object;", "convertStruct", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;)Ljava/lang/Object;", "convertTimes", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;)Ljava/lang/Object;", "convertUnion", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull Expr var1);

            public T convertMissing(@NotNull Missing var1);

            public T convertLit(@NotNull Lit var1);

            public T convertId(@NotNull Id var1);

            public T convertParameter(@NotNull Parameter var1);

            public T convertNot(@NotNull Not var1);

            public T convertPos(@NotNull Pos var1);

            public T convertNeg(@NotNull Neg var1);

            public T convertPlus(@NotNull Plus var1);

            public T convertMinus(@NotNull Minus var1);

            public T convertTimes(@NotNull Times var1);

            public T convertDivide(@NotNull Divide var1);

            public T convertModulo(@NotNull Modulo var1);

            public T convertConcat(@NotNull Concat var1);

            public T convertAnd(@NotNull And var1);

            public T convertOr(@NotNull Or var1);

            public T convertEq(@NotNull Eq var1);

            public T convertNe(@NotNull Ne var1);

            public T convertGt(@NotNull Gt var1);

            public T convertGte(@NotNull Gte var1);

            public T convertLt(@NotNull Lt var1);

            public T convertLte(@NotNull Lte var1);

            public T convertLike(@NotNull Like var1);

            public T convertBetween(@NotNull Between var1);

            public T convertInCollection(@NotNull InCollection var1);

            public T convertIsType(@NotNull IsType var1);

            public T convertSimpleCase(@NotNull SimpleCase var1);

            public T convertSearchedCase(@NotNull SearchedCase var1);

            public T convertStruct(@NotNull Struct var1);

            public T convertBag(@NotNull Bag var1);

            public T convertList(@NotNull List var1);

            public T convertSexp(@NotNull Sexp var1);

            public T convertDate(@NotNull Date var1);

            public T convertLitTime(@NotNull LitTime var1);

            public T convertUnion(@NotNull Union var1);

            public T convertExcept(@NotNull Except var1);

            public T convertIntersect(@NotNull Intersect var1);

            public T convertPath(@NotNull Path var1);

            public T convertCall(@NotNull Call var1);

            public T convertCallAgg(@NotNull CallAgg var1);

            public T convertCast(@NotNull Cast var1);

            public T convertSelect(@NotNull Select var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull Expr node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    Expr expr = node;
                    if (expr instanceof Missing) {
                        t = $this.convertMissing((Missing)node);
                    } else if (expr instanceof Lit) {
                        t = $this.convertLit((Lit)node);
                    } else if (expr instanceof Id) {
                        t = $this.convertId((Id)node);
                    } else if (expr instanceof Parameter) {
                        t = $this.convertParameter((Parameter)node);
                    } else if (expr instanceof Not) {
                        t = $this.convertNot((Not)node);
                    } else if (expr instanceof Pos) {
                        t = $this.convertPos((Pos)node);
                    } else if (expr instanceof Neg) {
                        t = $this.convertNeg((Neg)node);
                    } else if (expr instanceof Plus) {
                        t = $this.convertPlus((Plus)node);
                    } else if (expr instanceof Minus) {
                        t = $this.convertMinus((Minus)node);
                    } else if (expr instanceof Times) {
                        t = $this.convertTimes((Times)node);
                    } else if (expr instanceof Divide) {
                        t = $this.convertDivide((Divide)node);
                    } else if (expr instanceof Modulo) {
                        t = $this.convertModulo((Modulo)node);
                    } else if (expr instanceof Concat) {
                        t = $this.convertConcat((Concat)node);
                    } else if (expr instanceof And) {
                        t = $this.convertAnd((And)node);
                    } else if (expr instanceof Or) {
                        t = $this.convertOr((Or)node);
                    } else if (expr instanceof Eq) {
                        t = $this.convertEq((Eq)node);
                    } else if (expr instanceof Ne) {
                        t = $this.convertNe((Ne)node);
                    } else if (expr instanceof Gt) {
                        t = $this.convertGt((Gt)node);
                    } else if (expr instanceof Gte) {
                        t = $this.convertGte((Gte)node);
                    } else if (expr instanceof Lt) {
                        t = $this.convertLt((Lt)node);
                    } else if (expr instanceof Lte) {
                        t = $this.convertLte((Lte)node);
                    } else if (expr instanceof Like) {
                        t = $this.convertLike((Like)node);
                    } else if (expr instanceof Between) {
                        t = $this.convertBetween((Between)node);
                    } else if (expr instanceof InCollection) {
                        t = $this.convertInCollection((InCollection)node);
                    } else if (expr instanceof IsType) {
                        t = $this.convertIsType((IsType)node);
                    } else if (expr instanceof SimpleCase) {
                        t = $this.convertSimpleCase((SimpleCase)node);
                    } else if (expr instanceof SearchedCase) {
                        t = $this.convertSearchedCase((SearchedCase)node);
                    } else if (expr instanceof Struct) {
                        t = $this.convertStruct((Struct)node);
                    } else if (expr instanceof Bag) {
                        t = $this.convertBag((Bag)node);
                    } else if (expr instanceof List) {
                        t = $this.convertList((List)node);
                    } else if (expr instanceof Sexp) {
                        t = $this.convertSexp((Sexp)node);
                    } else if (expr instanceof Date) {
                        t = $this.convertDate((Date)node);
                    } else if (expr instanceof LitTime) {
                        t = $this.convertLitTime((LitTime)node);
                    } else if (expr instanceof Union) {
                        t = $this.convertUnion((Union)node);
                    } else if (expr instanceof Except) {
                        t = $this.convertExcept((Except)node);
                    } else if (expr instanceof Intersect) {
                        t = $this.convertIntersect((Intersect)node);
                    } else if (expr instanceof Path) {
                        t = $this.convertPath((Path)node);
                    } else if (expr instanceof Call) {
                        t = $this.convertCall((Call)node);
                    } else if (expr instanceof CallAgg) {
                        t = $this.convertCallAgg((CallAgg)node);
                    } else if (expr instanceof Cast) {
                        t = $this.convertCast((Cast)node);
                    } else if (expr instanceof Select) {
                        t = $this.convertSelect((Select)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000,\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0004\u000b\f\r\u000eB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0003\u000f\u0010\u0011\u00a8\u0006\u0012"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "PathExpr", "PathUnpivot", "PathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "lang"})
    public static abstract class PathStep
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public PathStep copy(@NotNull Map<String, ? extends Object> metas) {
            PathStep pathStep;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            PathStep pathStep2 = this;
            if (pathStep2 instanceof PathExpr) {
                pathStep = (PathStep)((PathExpr)this).copy((Map)metas);
            } else if (pathStep2 instanceof PathWildcard) {
                pathStep = (PathStep)((PathWildcard)this).copy((Map)metas);
            } else if (pathStep2 instanceof PathUnpivot) {
                pathStep = (PathStep)((PathUnpivot)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return pathStep;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private PathStep(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ PathStep(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        /*
         * Illegal identifiers - consider using --renameillegalidents true
         */
        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J4\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "index", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "case", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;Ljava/util/Map;)V", "getCase", "()Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "getIndex", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class PathExpr
        extends PathStep {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr index;
            @NotNull
            private final CaseSensitivity case;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(PathExpr.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public PathExpr copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathExpr(this.index, this.case, metas);
            }

            @Override
            @NotNull
            public PathExpr withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new PathExpr(this.index, this.case, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"path_expr", null, null, (int)6, null), (IonElement)this.index.toIonElement(), (IonElement)this.case.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final PathExpr copy(@NotNull Expr index, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathExpr(index, caseSensitivity, metas);
            }

            public static /* synthetic */ PathExpr copy$default(PathExpr pathExpr, Expr expr, CaseSensitivity caseSensitivity, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = pathExpr.index;
                }
                if ((n & 2) != 0) {
                    caseSensitivity = pathExpr.case;
                }
                if ((n & 4) != 0) {
                    map2 = pathExpr.getMetas();
                }
                return pathExpr.copy(expr, caseSensitivity, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), PathExpr.class) ^ true) {
                    return false;
                }
                PathExpr cfr_ignored_0 = (PathExpr)other;
                if (Intrinsics.areEqual(this.index, ((PathExpr)other).index) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.case, ((PathExpr)other).case) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                PathExpr pathExpr = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getIndex() {
                return this.index;
            }

            @NotNull
            public final CaseSensitivity getCase() {
                return this.case;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public PathExpr(@NotNull Expr index, @NotNull CaseSensitivity caseSensitivity, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(index, "index");
                Intrinsics.checkParameterIsNotNull(caseSensitivity, "case");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.index = index;
                this.case = caseSensitivity;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ PathExpr this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getIndex().hashCode();
                        hc = 31 * hc + this.this$0.getCase().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = pathExpr;
                        super(0);
                    }
                });
            }

            public /* synthetic */ PathExpr(Expr expr, CaseSensitivity caseSensitivity, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, caseSensitivity, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class PathWildcard
        extends PathStep {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public PathWildcard copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathWildcard(metas);
            }

            @Override
            @NotNull
            public PathWildcard withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new PathWildcard(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"path_wildcard", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), PathWildcard.class) ^ true);
            }

            public int hashCode() {
                return 3001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public PathWildcard(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ PathWildcard(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public PathWildcard() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class PathUnpivot
        extends PathStep {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public PathUnpivot copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new PathUnpivot(metas);
            }

            @Override
            @NotNull
            public PathUnpivot withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new PathUnpivot(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"path_unpivot", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), PathUnpivot.class) ^ true);
            }

            public int hashCode() {
                return 3002;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public PathUnpivot(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ PathUnpivot(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public PathUnpivot() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000.\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$PathStep$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep;)Ljava/lang/Object;", "convertPathExpr", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;)Ljava/lang/Object;", "convertPathUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;)Ljava/lang/Object;", "convertPathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull PathStep var1);

            public T convertPathExpr(@NotNull PathExpr var1);

            public T convertPathWildcard(@NotNull PathWildcard var1);

            public T convertPathUnpivot(@NotNull PathUnpivot var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull PathStep node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    PathStep pathStep = node;
                    if (pathStep instanceof PathExpr) {
                        t = $this.convertPathExpr((PathExpr)node);
                    } else if (pathStep instanceof PathWildcard) {
                        t = $this.convertPathWildcard((PathWildcard)node);
                    } else if (pathStep instanceof PathUnpivot) {
                        t = $this.convertPathUnpivot((PathUnpivot)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u000b\f\r\u000e\u000fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0004\u0010\u0011\u0012\u0013\u00a8\u0006\u0014"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "ProjectList", "ProjectPivot", "ProjectStar", "ProjectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "lang"})
    public static abstract class Projection
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public Projection copy(@NotNull Map<String, ? extends Object> metas) {
            Projection projection;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            Projection projection2 = this;
            if (projection2 instanceof ProjectStar) {
                projection = (Projection)((ProjectStar)this).copy((Map)metas);
            } else if (projection2 instanceof ProjectList) {
                projection = (Projection)((ProjectList)this).copy((Map)metas);
            } else if (projection2 instanceof ProjectPivot) {
                projection = (Projection)((ProjectPivot)this).copy((Map)metas);
            } else if (projection2 instanceof ProjectValue) {
                projection = (Projection)((ProjectValue)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return projection;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private Projection(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ Projection(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectStar
        extends Projection {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ProjectStar copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectStar(metas);
            }

            @Override
            @NotNull
            public ProjectStar withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectStar(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"project_star", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ProjectStar.class) ^ true);
            }

            public int hashCode() {
                return 4000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectStar(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ProjectStar(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ProjectStar() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000@\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B-\u0012\f\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0015\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J0\u0010\u0015\u001a\u00020\u00002\u000e\b\u0002\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0016\u001a\u00020\u00172\b\u0010\u0018\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u0019\u001a\u00020\u000eH\u0016J\b\u0010\u001a\u001a\u00020\u001bH\u0016J\u0018\u0010\u001c\u001a\u00020\u00002\u0006\u0010\u001d\u001a\u00020\u00072\u0006\u0010\u001e\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0017\u0010\u0002\u001a\b\u0012\u0004\u0012\u00020\u00040\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014\u00a8\u0006\u001f"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "projectItems", "", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/List;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getProjectItems", "()Ljava/util/List;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectList
        extends Projection {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final List<ProjectItem> projectItems;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ProjectList.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ProjectList copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectList(this.projectItems, metas);
            }

            @Override
            @NotNull
            public ProjectList withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectList(this.projectItems, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(2);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"project_list", null, null, (int)6, null));
                IonElement[] ionElementArray = (IonElement[])this.projectItems;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    ProjectItem projectItem = (ProjectItem)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final ProjectList copy(@NotNull List<? extends ProjectItem> projectItems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectList(projectItems, metas);
            }

            public static /* synthetic */ ProjectList copy$default(ProjectList projectList, List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    list = projectList.projectItems;
                }
                if ((n & 2) != 0) {
                    map2 = projectList.getMetas();
                }
                return projectList.copy(list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ProjectList.class) ^ true) {
                    return false;
                }
                ProjectList cfr_ignored_0 = (ProjectList)other;
                return !(Intrinsics.areEqual(this.projectItems, ((ProjectList)other).projectItems) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ProjectList projectList = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final List<ProjectItem> getProjectItems() {
                return this.projectItems;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectList(@NotNull List<? extends ProjectItem> projectItems, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(projectItems, "projectItems");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.projectItems = projectItems;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ProjectList this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = ((Object)this.this$0.getProjectItems()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = projectList;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ProjectList(List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0016\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u0010H\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\f\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "value", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "key", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getKey", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValue", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectPivot
        extends Projection {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Expr key;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ProjectPivot.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ProjectPivot copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectPivot(this.value, this.key, metas);
            }

            @Override
            @NotNull
            public ProjectPivot withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectPivot(this.value, this.key, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"project_pivot", null, null, (int)6, null), (IonElement)this.value.toIonElement(), (IonElement)this.key.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final ProjectPivot copy(@NotNull Expr value, @NotNull Expr key, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(key, "key");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectPivot(value, key, metas);
            }

            public static /* synthetic */ ProjectPivot copy$default(ProjectPivot projectPivot, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = projectPivot.value;
                }
                if ((n & 2) != 0) {
                    expr2 = projectPivot.key;
                }
                if ((n & 4) != 0) {
                    map2 = projectPivot.getMetas();
                }
                return projectPivot.copy(expr, expr2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ProjectPivot.class) ^ true) {
                    return false;
                }
                ProjectPivot cfr_ignored_0 = (ProjectPivot)other;
                if (Intrinsics.areEqual(this.value, ((ProjectPivot)other).value) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.key, ((ProjectPivot)other).key) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ProjectPivot projectPivot = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @NotNull
            public final Expr getKey() {
                return this.key;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectPivot(@NotNull Expr value, @NotNull Expr key, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(key, "key");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.key = key;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ProjectPivot this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        hc = 31 * hc + this.this$0.getKey().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = projectPivot;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ProjectPivot(Expr expr, Expr expr2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, expr2, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "value", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getValue", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectValue
        extends Projection {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr value;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ProjectValue.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ProjectValue copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectValue(this.value, metas);
            }

            @Override
            @NotNull
            public ProjectValue withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectValue(this.value, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"project_value", null, null, (int)6, null), (IonElement)this.value.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final ProjectValue copy(@NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectValue(value, metas);
            }

            public static /* synthetic */ ProjectValue copy$default(ProjectValue projectValue, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = projectValue.value;
                }
                if ((n & 2) != 0) {
                    map2 = projectValue.getMetas();
                }
                return projectValue.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ProjectValue.class) ^ true) {
                    return false;
                }
                ProjectValue cfr_ignored_0 = (ProjectValue)other;
                return !(Intrinsics.areEqual(this.value, ((ProjectValue)other).value) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ProjectValue projectValue = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectValue(@NotNull Expr value, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.value = value;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ProjectValue this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getValue().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = projectValue;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ProjectValue(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012\u00a8\u0006\u0013"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Projection$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection;)Ljava/lang/Object;", "convertProjectList", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;)Ljava/lang/Object;", "convertProjectPivot", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;)Ljava/lang/Object;", "convertProjectStar", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;)Ljava/lang/Object;", "convertProjectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull Projection var1);

            public T convertProjectStar(@NotNull ProjectStar var1);

            public T convertProjectList(@NotNull ProjectList var1);

            public T convertProjectPivot(@NotNull ProjectPivot var1);

            public T convertProjectValue(@NotNull ProjectValue var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull Projection node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    Projection projection = node;
                    if (projection instanceof ProjectStar) {
                        t = $this.convertProjectStar((ProjectStar)node);
                    } else if (projection instanceof ProjectList) {
                        t = $this.convertProjectList((ProjectList)node);
                    } else if (projection instanceof ProjectPivot) {
                        t = $this.convertProjectPivot((ProjectPivot)node);
                    } else if (projection instanceof ProjectValue) {
                        t = $this.convertProjectValue((ProjectValue)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "ProjectAll", "ProjectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "lang"})
    public static abstract class ProjectItem
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public ProjectItem copy(@NotNull Map<String, ? extends Object> metas) {
            ProjectItem projectItem;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            ProjectItem projectItem2 = this;
            if (projectItem2 instanceof ProjectAll) {
                projectItem = (ProjectItem)((ProjectAll)this).copy((Map)metas);
            } else if (projectItem2 instanceof ProjectExpr) {
                projectItem = (ProjectItem)((ProjectExpr)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return projectItem;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private ProjectItem(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ ProjectItem(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectAll
        extends ProjectItem {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ProjectAll.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ProjectAll copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectAll(this.expr, metas);
            }

            @Override
            @NotNull
            public ProjectAll withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectAll(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"project_all", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final ProjectAll copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectAll(expr, metas);
            }

            public static /* synthetic */ ProjectAll copy$default(ProjectAll projectAll, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = projectAll.expr;
                }
                if ((n & 2) != 0) {
                    map2 = projectAll.getMetas();
                }
                return projectAll.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ProjectAll.class) ^ true) {
                    return false;
                }
                ProjectAll cfr_ignored_0 = (ProjectAll)other;
                return !(Intrinsics.areEqual(this.expr, ((ProjectAll)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ProjectAll projectAll = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectAll(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ProjectAll this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = projectAll;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ProjectAll(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000B\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B1\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n\u00a2\u0006\u0002\u0010\u000bJ \u0010\u0018\u001a\u00020\u00002\u0016\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nH\u0016J6\u0010\u0018\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\u0018\b\u0002\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nJ\u0013\u0010\u0019\u001a\u00020\u001a2\b\u0010\u001b\u001a\u0004\u0018\u00010\tH\u0096\u0002J\b\u0010\u001c\u001a\u00020\u0013H\u0016J\b\u0010\u001d\u001a\u00020\u001eH\u0016J\u0018\u0010\u001f\u001a\u00020\u00002\u0006\u0010 \u001a\u00020\b2\u0006\u0010!\u001a\u00020\tH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\nX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015\u00a8\u0006\""}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "asAlias", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getAsAlias", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ProjectExpr
        extends ProjectItem {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @Nullable
            private final SymbolPrimitive asAlias;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ProjectExpr.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ProjectExpr copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectExpr(this.expr, this.asAlias, metas);
            }

            @Override
            @NotNull
            public ProjectExpr withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ProjectExpr(this.expr, this.asAlias, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[3];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"project_expr", null, null, (int)6, null);
                ionElementArray[1] = (IonElement)this.expr.toIonElement();
                SymbolPrimitive symbolPrimitive = this.asAlias;
                if (symbolPrimitive == null || (symbolPrimitive = symbolPrimitive.toIonElement()) == null) {
                    symbolPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[2] = symbolPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final ProjectExpr copy(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ProjectExpr(expr, asAlias, metas);
            }

            public static /* synthetic */ ProjectExpr copy$default(ProjectExpr projectExpr, Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = projectExpr.expr;
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = projectExpr.asAlias;
                }
                if ((n & 4) != 0) {
                    map2 = projectExpr.getMetas();
                }
                return projectExpr.copy(expr, symbolPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ProjectExpr.class) ^ true) {
                    return false;
                }
                ProjectExpr cfr_ignored_0 = (ProjectExpr)other;
                if (Intrinsics.areEqual(this.expr, ((ProjectExpr)other).expr) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.asAlias, ((ProjectExpr)other).asAlias) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ProjectExpr projectExpr = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Nullable
            public final SymbolPrimitive getAsAlias() {
                return this.asAlias;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ProjectExpr(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.asAlias = asAlias;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ProjectExpr this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        SymbolPrimitive symbolPrimitive = this.this$0.getAsAlias();
                        int n = 31 * hc;
                        boolean bl = false;
                        SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                        int n2 = symbolPrimitive2 != null ? symbolPrimitive2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = projectExpr;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ProjectExpr(Expr expr, SymbolPrimitive symbolPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, symbolPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;)Ljava/lang/Object;", "convertProjectAll", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;)Ljava/lang/Object;", "convertProjectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull ProjectItem var1);

            public T convertProjectAll(@NotNull ProjectAll var1);

            public T convertProjectExpr(@NotNull ProjectExpr var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull ProjectItem node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    ProjectItem projectItem = node;
                    if (projectItem instanceof ProjectAll) {
                        t = $this.convertProjectAll((ProjectAll)node);
                    } else if (projectItem instanceof ProjectExpr) {
                        t = $this.convertProjectExpr((ProjectExpr)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000,\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0004\u000b\f\r\u000eB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0003\u000f\u0010\u0011\u00a8\u0006\u0012"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "Join", "Scan", "Unpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "lang"})
    public static abstract class FromSource
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public FromSource copy(@NotNull Map<String, ? extends Object> metas) {
            FromSource fromSource;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            FromSource fromSource2 = this;
            if (fromSource2 instanceof Scan) {
                fromSource = (FromSource)((Scan)this).copy((Map)metas);
            } else if (fromSource2 instanceof Unpivot) {
                fromSource = (FromSource)((Unpivot)this).copy((Map)metas);
            } else if (fromSource2 instanceof Join) {
                fromSource = (FromSource)((Join)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return fromSource;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private FromSource(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ FromSource(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000D\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BE\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0007\u001a\u0004\u0018\u00010\u0005\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001c\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016JN\u0010\u001c\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0007\u001a\u0004\u0018\u00010\u00052\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010 \u001a\u00020\u0017H\u0016J\b\u0010!\u001a\u00020\"H\u0016J\u0018\u0010#\u001a\u00020\u00002\u0006\u0010$\u001a\u00020\n2\u0006\u0010%\u001a\u00020\u000bH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u000fR\u0013\u0010\u0007\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013R$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u001b\u0010\u0016\u001a\u00020\u00178BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u001a\u0010\u001b\u001a\u0004\b\u0018\u0010\u0019\u00a8\u0006&"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "asAlias", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "atAlias", "byAlias", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getAsAlias", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getAtAlias", "getByAlias", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Scan
        extends FromSource {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @Nullable
            private final SymbolPrimitive asAlias;
            @Nullable
            private final SymbolPrimitive atAlias;
            @Nullable
            private final SymbolPrimitive byAlias;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Scan.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Scan copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Scan(this.expr, this.asAlias, this.atAlias, this.byAlias, metas);
            }

            @Override
            @NotNull
            public Scan withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Scan(this.expr, this.asAlias, this.atAlias, this.byAlias, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                SymbolPrimitive symbolPrimitive;
                SymbolPrimitive symbolPrimitive2;
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[5];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"scan", null, null, (int)6, null);
                ionElementArray[1] = (IonElement)this.expr.toIonElement();
                SymbolPrimitive symbolPrimitive3 = this.asAlias;
                if (symbolPrimitive3 == null || (symbolPrimitive3 = symbolPrimitive3.toIonElement()) == null) {
                    symbolPrimitive3 = ionElementArray[2] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((symbolPrimitive2 = this.atAlias) == null || (symbolPrimitive2 = symbolPrimitive2.toIonElement()) == null) {
                    symbolPrimitive2 = ionElementArray[3] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((symbolPrimitive = this.byAlias) == null || (symbolPrimitive = symbolPrimitive.toIonElement()) == null) {
                    symbolPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[4] = symbolPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final Scan copy(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Scan(expr, asAlias, atAlias, byAlias, metas);
            }

            public static /* synthetic */ Scan copy$default(Scan scan, Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = scan.expr;
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = scan.asAlias;
                }
                if ((n & 4) != 0) {
                    symbolPrimitive2 = scan.atAlias;
                }
                if ((n & 8) != 0) {
                    symbolPrimitive3 = scan.byAlias;
                }
                if ((n & 0x10) != 0) {
                    map2 = scan.getMetas();
                }
                return scan.copy(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Scan.class) ^ true) {
                    return false;
                }
                Scan cfr_ignored_0 = (Scan)other;
                if (Intrinsics.areEqual(this.expr, ((Scan)other).expr) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.asAlias, ((Scan)other).asAlias) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.atAlias, ((Scan)other).atAlias) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.byAlias, ((Scan)other).byAlias) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Scan scan = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Nullable
            public final SymbolPrimitive getAsAlias() {
                return this.asAlias;
            }

            @Nullable
            public final SymbolPrimitive getAtAlias() {
                return this.atAlias;
            }

            @Nullable
            public final SymbolPrimitive getByAlias() {
                return this.byAlias;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Scan(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.asAlias = asAlias;
                this.atAlias = atAlias;
                this.byAlias = byAlias;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Scan this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        SymbolPrimitive symbolPrimitive = this.this$0.getAsAlias();
                        int n = 31 * hc;
                        boolean bl = false;
                        SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                        int n2 = symbolPrimitive2 != null ? symbolPrimitive2.hashCode() : 0;
                        hc = n + n2;
                        symbolPrimitive = this.this$0.getAtAlias();
                        n = 31 * hc;
                        bl = false;
                        SymbolPrimitive symbolPrimitive3 = symbolPrimitive;
                        n2 = symbolPrimitive3 != null ? symbolPrimitive3.hashCode() : 0;
                        hc = n + n2;
                        symbolPrimitive = this.this$0.getByAlias();
                        n = 31 * hc;
                        bl = false;
                        SymbolPrimitive symbolPrimitive4 = symbolPrimitive;
                        n2 = symbolPrimitive4 != null ? symbolPrimitive4.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = scan;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Scan(Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000D\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BE\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0007\u001a\u0004\u0018\u00010\u0005\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001c\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016JN\u0010\u001c\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0007\u001a\u0004\u0018\u00010\u00052\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010 \u001a\u00020\u0017H\u0016J\b\u0010!\u001a\u00020\"H\u0016J\u0018\u0010#\u001a\u00020\u00002\u0006\u0010$\u001a\u00020\n2\u0006\u0010%\u001a\u00020\u000bH\u0016R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u000fR\u0013\u0010\u0007\u001a\u0004\u0018\u00010\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013R$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0014\u0010\u0015R\u001b\u0010\u0016\u001a\u00020\u00178BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u001a\u0010\u001b\u001a\u0004\b\u0018\u0010\u0019\u00a8\u0006&"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "asAlias", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "atAlias", "byAlias", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/pig/runtime/SymbolPrimitive;Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getAsAlias", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "getAtAlias", "getByAlias", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Unpivot
        extends FromSource {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @Nullable
            private final SymbolPrimitive asAlias;
            @Nullable
            private final SymbolPrimitive atAlias;
            @Nullable
            private final SymbolPrimitive byAlias;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Unpivot.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Unpivot copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Unpivot(this.expr, this.asAlias, this.atAlias, this.byAlias, metas);
            }

            @Override
            @NotNull
            public Unpivot withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Unpivot(this.expr, this.asAlias, this.atAlias, this.byAlias, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                SymbolPrimitive symbolPrimitive;
                SymbolPrimitive symbolPrimitive2;
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[5];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"unpivot", null, null, (int)6, null);
                ionElementArray[1] = (IonElement)this.expr.toIonElement();
                SymbolPrimitive symbolPrimitive3 = this.asAlias;
                if (symbolPrimitive3 == null || (symbolPrimitive3 = symbolPrimitive3.toIonElement()) == null) {
                    symbolPrimitive3 = ionElementArray[2] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((symbolPrimitive2 = this.atAlias) == null || (symbolPrimitive2 = symbolPrimitive2.toIonElement()) == null) {
                    symbolPrimitive2 = ionElementArray[3] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((symbolPrimitive = this.byAlias) == null || (symbolPrimitive = symbolPrimitive.toIonElement()) == null) {
                    symbolPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[4] = symbolPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final Unpivot copy(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Unpivot(expr, asAlias, atAlias, byAlias, metas);
            }

            public static /* synthetic */ Unpivot copy$default(Unpivot unpivot, Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = unpivot.expr;
                }
                if ((n & 2) != 0) {
                    symbolPrimitive = unpivot.asAlias;
                }
                if ((n & 4) != 0) {
                    symbolPrimitive2 = unpivot.atAlias;
                }
                if ((n & 8) != 0) {
                    symbolPrimitive3 = unpivot.byAlias;
                }
                if ((n & 0x10) != 0) {
                    map2 = unpivot.getMetas();
                }
                return unpivot.copy(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Unpivot.class) ^ true) {
                    return false;
                }
                Unpivot cfr_ignored_0 = (Unpivot)other;
                if (Intrinsics.areEqual(this.expr, ((Unpivot)other).expr) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.asAlias, ((Unpivot)other).asAlias) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.atAlias, ((Unpivot)other).atAlias) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.byAlias, ((Unpivot)other).byAlias) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Unpivot unpivot = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Nullable
            public final SymbolPrimitive getAsAlias() {
                return this.asAlias;
            }

            @Nullable
            public final SymbolPrimitive getAtAlias() {
                return this.atAlias;
            }

            @Nullable
            public final SymbolPrimitive getByAlias() {
                return this.byAlias;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Unpivot(@NotNull Expr expr, @Nullable SymbolPrimitive asAlias, @Nullable SymbolPrimitive atAlias, @Nullable SymbolPrimitive byAlias, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.asAlias = asAlias;
                this.atAlias = atAlias;
                this.byAlias = byAlias;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Unpivot this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        SymbolPrimitive symbolPrimitive = this.this$0.getAsAlias();
                        int n = 31 * hc;
                        boolean bl = false;
                        SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                        int n2 = symbolPrimitive2 != null ? symbolPrimitive2.hashCode() : 0;
                        hc = n + n2;
                        symbolPrimitive = this.this$0.getAtAlias();
                        n = 31 * hc;
                        bl = false;
                        SymbolPrimitive symbolPrimitive3 = symbolPrimitive;
                        n2 = symbolPrimitive3 != null ? symbolPrimitive3.hashCode() : 0;
                        hc = n + n2;
                        symbolPrimitive = this.this$0.getByAlias();
                        n = 31 * hc;
                        bl = false;
                        SymbolPrimitive symbolPrimitive4 = symbolPrimitive;
                        n2 = symbolPrimitive4 != null ? symbolPrimitive4.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = unpivot;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Unpivot(Expr expr, SymbolPrimitive symbolPrimitive, SymbolPrimitive symbolPrimitive2, SymbolPrimitive symbolPrimitive3, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, symbolPrimitive, symbolPrimitive2, symbolPrimitive3, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000D\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u000b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BA\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0001\u0012\u0006\u0010\u0005\u001a\u00020\u0001\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001d\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016JJ\u0010\u001d\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00012\b\b\u0002\u0010\u0005\u001a\u00020\u00012\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001e\u001a\u00020\u001f2\b\u0010 \u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010!\u001a\u00020\u0013H\u0016J\b\u0010\"\u001a\u00020#H\u0016J\u0018\u0010$\u001a\u00020\u00002\u0006\u0010%\u001a\u00020\n2\u0006\u0010&\u001a\u00020\u000bH\u0016R\u0011\u0010\u0004\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015R\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0018\u0010\u0019R\u0011\u0010\u0005\u001a\u00020\u0001\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001b\u0010\u001c\u00a8\u0006'"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "type", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "left", "right", "predicate", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType;Lorg/partiql/lang/domains/PartiqlAst$FromSource;Lorg/partiql/lang/domains/PartiqlAst$FromSource;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getLeft", "()Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPredicate", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getRight", "getType", "()Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Join
        extends FromSource {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final JoinType type;
            @NotNull
            private final FromSource left;
            @NotNull
            private final FromSource right;
            @Nullable
            private final Expr predicate;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Join.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Join copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Join(this.type, this.left, this.right, this.predicate, metas);
            }

            @Override
            @NotNull
            public Join withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Join(this.type, this.left, this.right, this.predicate, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Expr expr;
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"join", null, null, (int)6, null), (IonElement)this.type.toIonElement(), (IonElement)this.left.toIonElement(), (IonElement)this.right.toIonElement(), (expr = this.predicate) != null && (expr = expr.toIonElement()) != null ? (IonElement)expr : Ion.ionNull$default(null, (int)1, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Join copy(@NotNull JoinType type, @NotNull FromSource left, @NotNull FromSource right, @Nullable Expr predicate, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(left, "left");
                Intrinsics.checkParameterIsNotNull(right, "right");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Join(type, left, right, predicate, metas);
            }

            public static /* synthetic */ Join copy$default(Join join, JoinType joinType, FromSource fromSource, FromSource fromSource2, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    joinType = join.type;
                }
                if ((n & 2) != 0) {
                    fromSource = join.left;
                }
                if ((n & 4) != 0) {
                    fromSource2 = join.right;
                }
                if ((n & 8) != 0) {
                    expr = join.predicate;
                }
                if ((n & 0x10) != 0) {
                    map2 = join.getMetas();
                }
                return join.copy(joinType, fromSource, fromSource2, expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Join.class) ^ true) {
                    return false;
                }
                Join cfr_ignored_0 = (Join)other;
                if (Intrinsics.areEqual(this.type, ((Join)other).type) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.left, ((Join)other).left) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.right, ((Join)other).right) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.predicate, ((Join)other).predicate) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Join join = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final JoinType getType() {
                return this.type;
            }

            @NotNull
            public final FromSource getLeft() {
                return this.left;
            }

            @NotNull
            public final FromSource getRight() {
                return this.right;
            }

            @Nullable
            public final Expr getPredicate() {
                return this.predicate;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Join(@NotNull JoinType type, @NotNull FromSource left, @NotNull FromSource right, @Nullable Expr predicate, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(type, "type");
                Intrinsics.checkParameterIsNotNull(left, "left");
                Intrinsics.checkParameterIsNotNull(right, "right");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.type = type;
                this.left = left;
                this.right = right;
                this.predicate = predicate;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Join this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getType().hashCode();
                        hc = 31 * hc + this.this$0.getLeft().hashCode();
                        hc = 31 * hc + this.this$0.getRight().hashCode();
                        Expr expr = this.this$0.getPredicate();
                        int n = 31 * hc;
                        boolean bl = false;
                        Expr expr2 = expr;
                        int n2 = expr2 != null ? expr2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = join;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Join(JoinType joinType, FromSource fromSource, FromSource fromSource2, Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(joinType, fromSource, fromSource2, expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000.\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$FromSource$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource;)Ljava/lang/Object;", "convertJoin", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;)Ljava/lang/Object;", "convertScan", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;)Ljava/lang/Object;", "convertUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull FromSource var1);

            public T convertScan(@NotNull Scan var1);

            public T convertUnpivot(@NotNull Unpivot var1);

            public T convertJoin(@NotNull Join var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull FromSource node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    FromSource fromSource = node;
                    if (fromSource instanceof Scan) {
                        t = $this.convertScan((Scan)node);
                    } else if (fromSource instanceof Unpivot) {
                        t = $this.convertUnpivot((Unpivot)node);
                    } else if (fromSource instanceof Join) {
                        t = $this.convertJoin((Join)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u000b\f\r\u000e\u000fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0004\u0010\u0011\u0012\u0013\u00a8\u0006\u0014"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "Full", "Inner", "Left", "Right", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "lang"})
    public static abstract class JoinType
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public JoinType copy(@NotNull Map<String, ? extends Object> metas) {
            JoinType joinType;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            JoinType joinType2 = this;
            if (joinType2 instanceof Inner) {
                joinType = (JoinType)((Inner)this).copy((Map)metas);
            } else if (joinType2 instanceof Left) {
                joinType = (JoinType)((Left)this).copy((Map)metas);
            } else if (joinType2 instanceof Right) {
                joinType = (JoinType)((Right)this).copy((Map)metas);
            } else if (joinType2 instanceof Full) {
                joinType = (JoinType)((Full)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return joinType;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private JoinType(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ JoinType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Inner
        extends JoinType {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Inner copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Inner(metas);
            }

            @Override
            @NotNull
            public Inner withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Inner(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"inner", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Inner.class) ^ true);
            }

            public int hashCode() {
                return 7000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Inner(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Inner(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Inner() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Left
        extends JoinType {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Left copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Left(metas);
            }

            @Override
            @NotNull
            public Left withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Left(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"left", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Left.class) ^ true);
            }

            public int hashCode() {
                return 7001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Left(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Left(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Left() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Right
        extends JoinType {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Right copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Right(metas);
            }

            @Override
            @NotNull
            public Right withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Right(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"right", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Right.class) ^ true);
            }

            public int hashCode() {
                return 7002;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Right(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Right(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Right() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Full
        extends JoinType {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Full copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Full(metas);
            }

            @Override
            @NotNull
            public Full withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Full(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"full", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Full.class) ^ true);
            }

            public int hashCode() {
                return 7003;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Full(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Full(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Full() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012\u00a8\u0006\u0013"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$JoinType$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType;)Ljava/lang/Object;", "convertFull", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;)Ljava/lang/Object;", "convertInner", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;)Ljava/lang/Object;", "convertLeft", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;)Ljava/lang/Object;", "convertRight", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull JoinType var1);

            public T convertInner(@NotNull Inner var1);

            public T convertLeft(@NotNull Left var1);

            public T convertRight(@NotNull Right var1);

            public T convertFull(@NotNull Full var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull JoinType node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    JoinType joinType = node;
                    if (joinType instanceof Inner) {
                        t = $this.convertInner((Inner)node);
                    } else if (joinType instanceof Left) {
                        t = $this.convertLeft((Left)node);
                    } else if (joinType instanceof Right) {
                        t = $this.convertRight((Right)node);
                    } else if (joinType instanceof Full) {
                        t = $this.convertFull((Full)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "GroupFull", "GroupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "lang"})
    public static abstract class GroupingStrategy
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public GroupingStrategy copy(@NotNull Map<String, ? extends Object> metas) {
            GroupingStrategy groupingStrategy;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            GroupingStrategy groupingStrategy2 = this;
            if (groupingStrategy2 instanceof GroupFull) {
                groupingStrategy = (GroupingStrategy)((GroupFull)this).copy((Map)metas);
            } else if (groupingStrategy2 instanceof GroupPartial) {
                groupingStrategy = (GroupingStrategy)((GroupPartial)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return groupingStrategy;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private GroupingStrategy(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ GroupingStrategy(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class GroupFull
        extends GroupingStrategy {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public GroupFull copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupFull(metas);
            }

            @Override
            @NotNull
            public GroupFull withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new GroupFull(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"group_full", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), GroupFull.class) ^ true);
            }

            public int hashCode() {
                return 8000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public GroupFull(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ GroupFull(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public GroupFull() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class GroupPartial
        extends GroupingStrategy {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public GroupPartial copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new GroupPartial(metas);
            }

            @Override
            @NotNull
            public GroupPartial withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new GroupPartial(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"group_partial", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), GroupPartial.class) ^ true);
            }

            public int hashCode() {
                return 8001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public GroupPartial(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ GroupPartial(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public GroupPartial() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;)Ljava/lang/Object;", "convertGroupFull", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;)Ljava/lang/Object;", "convertGroupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull GroupingStrategy var1);

            public T convertGroupFull(@NotNull GroupFull var1);

            public T convertGroupPartial(@NotNull GroupPartial var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull GroupingStrategy node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    GroupingStrategy groupingStrategy = node;
                    if (groupingStrategy instanceof GroupFull) {
                        t = $this.convertGroupFull((GroupFull)node);
                    } else if (groupingStrategy instanceof GroupPartial) {
                        t = $this.convertGroupPartial((GroupPartial)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Asc", "Converter", "Desc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "lang"})
    public static abstract class OrderingSpec
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public OrderingSpec copy(@NotNull Map<String, ? extends Object> metas) {
            OrderingSpec orderingSpec;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            OrderingSpec orderingSpec2 = this;
            if (orderingSpec2 instanceof Asc) {
                orderingSpec = (OrderingSpec)((Asc)this).copy((Map)metas);
            } else if (orderingSpec2 instanceof Desc) {
                orderingSpec = (OrderingSpec)((Desc)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return orderingSpec;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private OrderingSpec(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ OrderingSpec(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Asc
        extends OrderingSpec {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Asc copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Asc(metas);
            }

            @Override
            @NotNull
            public Asc withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Asc(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"asc", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Asc.class) ^ true);
            }

            public int hashCode() {
                return 9000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Asc(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Asc(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Asc() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Desc
        extends OrderingSpec {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Desc copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Desc(metas);
            }

            @Override
            @NotNull
            public Desc withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Desc(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"desc", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Desc.class) ^ true);
            }

            public int hashCode() {
                return 9001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Desc(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Desc(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Desc() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;)Ljava/lang/Object;", "convertAsc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;)Ljava/lang/Object;", "convertDesc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull OrderingSpec var1);

            public T convertAsc(@NotNull Asc var1);

            public T convertDesc(@NotNull Desc var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull OrderingSpec node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    OrderingSpec orderingSpec = node;
                    if (orderingSpec instanceof Asc) {
                        t = $this.convertAsc((Asc)node);
                    } else if (orderingSpec instanceof Desc) {
                        t = $this.convertDesc((Desc)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "CaseInsensitive", "CaseSensitive", "Converter", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "lang"})
    public static abstract class CaseSensitivity
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public CaseSensitivity copy(@NotNull Map<String, ? extends Object> metas) {
            CaseSensitivity caseSensitivity;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            CaseSensitivity caseSensitivity2 = this;
            if (caseSensitivity2 instanceof CaseSensitive) {
                caseSensitivity = (CaseSensitivity)((CaseSensitive)this).copy((Map)metas);
            } else if (caseSensitivity2 instanceof CaseInsensitive) {
                caseSensitivity = (CaseSensitivity)((CaseInsensitive)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return caseSensitivity;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private CaseSensitivity(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ CaseSensitivity(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CaseSensitive
        extends CaseSensitivity {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public CaseSensitive copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CaseSensitive(metas);
            }

            @Override
            @NotNull
            public CaseSensitive withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CaseSensitive(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"case_sensitive", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), CaseSensitive.class) ^ true);
            }

            public int hashCode() {
                return 10000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CaseSensitive(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ CaseSensitive(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public CaseSensitive() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CaseInsensitive
        extends CaseSensitivity {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public CaseInsensitive copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CaseInsensitive(metas);
            }

            @Override
            @NotNull
            public CaseInsensitive withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CaseInsensitive(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"case_insensitive", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), CaseInsensitive.class) ^ true);
            }

            public int hashCode() {
                return 10001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CaseInsensitive(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ CaseInsensitive(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public CaseInsensitive() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;)Ljava/lang/Object;", "convertCaseInsensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;)Ljava/lang/Object;", "convertCaseSensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull CaseSensitivity var1);

            public T convertCaseSensitive(@NotNull CaseSensitive var1);

            public T convertCaseInsensitive(@NotNull CaseInsensitive var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull CaseSensitivity node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    CaseSensitivity caseSensitivity = node;
                    if (caseSensitivity instanceof CaseSensitive) {
                        t = $this.convertCaseSensitive((CaseSensitive)node);
                    } else if (caseSensitivity instanceof CaseInsensitive) {
                        t = $this.convertCaseInsensitive((CaseInsensitive)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "LocalsFirst", "Unqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "lang"})
    public static abstract class ScopeQualifier
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public ScopeQualifier copy(@NotNull Map<String, ? extends Object> metas) {
            ScopeQualifier scopeQualifier;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            ScopeQualifier scopeQualifier2 = this;
            if (scopeQualifier2 instanceof Unqualified) {
                scopeQualifier = (ScopeQualifier)((Unqualified)this).copy((Map)metas);
            } else if (scopeQualifier2 instanceof LocalsFirst) {
                scopeQualifier = (ScopeQualifier)((LocalsFirst)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return scopeQualifier;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private ScopeQualifier(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ ScopeQualifier(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Unqualified
        extends ScopeQualifier {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Unqualified copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Unqualified(metas);
            }

            @Override
            @NotNull
            public Unqualified withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Unqualified(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"unqualified", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Unqualified.class) ^ true);
            }

            public int hashCode() {
                return 11000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Unqualified(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Unqualified(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Unqualified() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class LocalsFirst
        extends ScopeQualifier {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public LocalsFirst copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new LocalsFirst(metas);
            }

            @Override
            @NotNull
            public LocalsFirst withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new LocalsFirst(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"locals_first", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), LocalsFirst.class) ^ true);
            }

            public int hashCode() {
                return 11001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public LocalsFirst(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ LocalsFirst(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public LocalsFirst() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;)Ljava/lang/Object;", "convertLocalsFirst", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;)Ljava/lang/Object;", "convertUnqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull ScopeQualifier var1);

            public T convertUnqualified(@NotNull Unqualified var1);

            public T convertLocalsFirst(@NotNull LocalsFirst var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull ScopeQualifier node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    ScopeQualifier scopeQualifier = node;
                    if (scopeQualifier instanceof Unqualified) {
                        t = $this.convertUnqualified((Unqualified)node);
                    } else if (scopeQualifier instanceof LocalsFirst) {
                        t = $this.convertLocalsFirst((LocalsFirst)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "All", "Converter", "Distinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "lang"})
    public static abstract class SetQuantifier
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public SetQuantifier copy(@NotNull Map<String, ? extends Object> metas) {
            SetQuantifier setQuantifier;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            SetQuantifier setQuantifier2 = this;
            if (setQuantifier2 instanceof All) {
                setQuantifier = (SetQuantifier)((All)this).copy((Map)metas);
            } else if (setQuantifier2 instanceof Distinct) {
                setQuantifier = (SetQuantifier)((Distinct)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return setQuantifier;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private SetQuantifier(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ SetQuantifier(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class All
        extends SetQuantifier {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public All copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new All(metas);
            }

            @Override
            @NotNull
            public All withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new All(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"all", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), All.class) ^ true);
            }

            public int hashCode() {
                return 12000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public All(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ All(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public All() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Distinct
        extends SetQuantifier {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Distinct copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Distinct(metas);
            }

            @Override
            @NotNull
            public Distinct withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Distinct(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"distinct", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Distinct.class) ^ true);
            }

            public int hashCode() {
                return 12001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Distinct(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Distinct(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Distinct() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;)Ljava/lang/Object;", "convertAll", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;)Ljava/lang/Object;", "convertDistinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull SetQuantifier var1);

            public T convertAll(@NotNull All var1);

            public T convertDistinct(@NotNull Distinct var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull SetQuantifier node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    SetQuantifier setQuantifier = node;
                    if (setQuantifier instanceof All) {
                        t = $this.convertAll((All)node);
                    } else if (setQuantifier instanceof Distinct) {
                        t = $this.convertDistinct((Distinct)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0006\u000b\f\r\u000e\u000f\u0010B!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0005\u0011\u0012\u0013\u0014\u0015\u00a8\u0006\u0016"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "Delete", "Insert", "InsertValue", "Remove", "Set", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "lang"})
    public static abstract class DmlOp
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public DmlOp copy(@NotNull Map<String, ? extends Object> metas) {
            DmlOp dmlOp;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            DmlOp dmlOp2 = this;
            if (dmlOp2 instanceof Insert) {
                dmlOp = (DmlOp)((Insert)this).copy((Map)metas);
            } else if (dmlOp2 instanceof InsertValue) {
                dmlOp = (DmlOp)((InsertValue)this).copy((Map)metas);
            } else if (dmlOp2 instanceof Set) {
                dmlOp = (DmlOp)((Set)this).copy((Map)metas);
            } else if (dmlOp2 instanceof Remove) {
                dmlOp = (DmlOp)((Remove)this).copy((Map)metas);
            } else if (dmlOp2 instanceof Delete) {
                dmlOp = (DmlOp)((Delete)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return dmlOp;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private DmlOp(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ DmlOp(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0016\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u000eH\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0014\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "target", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "values", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTarget", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getValues", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Insert
        extends DmlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr target;
            @NotNull
            private final Expr values;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Insert.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Insert copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Insert(this.target, this.values, metas);
            }

            @Override
            @NotNull
            public Insert withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Insert(this.target, this.values, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"insert", null, null, (int)6, null), (IonElement)this.target.toIonElement(), (IonElement)this.values.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Insert copy(@NotNull Expr target, @NotNull Expr values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Insert(target, values2, metas);
            }

            public static /* synthetic */ Insert copy$default(Insert insert, Expr expr, Expr expr2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = insert.target;
                }
                if ((n & 2) != 0) {
                    expr2 = insert.values;
                }
                if ((n & 4) != 0) {
                    map2 = insert.getMetas();
                }
                return insert.copy(expr, expr2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Insert.class) ^ true) {
                    return false;
                }
                Insert cfr_ignored_0 = (Insert)other;
                if (Intrinsics.areEqual(this.target, ((Insert)other).target) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.values, ((Insert)other).values) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Insert insert = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getTarget() {
                return this.target;
            }

            @NotNull
            public final Expr getValues() {
                return this.values;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Insert(@NotNull Expr target, @NotNull Expr values2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(values2, "values");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.target = target;
                this.values = values2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Insert this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTarget().hashCode();
                        hc = 31 * hc + this.this$0.getValues().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = insert;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Insert(Expr expr, Expr expr2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, expr2, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000D\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\n\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001BC\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\b\u0010\u0005\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\f\u00a2\u0006\u0002\u0010\rJ \u0010\u001c\u001a\u00020\u00002\u0016\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fH\u0016JL\u0010\u001c\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\n\b\u0002\u0010\u0005\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\u0018\b\u0002\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fJ\u0013\u0010\u001d\u001a\u00020\u001e2\b\u0010\u001f\u001a\u0004\u0018\u00010\u000bH\u0096\u0002J\b\u0010 \u001a\u00020\u0013H\u0016J\b\u0010!\u001a\u00020\"H\u0016J\u0018\u0010#\u001a\u00020\u00002\u0006\u0010$\u001a\u00020\n2\u0006\u0010%\u001a\u00020\u000bH\u0016R\u0013\u0010\u0005\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000e\u0010\u000fR$\u0010\b\u001a\u0012\u0012\u0004\u0012\u00020\n\u0012\u0004\u0012\u00020\u000b0\tj\u0002`\fX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0010\u0010\u0011R\u001b\u0010\u0012\u001a\u00020\u00138BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0016\u0010\u0017\u001a\u0004\b\u0014\u0010\u0015R\u0013\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0018\u0010\u0019R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001a\u0010\u000fR\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001b\u0010\u000f\u00a8\u0006&"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "target", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "value", "index", "onConflict", "Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$Expr;Lorg/partiql/lang/domains/PartiqlAst$OnConflict;Ljava/util/Map;)V", "getIndex", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getOnConflict", "()Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "getTarget", "getValue", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class InsertValue
        extends DmlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr target;
            @NotNull
            private final Expr value;
            @Nullable
            private final Expr index;
            @Nullable
            private final OnConflict onConflict;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(InsertValue.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public InsertValue copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new InsertValue(this.target, this.value, this.index, this.onConflict, metas);
            }

            @Override
            @NotNull
            public InsertValue withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new InsertValue(this.target, this.value, this.index, this.onConflict, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                OnConflict onConflict;
                Expr expr;
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"insert_value", null, null, (int)6, null), (IonElement)this.target.toIonElement(), (IonElement)this.value.toIonElement(), (expr = this.index) != null && (expr = expr.toIonElement()) != null ? (IonElement)expr : Ion.ionNull$default(null, (int)1, null), (onConflict = this.onConflict) != null && (onConflict = onConflict.toIonElement()) != null ? (IonElement)onConflict : Ion.ionNull$default(null, (int)1, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final InsertValue copy(@NotNull Expr target, @NotNull Expr value, @Nullable Expr index, @Nullable OnConflict onConflict, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new InsertValue(target, value, index, onConflict, metas);
            }

            public static /* synthetic */ InsertValue copy$default(InsertValue insertValue, Expr expr, Expr expr2, Expr expr3, OnConflict onConflict, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = insertValue.target;
                }
                if ((n & 2) != 0) {
                    expr2 = insertValue.value;
                }
                if ((n & 4) != 0) {
                    expr3 = insertValue.index;
                }
                if ((n & 8) != 0) {
                    onConflict = insertValue.onConflict;
                }
                if ((n & 0x10) != 0) {
                    map2 = insertValue.getMetas();
                }
                return insertValue.copy(expr, expr2, expr3, onConflict, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), InsertValue.class) ^ true) {
                    return false;
                }
                InsertValue cfr_ignored_0 = (InsertValue)other;
                if (Intrinsics.areEqual(this.target, ((InsertValue)other).target) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.value, ((InsertValue)other).value) ^ true) {
                    return false;
                }
                if (Intrinsics.areEqual(this.index, ((InsertValue)other).index) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.onConflict, ((InsertValue)other).onConflict) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                InsertValue insertValue = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getTarget() {
                return this.target;
            }

            @NotNull
            public final Expr getValue() {
                return this.value;
            }

            @Nullable
            public final Expr getIndex() {
                return this.index;
            }

            @Nullable
            public final OnConflict getOnConflict() {
                return this.onConflict;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public InsertValue(@NotNull Expr target, @NotNull Expr value, @Nullable Expr index, @Nullable OnConflict onConflict, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(value, "value");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.target = target;
                this.value = value;
                this.index = index;
                this.onConflict = onConflict;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ InsertValue this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTarget().hashCode();
                        hc = 31 * hc + this.this$0.getValue().hashCode();
                        PartiqlAstNode partiqlAstNode = this.this$0.getIndex();
                        int n = 31 * hc;
                        boolean bl = false;
                        Expr expr = partiqlAstNode;
                        int n2 = expr != null ? expr.hashCode() : 0;
                        hc = n + n2;
                        partiqlAstNode = this.this$0.getOnConflict();
                        n = 31 * hc;
                        bl = false;
                        PartiqlAstNode partiqlAstNode2 = partiqlAstNode;
                        n2 = partiqlAstNode2 != null ? partiqlAstNode2.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = insertValue;
                        super(0);
                    }
                });
            }

            public /* synthetic */ InsertValue(Expr expr, Expr expr2, Expr expr3, OnConflict onConflict, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 0x10) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, expr2, expr3, onConflict, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "assignment", "Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Assignment;Ljava/util/Map;)V", "getAssignment", "()Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Set
        extends DmlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Assignment assignment;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Set.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Set copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Set(this.assignment, metas);
            }

            @Override
            @NotNull
            public Set withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Set(this.assignment, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"set", null, null, (int)6, null), (IonElement)this.assignment.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Set copy(@NotNull Assignment assignment, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(assignment, "assignment");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Set(assignment, metas);
            }

            public static /* synthetic */ Set copy$default(Set set2, Assignment assignment, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    assignment = set2.assignment;
                }
                if ((n & 2) != 0) {
                    map2 = set2.getMetas();
                }
                return set2.copy(assignment, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Set.class) ^ true) {
                    return false;
                }
                Set cfr_ignored_0 = (Set)other;
                return !(Intrinsics.areEqual(this.assignment, ((Set)other).assignment) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Set set2 = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Assignment getAssignment() {
                return this.assignment;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Set(@NotNull Assignment assignment, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(assignment, "assignment");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.assignment = assignment;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Set this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getAssignment().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = set2;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Set(Assignment assignment, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(assignment, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "target", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTarget", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Remove
        extends DmlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr target;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(Remove.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public Remove copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Remove(this.target, metas);
            }

            @Override
            @NotNull
            public Remove withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Remove(this.target, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"remove", null, null, (int)6, null), (IonElement)this.target.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final Remove copy(@NotNull Expr target, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Remove(target, metas);
            }

            public static /* synthetic */ Remove copy$default(Remove remove, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = remove.target;
                }
                if ((n & 2) != 0) {
                    map2 = remove.getMetas();
                }
                return remove.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), Remove.class) ^ true) {
                    return false;
                }
                Remove cfr_ignored_0 = (Remove)other;
                return !(Intrinsics.areEqual(this.target, ((Remove)other).target) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                Remove remove = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getTarget() {
                return this.target;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Remove(@NotNull Expr target, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(target, "target");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.target = target;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ Remove this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTarget().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = remove;
                        super(0);
                    }
                });
            }

            public /* synthetic */ Remove(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class Delete
        extends DmlOp {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public Delete copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new Delete(metas);
            }

            @Override
            @NotNull
            public Delete withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new Delete(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"delete", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), Delete.class) ^ true);
            }

            public int hashCode() {
                return 13004;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public Delete(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ Delete(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public Delete() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012J\u0015\u0010\u0013\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0014H&\u00a2\u0006\u0002\u0010\u0015\u00a8\u0006\u0016"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp;)Ljava/lang/Object;", "convertDelete", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;)Ljava/lang/Object;", "convertInsert", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;)Ljava/lang/Object;", "convertInsertValue", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;)Ljava/lang/Object;", "convertRemove", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;)Ljava/lang/Object;", "convertSet", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull DmlOp var1);

            public T convertInsert(@NotNull Insert var1);

            public T convertInsertValue(@NotNull InsertValue var1);

            public T convertSet(@NotNull Set var1);

            public T convertRemove(@NotNull Remove var1);

            public T convertDelete(@NotNull Delete var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull DmlOp node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    DmlOp dmlOp = node;
                    if (dmlOp instanceof Insert) {
                        t = $this.convertInsert((Insert)node);
                    } else if (dmlOp instanceof InsertValue) {
                        t = $this.convertInsertValue((InsertValue)node);
                    } else if (dmlOp instanceof Set) {
                        t = $this.convertSet((Set)node);
                    } else if (dmlOp instanceof Remove) {
                        t = $this.convertRemove((Remove)node);
                    } else if (dmlOp instanceof Delete) {
                        t = $this.convertDelete((Delete)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000$\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0002\u000b\fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0001\r\u00a8\u0006\u000e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "DoNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "lang"})
    public static abstract class ConflictAction
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public ConflictAction copy(@NotNull Map<String, ? extends Object> metas) {
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            ConflictAction conflictAction = this;
            if (!(conflictAction instanceof DoNothing)) {
                throw new NoWhenBranchMatchedException();
            }
            return (ConflictAction)((DoNothing)this).copy((Map)metas);
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private ConflictAction(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ ConflictAction(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DoNothing
        extends ConflictAction {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public DoNothing copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DoNothing(metas);
            }

            @Override
            @NotNull
            public DoNothing withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DoNothing(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"do_nothing", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), DoNothing.class) ^ true);
            }

            public int hashCode() {
                return 14000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DoNothing(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ DoNothing(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public DoNothing() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u001e\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\t\u00a8\u0006\n"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "(Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;)Ljava/lang/Object;", "convertDoNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "(Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull ConflictAction var1);

            public T convertDoNothing(@NotNull DoNothing var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull ConflictAction node) {
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    ConflictAction conflictAction = node;
                    if (!(conflictAction instanceof DoNothing)) {
                        throw new NoWhenBranchMatchedException();
                    }
                    return $this.convertDoNothing((DoNothing)node);
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u000b\f\r\u000e\u000fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0004\u0010\u0011\u0012\u0013\u00a8\u0006\u0014"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "CreateIndex", "CreateTable", "DropIndex", "DropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "lang"})
    public static abstract class DdlOp
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public DdlOp copy(@NotNull Map<String, ? extends Object> metas) {
            DdlOp ddlOp;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            DdlOp ddlOp2 = this;
            if (ddlOp2 instanceof CreateTable) {
                ddlOp = (DdlOp)((CreateTable)this).copy((Map)metas);
            } else if (ddlOp2 instanceof DropTable) {
                ddlOp = (DdlOp)((DropTable)this).copy((Map)metas);
            } else if (ddlOp2 instanceof CreateIndex) {
                ddlOp = (DdlOp)((CreateIndex)this).copy((Map)metas);
            } else if (ddlOp2 instanceof DropIndex) {
                ddlOp = (DdlOp)((DropIndex)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return ddlOp;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private DdlOp(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ DdlOp(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "tableName", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/SymbolPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTableName", "()Lorg/partiql/pig/runtime/SymbolPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CreateTable
        extends DdlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final SymbolPrimitive tableName;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(CreateTable.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public CreateTable copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CreateTable(this.tableName, metas);
            }

            @Override
            @NotNull
            public CreateTable withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CreateTable(this.tableName, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"create_table", null, null, (int)6, null), this.tableName.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final CreateTable copy(@NotNull SymbolPrimitive tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CreateTable(tableName, metas);
            }

            public static /* synthetic */ CreateTable copy$default(CreateTable createTable, SymbolPrimitive symbolPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    symbolPrimitive = createTable.tableName;
                }
                if ((n & 2) != 0) {
                    map2 = createTable.getMetas();
                }
                return createTable.copy(symbolPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), CreateTable.class) ^ true) {
                    return false;
                }
                CreateTable cfr_ignored_0 = (CreateTable)other;
                return !(Intrinsics.areEqual(this.tableName, ((CreateTable)other).tableName) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                CreateTable createTable = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final SymbolPrimitive getTableName() {
                return this.tableName;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CreateTable(@NotNull SymbolPrimitive tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.tableName = tableName;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ CreateTable this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTableName().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = createTable;
                        super(0);
                    }
                });
            }

            public /* synthetic */ CreateTable(SymbolPrimitive symbolPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(symbolPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "tableName", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Identifier;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTableName", "()Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DropTable
        extends DdlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Identifier tableName;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DropTable.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public DropTable copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DropTable(this.tableName, metas);
            }

            @Override
            @NotNull
            public DropTable withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DropTable(this.tableName, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"drop_table", null, null, (int)6, null), (IonElement)this.tableName.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final DropTable copy(@NotNull Identifier tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DropTable(tableName, metas);
            }

            public static /* synthetic */ DropTable copy$default(DropTable dropTable, Identifier identifier, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    identifier = dropTable.tableName;
                }
                if ((n & 2) != 0) {
                    map2 = dropTable.getMetas();
                }
                return dropTable.copy(identifier, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), DropTable.class) ^ true) {
                    return false;
                }
                DropTable cfr_ignored_0 = (DropTable)other;
                return !(Intrinsics.areEqual(this.tableName, ((DropTable)other).tableName) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                DropTable dropTable = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Identifier getTableName() {
                return this.tableName;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DropTable(@NotNull Identifier tableName, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(tableName, "tableName");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.tableName = tableName;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ DropTable this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTableName().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = dropTable;
                        super(0);
                    }
                });
            }

            public /* synthetic */ DropTable(Identifier identifier, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(identifier, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000F\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B5\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\f\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u0005\u0012\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000b\u00a2\u0006\u0002\u0010\fJ \u0010\u0019\u001a\u00020\u00002\u0016\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bH\u0016J:\u0010\u0019\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u000e\b\u0002\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u00052\u0018\b\u0002\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bJ\u0013\u0010\u001a\u001a\u00020\u001b2\b\u0010\u001c\u001a\u0004\u0018\u00010\nH\u0096\u0002J\b\u0010\u001d\u001a\u00020\u0014H\u0016J\b\u0010\u001e\u001a\u00020\u001fH\u0016J\u0018\u0010 \u001a\u00020\u00002\u0006\u0010!\u001a\u00020\t2\u0006\u0010\"\u001a\u00020\nH\u0016R\u0017\u0010\u0004\u001a\b\u0012\u0004\u0012\u00020\u00060\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R$\u0010\u0007\u001a\u0012\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\n0\bj\u0002`\u000bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u001b\u0010\u0013\u001a\u00020\u00148BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0017\u0010\u0018\u001a\u0004\b\u0015\u0010\u0016\u00a8\u0006#"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "indexName", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "fields", "", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Identifier;Ljava/util/List;Ljava/util/Map;)V", "getFields", "()Ljava/util/List;", "getIndexName", "()Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CreateIndex
        extends DdlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Identifier indexName;
            @NotNull
            private final List<Expr> fields;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(CreateIndex.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public CreateIndex copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CreateIndex(this.indexName, this.fields, metas);
            }

            @Override
            @NotNull
            public CreateIndex withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CreateIndex(this.indexName, this.fields, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            /*
             * WARNING - void declaration
             */
            @Override
            @NotNull
            public SexpElement toIonElement() {
                void $this$toTypedArray$iv;
                Collection<SexpElement> collection;
                void $this$mapTo$iv$iv;
                Collection $this$map$iv;
                Map<String, Object> map2 = this.getMetas();
                SpreadBuilder spreadBuilder = new SpreadBuilder(3);
                spreadBuilder.add((IonElement)Ion.ionSymbol$default((String)"create_index", null, null, (int)6, null));
                spreadBuilder.add((IonElement)this.indexName.toIonElement());
                IonElement[] ionElementArray = (IonElement[])this.fields;
                SpreadBuilder spreadBuilder2 = spreadBuilder;
                SpreadBuilder spreadBuilder3 = spreadBuilder;
                List list = null;
                Map<String, Object> map3 = map2;
                boolean $i$f$map = false;
                Map<String, Object> map4 = $this$map$iv;
                Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                boolean $i$f$mapTo = false;
                for (Object item$iv$iv : $this$mapTo$iv$iv) {
                    void it;
                    Expr expr = (Expr)item$iv$iv;
                    collection = destination$iv$iv;
                    boolean bl = false;
                    SexpElement sexpElement = it.toIonElement();
                    collection.add(sexpElement);
                }
                collection = (List)destination$iv$iv;
                $this$map$iv = collection;
                boolean $i$f$toTypedArray = false;
                void thisCollection$iv = $this$toTypedArray$iv;
                SexpElement[] sexpElementArray = thisCollection$iv.toArray(new SexpElement[0]);
                if (sexpElementArray == null) {
                    throw new TypeCastException("null cannot be cast to non-null type kotlin.Array<T>");
                }
                collection = sexpElementArray;
                SpreadBuilder spreadBuilder4 = spreadBuilder3;
                spreadBuilder2.addSpread(collection);
                ionElementArray = (IonElement[])spreadBuilder4.toArray(new IonElement[spreadBuilder4.size()]);
                List list2 = list;
                map4 = map3;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list2, map4, (int)2, null);
                return elements;
            }

            @NotNull
            public final CreateIndex copy(@NotNull Identifier indexName, @NotNull List<? extends Expr> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(indexName, "indexName");
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CreateIndex(indexName, fields, metas);
            }

            public static /* synthetic */ CreateIndex copy$default(CreateIndex createIndex, Identifier identifier, List list, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    identifier = createIndex.indexName;
                }
                if ((n & 2) != 0) {
                    list = createIndex.fields;
                }
                if ((n & 4) != 0) {
                    map2 = createIndex.getMetas();
                }
                return createIndex.copy(identifier, list, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), CreateIndex.class) ^ true) {
                    return false;
                }
                CreateIndex cfr_ignored_0 = (CreateIndex)other;
                if (Intrinsics.areEqual(this.indexName, ((CreateIndex)other).indexName) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.fields, ((CreateIndex)other).fields) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                CreateIndex createIndex = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Identifier getIndexName() {
                return this.indexName;
            }

            @NotNull
            public final List<Expr> getFields() {
                return this.fields;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CreateIndex(@NotNull Identifier indexName, @NotNull List<? extends Expr> fields, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(indexName, "indexName");
                Intrinsics.checkParameterIsNotNull(fields, "fields");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.indexName = indexName;
                this.fields = fields;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ CreateIndex this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getIndexName().hashCode();
                        hc = 31 * hc + ((Object)this.this$0.getFields()).hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = createIndex;
                        super(0);
                    }
                });
            }

            public /* synthetic */ CreateIndex(Identifier identifier, List list, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(identifier, list, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0007\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B/\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J4\u0010\u0016\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u0010H\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R\u0011\u0010\u0004\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u001b\u0010\u000f\u001a\u00020\u00108BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0013\u0010\u0014\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\f\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "table", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "keys", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Identifier;Lorg/partiql/lang/domains/PartiqlAst$Identifier;Ljava/util/Map;)V", "getKeys", "()Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getTable", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DropIndex
        extends DdlOp {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Identifier table;
            @NotNull
            private final Identifier keys;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DropIndex.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public DropIndex copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DropIndex(this.table, this.keys, metas);
            }

            @Override
            @NotNull
            public DropIndex withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DropIndex(this.table, this.keys, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                SexpElement sexpElement;
                SexpElement sexpElement2;
                SexpElement sexpElement3;
                Identifier it;
                boolean bl;
                boolean bl2;
                IonElement[] ionElementArray;
                IonElement[] ionElementArray2;
                int n;
                Identifier identifier;
                IonElement[] ionElementArray3 = new IonElement[3];
                ionElementArray3[0] = (IonElement)Ion.ionSymbol$default((String)"drop_index", null, null, (int)6, null);
                IonElement[] ionElementArray4 = ionElementArray3;
                IonElement[] ionElementArray5 = ionElementArray3;
                int n2 = 1;
                Identifier identifier2 = this.table;
                if (identifier2 != null) {
                    identifier = identifier2;
                    n = n2;
                    ionElementArray2 = ionElementArray4;
                    ionElementArray = ionElementArray5;
                    bl2 = false;
                    bl = false;
                    it = identifier;
                    boolean bl3 = false;
                    sexpElement3 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"table", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray5 = ionElementArray;
                    ionElementArray4 = ionElementArray2;
                    n2 = n;
                    sexpElement2 = sexpElement3;
                } else {
                    sexpElement2 = null;
                }
                ionElementArray4[n2] = (IonElement)sexpElement2;
                IonElement[] ionElementArray6 = ionElementArray5;
                IonElement[] ionElementArray7 = ionElementArray5;
                int n3 = 2;
                Identifier identifier3 = this.keys;
                if (identifier3 != null) {
                    identifier = identifier3;
                    n = n3;
                    ionElementArray2 = ionElementArray6;
                    ionElementArray = ionElementArray7;
                    bl2 = false;
                    bl = false;
                    it = identifier;
                    boolean bl4 = false;
                    sexpElement3 = Ion.ionSexpOf$default((IonElement[])new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"keys", null, null, (int)6, null), (IonElement)it.toIonElement()}, null, null, (int)6, null);
                    ionElementArray7 = ionElementArray;
                    ionElementArray6 = ionElementArray2;
                    n3 = n;
                    sexpElement = sexpElement3;
                } else {
                    sexpElement = null;
                }
                ionElementArray6[n3] = (IonElement)sexpElement;
                List<IonElement> elements = CollectionsKt.listOfNotNull(ionElementArray7);
                return Ion.ionSexpOf$default((Iterable)elements, null, this.getMetas(), (int)2, null);
            }

            @NotNull
            public final DropIndex copy(@NotNull Identifier table2, @NotNull Identifier keys2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(table2, "table");
                Intrinsics.checkParameterIsNotNull(keys2, "keys");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DropIndex(table2, keys2, metas);
            }

            public static /* synthetic */ DropIndex copy$default(DropIndex dropIndex, Identifier identifier, Identifier identifier2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    identifier = dropIndex.table;
                }
                if ((n & 2) != 0) {
                    identifier2 = dropIndex.keys;
                }
                if ((n & 4) != 0) {
                    map2 = dropIndex.getMetas();
                }
                return dropIndex.copy(identifier, identifier2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), DropIndex.class) ^ true) {
                    return false;
                }
                DropIndex cfr_ignored_0 = (DropIndex)other;
                if (Intrinsics.areEqual(this.table, ((DropIndex)other).table) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.keys, ((DropIndex)other).keys) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                DropIndex dropIndex = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Identifier getTable() {
                return this.table;
            }

            @NotNull
            public final Identifier getKeys() {
                return this.keys;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DropIndex(@NotNull Identifier table2, @NotNull Identifier keys2, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(table2, "table");
                Intrinsics.checkParameterIsNotNull(keys2, "keys");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.table = table2;
                this.keys = keys2;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ DropIndex this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getTable().hashCode();
                        hc = 31 * hc + this.this$0.getKeys().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = dropIndex;
                        super(0);
                    }
                });
            }

            public /* synthetic */ DropIndex(Identifier identifier, Identifier identifier2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(identifier, identifier2, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012\u00a8\u0006\u0013"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$DdlOp$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp;)Ljava/lang/Object;", "convertCreateIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;)Ljava/lang/Object;", "convertCreateTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;)Ljava/lang/Object;", "convertDropIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;)Ljava/lang/Object;", "convertDropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull DdlOp var1);

            public T convertCreateTable(@NotNull CreateTable var1);

            public T convertDropTable(@NotNull DropTable var1);

            public T convertCreateIndex(@NotNull CreateIndex var1);

            public T convertDropIndex(@NotNull DropIndex var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull DdlOp node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    DdlOp ddlOp = node;
                    if (ddlOp instanceof CreateTable) {
                        t = $this.convertCreateTable((CreateTable)node);
                    } else if (ddlOp instanceof DropTable) {
                        t = $this.convertDropTable((DropTable)node);
                    } else if (ddlOp instanceof CreateIndex) {
                        t = $this.convertCreateIndex((CreateIndex)node);
                    } else if (ddlOp instanceof DropIndex) {
                        t = $this.convertDropIndex((DropIndex)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0003\u000b\f\rB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0002\u000e\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "Converter", "ReturningColumn", "ReturningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "lang"})
    public static abstract class ColumnComponent
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public ColumnComponent copy(@NotNull Map<String, ? extends Object> metas) {
            ColumnComponent columnComponent;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            ColumnComponent columnComponent2 = this;
            if (columnComponent2 instanceof ReturningWildcard) {
                columnComponent = (ColumnComponent)((ReturningWildcard)this).copy((Map)metas);
            } else if (columnComponent2 instanceof ReturningColumn) {
                columnComponent = (ColumnComponent)((ReturningColumn)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return columnComponent;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private ColumnComponent(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ ColumnComponent(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ReturningWildcard
        extends ColumnComponent {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ReturningWildcard copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningWildcard(metas);
            }

            @Override
            @NotNull
            public ReturningWildcard withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ReturningWildcard(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"returning_wildcard", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ReturningWildcard.class) ^ true);
            }

            public int hashCode() {
                return 16000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ReturningWildcard(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ReturningWildcard(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ReturningWildcard() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B'\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J*\u0010\u0014\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0011\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "expr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/util/Map;)V", "getExpr", "()Lorg/partiql/lang/domains/PartiqlAst$Expr;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ReturningColumn
        extends ColumnComponent {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @NotNull
            private final Expr expr;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(ReturningColumn.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public ReturningColumn copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningColumn(this.expr, metas);
            }

            @Override
            @NotNull
            public ReturningColumn withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ReturningColumn(this.expr, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"returning_column", null, null, (int)6, null), (IonElement)this.expr.toIonElement()};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            @NotNull
            public final ReturningColumn copy(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ReturningColumn(expr, metas);
            }

            public static /* synthetic */ ReturningColumn copy$default(ReturningColumn returningColumn, Expr expr, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    expr = returningColumn.expr;
                }
                if ((n & 2) != 0) {
                    map2 = returningColumn.getMetas();
                }
                return returningColumn.copy(expr, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), ReturningColumn.class) ^ true) {
                    return false;
                }
                ReturningColumn cfr_ignored_0 = (ReturningColumn)other;
                return !(Intrinsics.areEqual(this.expr, ((ReturningColumn)other).expr) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                ReturningColumn returningColumn = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @NotNull
            public final Expr getExpr() {
                return this.expr;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ReturningColumn(@NotNull Expr expr, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(expr, "expr");
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.expr = expr;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ ReturningColumn this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_1;
                        int hc = this.this$0.getExpr().hashCode();
                        return (int)var1_1;
                    }
                    {
                        this.this$0 = returningColumn;
                        super(0);
                    }
                });
            }

            public /* synthetic */ ReturningColumn(Expr expr, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(expr, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000&\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\f\u00a8\u0006\r"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;)Ljava/lang/Object;", "convertReturningColumn", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;)Ljava/lang/Object;", "convertReturningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull ColumnComponent var1);

            public T convertReturningWildcard(@NotNull ReturningWildcard var1);

            public T convertReturningColumn(@NotNull ReturningColumn var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull ColumnComponent node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    ColumnComponent columnComponent = node;
                    if (columnComponent instanceof ReturningWildcard) {
                        t = $this.convertReturningWildcard((ReturningWildcard)node);
                    } else if (columnComponent instanceof ReturningColumn) {
                        t = $this.convertReturningColumn((ReturningColumn)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u0005\u000b\f\r\u000e\u000fB!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0004\u0010\u0011\u0012\u0013\u00a8\u0006\u0014"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "AllNew", "AllOld", "Converter", "ModifiedNew", "ModifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "lang"})
    public static abstract class ReturningMapping
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public ReturningMapping copy(@NotNull Map<String, ? extends Object> metas) {
            ReturningMapping returningMapping;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            ReturningMapping returningMapping2 = this;
            if (returningMapping2 instanceof ModifiedNew) {
                returningMapping = (ReturningMapping)((ModifiedNew)this).copy((Map)metas);
            } else if (returningMapping2 instanceof ModifiedOld) {
                returningMapping = (ReturningMapping)((ModifiedOld)this).copy((Map)metas);
            } else if (returningMapping2 instanceof AllNew) {
                returningMapping = (ReturningMapping)((AllNew)this).copy((Map)metas);
            } else if (returningMapping2 instanceof AllOld) {
                returningMapping = (ReturningMapping)((AllOld)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return returningMapping;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private ReturningMapping(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ ReturningMapping(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ModifiedNew
        extends ReturningMapping {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ModifiedNew copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ModifiedNew(metas);
            }

            @Override
            @NotNull
            public ModifiedNew withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ModifiedNew(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"modified_new", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ModifiedNew.class) ^ true);
            }

            public int hashCode() {
                return 17000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ModifiedNew(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ModifiedNew(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ModifiedNew() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ModifiedOld
        extends ReturningMapping {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ModifiedOld copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ModifiedOld(metas);
            }

            @Override
            @NotNull
            public ModifiedOld withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ModifiedOld(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"modified_old", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ModifiedOld.class) ^ true);
            }

            public int hashCode() {
                return 17001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ModifiedOld(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ModifiedOld(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ModifiedOld() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class AllNew
        extends ReturningMapping {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public AllNew copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new AllNew(metas);
            }

            @Override
            @NotNull
            public AllNew withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new AllNew(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"all_new", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), AllNew.class) ^ true);
            }

            public int hashCode() {
                return 17002;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public AllNew(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ AllNew(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public AllNew() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class AllOld
        extends ReturningMapping {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public AllOld copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new AllOld(metas);
            }

            @Override
            @NotNull
            public AllOld withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new AllOld(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"all_old", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), AllOld.class) ^ true);
            }

            public int hashCode() {
                return 17003;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public AllOld(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ AllOld(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public AllOld() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012\u00a8\u0006\u0013"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;)Ljava/lang/Object;", "convertAllNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;)Ljava/lang/Object;", "convertAllOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;)Ljava/lang/Object;", "convertModifiedNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;)Ljava/lang/Object;", "convertModifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull ReturningMapping var1);

            public T convertModifiedNew(@NotNull ModifiedNew var1);

            public T convertModifiedOld(@NotNull ModifiedOld var1);

            public T convertAllNew(@NotNull AllNew var1);

            public T convertAllOld(@NotNull AllOld var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull ReturningMapping node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    ReturningMapping returningMapping = node;
                    if (returningMapping instanceof ModifiedNew) {
                        t = $this.convertModifiedNew((ModifiedNew)node);
                    } else if (returningMapping instanceof ModifiedOld) {
                        t = $this.convertModifiedOld((ModifiedOld)node);
                    } else if (returningMapping instanceof AllNew) {
                        t = $this.convertAllNew((AllNew)node);
                    } else if (returningMapping instanceof AllOld) {
                        t = $this.convertAllOld((AllOld)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u0084\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u001e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b6\u0018\u00002\u00020\u0001:\u001a\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$B!\b\u0002\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u0082\u0001\u0019%&'()*+,-./0123456789:;<=\u00a8\u0006>"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "BagType", "BlobType", "BooleanType", "CharacterType", "CharacterVaryingType", "ClobType", "Converter", "DateType", "DecimalType", "DoublePrecisionType", "FloatType", "IntegerType", "ListType", "MissingType", "NullType", "NumericType", "RealType", "SexpType", "SmallintType", "StringType", "StructType", "SymbolType", "TimeType", "TimeWithTimeZoneType", "TimestampType", "TupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "lang"})
    public static abstract class Type
    extends PartiqlAstNode {
        @NotNull
        private final Map<String, Object> metas;

        @Override
        @NotNull
        public Type copy(@NotNull Map<String, ? extends Object> metas) {
            Type type;
            Intrinsics.checkParameterIsNotNull(metas, "metas");
            Type type2 = this;
            if (type2 instanceof NullType) {
                type = (Type)((NullType)this).copy((Map)metas);
            } else if (type2 instanceof BooleanType) {
                type = (Type)((BooleanType)this).copy((Map)metas);
            } else if (type2 instanceof SmallintType) {
                type = (Type)((SmallintType)this).copy((Map)metas);
            } else if (type2 instanceof IntegerType) {
                type = (Type)((IntegerType)this).copy((Map)metas);
            } else if (type2 instanceof FloatType) {
                type = (Type)((FloatType)this).copy((Map)metas);
            } else if (type2 instanceof RealType) {
                type = (Type)((RealType)this).copy((Map)metas);
            } else if (type2 instanceof DoublePrecisionType) {
                type = (Type)((DoublePrecisionType)this).copy((Map)metas);
            } else if (type2 instanceof DecimalType) {
                type = (Type)((DecimalType)this).copy((Map)metas);
            } else if (type2 instanceof NumericType) {
                type = (Type)((NumericType)this).copy((Map)metas);
            } else if (type2 instanceof TimestampType) {
                type = (Type)((TimestampType)this).copy((Map)metas);
            } else if (type2 instanceof CharacterType) {
                type = (Type)((CharacterType)this).copy((Map)metas);
            } else if (type2 instanceof CharacterVaryingType) {
                type = (Type)((CharacterVaryingType)this).copy((Map)metas);
            } else if (type2 instanceof MissingType) {
                type = (Type)((MissingType)this).copy((Map)metas);
            } else if (type2 instanceof StringType) {
                type = (Type)((StringType)this).copy((Map)metas);
            } else if (type2 instanceof SymbolType) {
                type = (Type)((SymbolType)this).copy((Map)metas);
            } else if (type2 instanceof BlobType) {
                type = (Type)((BlobType)this).copy((Map)metas);
            } else if (type2 instanceof ClobType) {
                type = (Type)((ClobType)this).copy((Map)metas);
            } else if (type2 instanceof DateType) {
                type = (Type)((DateType)this).copy((Map)metas);
            } else if (type2 instanceof TimeType) {
                type = (Type)((TimeType)this).copy((Map)metas);
            } else if (type2 instanceof TimeWithTimeZoneType) {
                type = (Type)((TimeWithTimeZoneType)this).copy((Map)metas);
            } else if (type2 instanceof StructType) {
                type = (Type)((StructType)this).copy((Map)metas);
            } else if (type2 instanceof TupleType) {
                type = (Type)((TupleType)this).copy((Map)metas);
            } else if (type2 instanceof ListType) {
                type = (Type)((ListType)this).copy((Map)metas);
            } else if (type2 instanceof SexpType) {
                type = (Type)((SexpType)this).copy((Map)metas);
            } else if (type2 instanceof BagType) {
                type = (Type)((BagType)this).copy((Map)metas);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return type;
        }

        @NotNull
        public Map<String, Object> getMetas() {
            return this.metas;
        }

        private Type(Map<String, ? extends Object> metas) {
            this.metas = metas;
        }

        /* synthetic */ Type(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
            if ((n & 1) != 0) {
                map2 = IonMeta.emptyMetaContainer();
            }
            this(map2);
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class NullType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public NullType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new NullType(metas);
            }

            @Override
            @NotNull
            public NullType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new NullType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"null_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), NullType.class) ^ true);
            }

            public int hashCode() {
                return 18000;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public NullType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ NullType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public NullType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class BooleanType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public BooleanType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new BooleanType(metas);
            }

            @Override
            @NotNull
            public BooleanType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new BooleanType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"boolean_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), BooleanType.class) ^ true);
            }

            public int hashCode() {
                return 18001;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public BooleanType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ BooleanType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public BooleanType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class SmallintType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public SmallintType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SmallintType(metas);
            }

            @Override
            @NotNull
            public SmallintType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new SmallintType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"smallint_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), SmallintType.class) ^ true);
            }

            public int hashCode() {
                return 18002;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public SmallintType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ SmallintType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public SmallintType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class IntegerType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public IntegerType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new IntegerType(metas);
            }

            @Override
            @NotNull
            public IntegerType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new IntegerType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"integer_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), IntegerType.class) ^ true);
            }

            public int hashCode() {
                return 18003;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public IntegerType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ IntegerType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public IntegerType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B)\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J,\u0010\u0014\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "precision", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPrecision", "()Lorg/partiql/pig/runtime/LongPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class FloatType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive precision;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(FloatType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public FloatType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new FloatType(this.precision, metas);
            }

            @Override
            @NotNull
            public FloatType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new FloatType(this.precision, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[2];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"float_type", null, null, (int)6, null);
                LongPrimitive longPrimitive = this.precision;
                if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[1] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final FloatType copy(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new FloatType(precision, metas);
            }

            public static /* synthetic */ FloatType copy$default(FloatType floatType, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = floatType.precision;
                }
                if ((n & 2) != 0) {
                    map2 = floatType.getMetas();
                }
                return floatType.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), FloatType.class) ^ true) {
                    return false;
                }
                FloatType cfr_ignored_0 = (FloatType)other;
                return !(Intrinsics.areEqual(this.precision, ((FloatType)other).precision) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                FloatType floatType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getPrecision() {
                return this.precision;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public FloatType(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.precision = precision;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ FloatType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getPrecision();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = floatType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ FloatType(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class RealType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public RealType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new RealType(metas);
            }

            @Override
            @NotNull
            public RealType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new RealType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"real_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), RealType.class) ^ true);
            }

            public int hashCode() {
                return 18005;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public RealType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ RealType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public RealType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DoublePrecisionType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public DoublePrecisionType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DoublePrecisionType(metas);
            }

            @Override
            @NotNull
            public DoublePrecisionType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DoublePrecisionType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"double_precision_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), DoublePrecisionType.class) ^ true);
            }

            public int hashCode() {
                return 18006;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DoublePrecisionType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ DoublePrecisionType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public DoublePrecisionType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B3\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J8\u0010\u0016\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u000eH\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0014\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "precision", "Lorg/partiql/pig/runtime/LongPrimitive;", "scale", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPrecision", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getScale", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DecimalType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive precision;
            @Nullable
            private final LongPrimitive scale;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DecimalType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public DecimalType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DecimalType(this.precision, this.scale, metas);
            }

            @Override
            @NotNull
            public DecimalType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DecimalType(this.precision, this.scale, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                LongPrimitive longPrimitive;
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[3];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"decimal_type", null, null, (int)6, null);
                LongPrimitive longPrimitive2 = this.precision;
                if (longPrimitive2 == null || (longPrimitive2 = longPrimitive2.toIonElement()) == null) {
                    longPrimitive2 = ionElementArray[1] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((longPrimitive = this.scale) == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[2] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final DecimalType copy(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DecimalType(precision, scale, metas);
            }

            public static /* synthetic */ DecimalType copy$default(DecimalType decimalType, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = decimalType.precision;
                }
                if ((n & 2) != 0) {
                    longPrimitive2 = decimalType.scale;
                }
                if ((n & 4) != 0) {
                    map2 = decimalType.getMetas();
                }
                return decimalType.copy(longPrimitive, longPrimitive2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), DecimalType.class) ^ true) {
                    return false;
                }
                DecimalType cfr_ignored_0 = (DecimalType)other;
                if (Intrinsics.areEqual(this.precision, ((DecimalType)other).precision) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.scale, ((DecimalType)other).scale) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                DecimalType decimalType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getPrecision() {
                return this.precision;
            }

            @Nullable
            public final LongPrimitive getScale() {
                return this.scale;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DecimalType(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.precision = precision;
                this.scale = scale;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ DecimalType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getPrecision();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        longPrimitive = this.this$0.getScale();
                        int n = 31 * hc;
                        bl = false;
                        LongPrimitive longPrimitive3 = longPrimitive;
                        int n2 = longPrimitive3 != null ? longPrimitive3.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = decimalType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ DecimalType(LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, longPrimitive2, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000>\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\t\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B3\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\t\u00a2\u0006\u0002\u0010\nJ \u0010\u0016\u001a\u00020\u00002\u0016\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tH\u0016J8\u0010\u0016\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tJ\u0013\u0010\u0017\u001a\u00020\u00182\b\u0010\u0019\u001a\u0004\u0018\u00010\bH\u0096\u0002J\b\u0010\u001a\u001a\u00020\u000eH\u0016J\b\u0010\u001b\u001a\u00020\u001cH\u0016J\u0018\u0010\u001d\u001a\u00020\u00002\u0006\u0010\u001e\u001a\u00020\u00072\u0006\u0010\u001f\u001a\u00020\bH\u0016R$\u0010\u0005\u001a\u0012\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00020\b0\u0006j\u0002`\tX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u000b\u0010\fR\u001b\u0010\r\u001a\u00020\u000e8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0011\u0010\u0012\u001a\u0004\b\u000f\u0010\u0010R\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0015\u0010\u0014\u00a8\u0006 "}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "precision", "Lorg/partiql/pig/runtime/LongPrimitive;", "scale", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPrecision", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getScale", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class NumericType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive precision;
            @Nullable
            private final LongPrimitive scale;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(NumericType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public NumericType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new NumericType(this.precision, this.scale, metas);
            }

            @Override
            @NotNull
            public NumericType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new NumericType(this.precision, this.scale, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                LongPrimitive longPrimitive;
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[3];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"numeric_type", null, null, (int)6, null);
                LongPrimitive longPrimitive2 = this.precision;
                if (longPrimitive2 == null || (longPrimitive2 = longPrimitive2.toIonElement()) == null) {
                    longPrimitive2 = ionElementArray[1] = Ion.ionNull$default(null, (int)1, null);
                }
                if ((longPrimitive = this.scale) == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[2] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final NumericType copy(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new NumericType(precision, scale, metas);
            }

            public static /* synthetic */ NumericType copy$default(NumericType numericType, LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = numericType.precision;
                }
                if ((n & 2) != 0) {
                    longPrimitive2 = numericType.scale;
                }
                if ((n & 4) != 0) {
                    map2 = numericType.getMetas();
                }
                return numericType.copy(longPrimitive, longPrimitive2, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), NumericType.class) ^ true) {
                    return false;
                }
                NumericType cfr_ignored_0 = (NumericType)other;
                if (Intrinsics.areEqual(this.precision, ((NumericType)other).precision) ^ true) {
                    return false;
                }
                return !(Intrinsics.areEqual(this.scale, ((NumericType)other).scale) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                NumericType numericType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getPrecision() {
                return this.precision;
            }

            @Nullable
            public final LongPrimitive getScale() {
                return this.scale;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public NumericType(@Nullable LongPrimitive precision, @Nullable LongPrimitive scale, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.precision = precision;
                this.scale = scale;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ NumericType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getPrecision();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        longPrimitive = this.this$0.getScale();
                        int n = 31 * hc;
                        bl = false;
                        LongPrimitive longPrimitive3 = longPrimitive;
                        int n2 = longPrimitive3 != null ? longPrimitive3.hashCode() : 0;
                        hc = n + n2;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = numericType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ NumericType(LongPrimitive longPrimitive, LongPrimitive longPrimitive2, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 4) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, longPrimitive2, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class TimestampType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public TimestampType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimestampType(metas);
            }

            @Override
            @NotNull
            public TimestampType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new TimestampType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"timestamp_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), TimestampType.class) ^ true);
            }

            public int hashCode() {
                return 18009;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public TimestampType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ TimestampType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public TimestampType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B)\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J,\u0010\u0014\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "length", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getLength", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CharacterType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive length;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(CharacterType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public CharacterType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CharacterType(this.length, metas);
            }

            @Override
            @NotNull
            public CharacterType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CharacterType(this.length, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[2];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"character_type", null, null, (int)6, null);
                LongPrimitive longPrimitive = this.length;
                if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[1] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final CharacterType copy(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CharacterType(length, metas);
            }

            public static /* synthetic */ CharacterType copy$default(CharacterType characterType, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = characterType.length;
                }
                if ((n & 2) != 0) {
                    map2 = characterType.getMetas();
                }
                return characterType.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), CharacterType.class) ^ true) {
                    return false;
                }
                CharacterType cfr_ignored_0 = (CharacterType)other;
                return !(Intrinsics.areEqual(this.length, ((CharacterType)other).length) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                CharacterType characterType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getLength() {
                return this.length;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CharacterType(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.length = length;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ CharacterType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getLength();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = characterType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ CharacterType(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\b\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B)\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J,\u0010\u0014\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\u000fH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\f\u0010\rR\u001b\u0010\u000e\u001a\u00020\u000f8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0012\u0010\u0013\u001a\u0004\b\u0010\u0010\u0011\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "length", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getLength", "()Lorg/partiql/pig/runtime/LongPrimitive;", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class CharacterVaryingType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive length;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(CharacterVaryingType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public CharacterVaryingType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CharacterVaryingType(this.length, metas);
            }

            @Override
            @NotNull
            public CharacterVaryingType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new CharacterVaryingType(this.length, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[2];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"character_varying_type", null, null, (int)6, null);
                LongPrimitive longPrimitive = this.length;
                if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[1] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final CharacterVaryingType copy(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new CharacterVaryingType(length, metas);
            }

            public static /* synthetic */ CharacterVaryingType copy$default(CharacterVaryingType characterVaryingType, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = characterVaryingType.length;
                }
                if ((n & 2) != 0) {
                    map2 = characterVaryingType.getMetas();
                }
                return characterVaryingType.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), CharacterVaryingType.class) ^ true) {
                    return false;
                }
                CharacterVaryingType cfr_ignored_0 = (CharacterVaryingType)other;
                return !(Intrinsics.areEqual(this.length, ((CharacterVaryingType)other).length) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                CharacterVaryingType characterVaryingType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getLength() {
                return this.length;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public CharacterVaryingType(@Nullable LongPrimitive length, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.length = length;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ CharacterVaryingType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getLength();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = characterVaryingType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ CharacterVaryingType(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class MissingType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public MissingType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new MissingType(metas);
            }

            @Override
            @NotNull
            public MissingType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new MissingType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"missing_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), MissingType.class) ^ true);
            }

            public int hashCode() {
                return 18012;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public MissingType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ MissingType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public MissingType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class StringType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public StringType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new StringType(metas);
            }

            @Override
            @NotNull
            public StringType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new StringType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"string_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), StringType.class) ^ true);
            }

            public int hashCode() {
                return 18013;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public StringType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ StringType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public StringType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class SymbolType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public SymbolType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SymbolType(metas);
            }

            @Override
            @NotNull
            public SymbolType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new SymbolType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"symbol_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), SymbolType.class) ^ true);
            }

            public int hashCode() {
                return 18014;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public SymbolType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ SymbolType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public SymbolType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class BlobType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public BlobType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new BlobType(metas);
            }

            @Override
            @NotNull
            public BlobType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new BlobType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"blob_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), BlobType.class) ^ true);
            }

            public int hashCode() {
                return 18015;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public BlobType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ BlobType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public BlobType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ClobType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ClobType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ClobType(metas);
            }

            @Override
            @NotNull
            public ClobType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ClobType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"clob_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ClobType.class) ^ true);
            }

            public int hashCode() {
                return 18016;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ClobType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ClobType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ClobType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class DateType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public DateType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new DateType(metas);
            }

            @Override
            @NotNull
            public DateType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new DateType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"date_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), DateType.class) ^ true);
            }

            public int hashCode() {
                return 18017;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public DateType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ DateType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public DateType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B)\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J,\u0010\u0014\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "precision", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPrecision", "()Lorg/partiql/pig/runtime/LongPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class TimeType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive precision;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(TimeType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public TimeType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimeType(this.precision, metas);
            }

            @Override
            @NotNull
            public TimeType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new TimeType(this.precision, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[2];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"time_type", null, null, (int)6, null);
                LongPrimitive longPrimitive = this.precision;
                if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[1] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final TimeType copy(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimeType(precision, metas);
            }

            public static /* synthetic */ TimeType copy$default(TimeType timeType, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = timeType.precision;
                }
                if ((n & 2) != 0) {
                    map2 = timeType.getMetas();
                }
                return timeType.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), TimeType.class) ^ true) {
                    return false;
                }
                TimeType cfr_ignored_0 = (TimeType)other;
                return !(Intrinsics.areEqual(this.precision, ((TimeType)other).precision) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                TimeType timeType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getPrecision() {
                return this.precision;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public TimeType(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.precision = precision;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ TimeType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getPrecision();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = timeType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ TimeType(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000<\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\b\n\u0002\b\b\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B)\u0012\b\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u0012\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\b\u00a2\u0006\u0002\u0010\tJ \u0010\u0014\u001a\u00020\u00002\u0016\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bH\u0016J,\u0010\u0014\u001a\u00020\u00002\n\b\u0002\u0010\u0002\u001a\u0004\u0018\u00010\u00032\u0018\b\u0002\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bJ\u0013\u0010\u0015\u001a\u00020\u00162\b\u0010\u0017\u001a\u0004\u0018\u00010\u0007H\u0096\u0002J\b\u0010\u0018\u001a\u00020\rH\u0016J\b\u0010\u0019\u001a\u00020\u001aH\u0016J\u0018\u0010\u001b\u001a\u00020\u00002\u0006\u0010\u001c\u001a\u00020\u00062\u0006\u0010\u001d\u001a\u00020\u0007H\u0016R$\u0010\u0004\u001a\u0012\u0012\u0004\u0012\u00020\u0006\u0012\u0004\u0012\u00020\u00070\u0005j\u0002`\bX\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\u000bR\u001b\u0010\f\u001a\u00020\r8BX\u0082\u0084\u0002\u00a2\u0006\f\n\u0004\b\u0010\u0010\u0011\u001a\u0004\b\u000e\u0010\u000fR\u0013\u0010\u0002\u001a\u0004\u0018\u00010\u0003\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0012\u0010\u0013\u00a8\u0006\u001e"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "precision", "Lorg/partiql/pig/runtime/LongPrimitive;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Lorg/partiql/pig/runtime/LongPrimitive;Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "myHashCode", "", "getMyHashCode", "()I", "myHashCode$delegate", "Lkotlin/Lazy;", "getPrecision", "()Lorg/partiql/pig/runtime/LongPrimitive;", "copy", "equals", "", "other", "hashCode", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class TimeWithTimeZoneType
        extends Type {
            static final /* synthetic */ KProperty[] $$delegatedProperties;
            private final Lazy myHashCode$delegate;
            @Nullable
            private final LongPrimitive precision;
            @NotNull
            private final Map<String, Object> metas;

            static {
                $$delegatedProperties = new KProperty[]{Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(TimeWithTimeZoneType.class), "myHashCode", "getMyHashCode()I"))};
            }

            @Override
            @NotNull
            public TimeWithTimeZoneType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimeWithTimeZoneType(this.precision, metas);
            }

            @Override
            @NotNull
            public TimeWithTimeZoneType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new TimeWithTimeZoneType(this.precision, IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                Map<String, Object> map2 = this.getMetas();
                IonElement[] ionElementArray = new IonElement[2];
                ionElementArray[0] = (IonElement)Ion.ionSymbol$default((String)"time_with_time_zone_type", null, null, (int)6, null);
                LongPrimitive longPrimitive = this.precision;
                if (longPrimitive == null || (longPrimitive = longPrimitive.toIonElement()) == null) {
                    longPrimitive = Ion.ionNull$default(null, (int)1, null);
                }
                ionElementArray[1] = longPrimitive;
                IonElement[] ionElementArray2 = ionElementArray;
                List list = null;
                Map<String, Object> map3 = map2;
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray2, list, map3, (int)2, null);
                return elements;
            }

            @NotNull
            public final TimeWithTimeZoneType copy(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TimeWithTimeZoneType(precision, metas);
            }

            public static /* synthetic */ TimeWithTimeZoneType copy$default(TimeWithTimeZoneType timeWithTimeZoneType, LongPrimitive longPrimitive, Map map2, int n, Object object) {
                if ((n & 1) != 0) {
                    longPrimitive = timeWithTimeZoneType.precision;
                }
                if ((n & 2) != 0) {
                    map2 = timeWithTimeZoneType.getMetas();
                }
                return timeWithTimeZoneType.copy(longPrimitive, map2);
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                if (Intrinsics.areEqual(other.getClass(), TimeWithTimeZoneType.class) ^ true) {
                    return false;
                }
                TimeWithTimeZoneType cfr_ignored_0 = (TimeWithTimeZoneType)other;
                return !(Intrinsics.areEqual(this.precision, ((TimeWithTimeZoneType)other).precision) ^ true);
            }

            private final int getMyHashCode() {
                Lazy lazy = this.myHashCode$delegate;
                TimeWithTimeZoneType timeWithTimeZoneType = this;
                KProperty kProperty = $$delegatedProperties[0];
                boolean bl = false;
                return ((Number)lazy.getValue()).intValue();
            }

            public int hashCode() {
                return this.getMyHashCode();
            }

            @Nullable
            public final LongPrimitive getPrecision() {
                return this.precision;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public TimeWithTimeZoneType(@Nullable LongPrimitive precision, @NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.precision = precision;
                this.metas = metas;
                this.myHashCode$delegate = LazyKt.lazy(LazyThreadSafetyMode.NONE, (Function0)new Function0<Integer>(this){
                    final /* synthetic */ TimeWithTimeZoneType this$0;

                    /*
                     * WARNING - void declaration
                     */
                    public final int invoke() {
                        void var1_3;
                        LongPrimitive longPrimitive = this.this$0.getPrecision();
                        boolean bl = false;
                        LongPrimitive longPrimitive2 = longPrimitive;
                        int hc = longPrimitive2 != null ? longPrimitive2.hashCode() : 0;
                        return (int)var1_3;
                    }
                    {
                        this.this$0 = timeWithTimeZoneType;
                        super(0);
                    }
                });
            }

            public /* synthetic */ TimeWithTimeZoneType(LongPrimitive longPrimitive, Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 2) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(longPrimitive, map2);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class StructType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public StructType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new StructType(metas);
            }

            @Override
            @NotNull
            public StructType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new StructType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"struct_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), StructType.class) ^ true);
            }

            public int hashCode() {
                return 18020;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public StructType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ StructType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public StructType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class TupleType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public TupleType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new TupleType(metas);
            }

            @Override
            @NotNull
            public TupleType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new TupleType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"tuple_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), TupleType.class) ^ true);
            }

            public int hashCode() {
                return 18021;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public TupleType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ TupleType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public TupleType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class ListType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public ListType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new ListType(metas);
            }

            @Override
            @NotNull
            public ListType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new ListType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"list_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), ListType.class) ^ true);
            }

            public int hashCode() {
                return 18022;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public ListType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ ListType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public ListType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class SexpType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public SexpType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new SexpType(metas);
            }

            @Override
            @NotNull
            public SexpType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new SexpType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"sexp_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), SexpType.class) ^ true);
            }

            public int hashCode() {
                return 18023;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public SexpType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ SexpType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public SexpType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00004\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u00002\u00020\u0001B\u001f\u0012\u0018\b\u0002\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006\u00a2\u0006\u0002\u0010\u0007J \u0010\n\u001a\u00020\u00002\u0016\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006H\u0016J\u0013\u0010\u000b\u001a\u00020\f2\b\u0010\r\u001a\u0004\u0018\u00010\u0005H\u0096\u0002J\b\u0010\u000e\u001a\u00020\u000fH\u0016J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\u0018\u0010\u0012\u001a\u00020\u00002\u0006\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0014\u001a\u00020\u0005H\u0016R$\u0010\u0002\u001a\u0012\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u0003j\u0002`\u0006X\u0096\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\t\u00a8\u0006\u0015"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "(Ljava/util/Map;)V", "getMetas", "()Ljava/util/Map;", "copy", "equals", "", "other", "hashCode", "", "toIonElement", "Lcom/amazon/ionelement/api/SexpElement;", "withMeta", "metaKey", "metaValue", "lang"})
        public static final class BagType
        extends Type {
            @NotNull
            private final Map<String, Object> metas;

            @Override
            @NotNull
            public BagType copy(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                return new BagType(metas);
            }

            @Override
            @NotNull
            public BagType withMeta(@NotNull String metaKey, @NotNull Object metaValue) {
                Intrinsics.checkParameterIsNotNull(metaKey, "metaKey");
                Intrinsics.checkParameterIsNotNull(metaValue, "metaValue");
                return new BagType(IonMeta.plus(this.getMetas(), (Map)IonMeta.metaContainerOf((Pair[])new Pair[]{TuplesKt.to(metaKey, metaValue)})));
            }

            @Override
            @NotNull
            public SexpElement toIonElement() {
                IonElement[] ionElementArray = new IonElement[]{(IonElement)Ion.ionSymbol$default((String)"bag_type", null, null, (int)6, null)};
                List list = null;
                Map<String, Object> map2 = this.getMetas();
                SexpElement elements = Ion.ionSexpOf$default((IonElement[])ionElementArray, list, map2, (int)2, null);
                return elements;
            }

            public boolean equals(@Nullable Object other) {
                if (other == null) {
                    return false;
                }
                if (this == other) {
                    return true;
                }
                return !(Intrinsics.areEqual(other.getClass(), BagType.class) ^ true);
            }

            public int hashCode() {
                return 18024;
            }

            @Override
            @NotNull
            public Map<String, Object> getMetas() {
                return this.metas;
            }

            public BagType(@NotNull Map<String, ? extends Object> metas) {
                Intrinsics.checkParameterIsNotNull(metas, "metas");
                super(null, 1, null);
                this.metas = metas;
            }

            public /* synthetic */ BagType(Map map2, int n, DefaultConstructorMarker defaultConstructorMarker) {
                if ((n & 1) != 0) {
                    map2 = IonMeta.emptyMetaContainer();
                }
                this(map2);
            }

            public BagType() {
                this(null, 1, null);
            }
        }

        @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u00de\u0001\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\bf\u0018\u0000*\u0004\b\u0000\u0010\u00012\u00020\u0002J\u0015\u0010\u0003\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0005H\u0016\u00a2\u0006\u0002\u0010\u0006J\u0015\u0010\u0007\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\bH&\u00a2\u0006\u0002\u0010\tJ\u0015\u0010\n\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000bH&\u00a2\u0006\u0002\u0010\fJ\u0015\u0010\r\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u000eH&\u00a2\u0006\u0002\u0010\u000fJ\u0015\u0010\u0010\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0011H&\u00a2\u0006\u0002\u0010\u0012J\u0015\u0010\u0013\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0014H&\u00a2\u0006\u0002\u0010\u0015J\u0015\u0010\u0016\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u0017H&\u00a2\u0006\u0002\u0010\u0018J\u0015\u0010\u0019\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u001aH&\u00a2\u0006\u0002\u0010\u001bJ\u0015\u0010\u001c\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020\u001dH&\u00a2\u0006\u0002\u0010\u001eJ\u0015\u0010\u001f\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020 H&\u00a2\u0006\u0002\u0010!J\u0015\u0010\"\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020#H&\u00a2\u0006\u0002\u0010$J\u0015\u0010%\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020&H&\u00a2\u0006\u0002\u0010'J\u0015\u0010(\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020)H&\u00a2\u0006\u0002\u0010*J\u0015\u0010+\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020,H&\u00a2\u0006\u0002\u0010-J\u0015\u0010.\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020/H&\u00a2\u0006\u0002\u00100J\u0015\u00101\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000202H&\u00a2\u0006\u0002\u00103J\u0015\u00104\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000205H&\u00a2\u0006\u0002\u00106J\u0015\u00107\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u000208H&\u00a2\u0006\u0002\u00109J\u0015\u0010:\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020;H&\u00a2\u0006\u0002\u0010<J\u0015\u0010=\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020>H&\u00a2\u0006\u0002\u0010?J\u0015\u0010@\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020AH&\u00a2\u0006\u0002\u0010BJ\u0015\u0010C\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020DH&\u00a2\u0006\u0002\u0010EJ\u0015\u0010F\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020GH&\u00a2\u0006\u0002\u0010HJ\u0015\u0010I\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020JH&\u00a2\u0006\u0002\u0010KJ\u0015\u0010L\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020MH&\u00a2\u0006\u0002\u0010NJ\u0015\u0010O\u001a\u00028\u00002\u0006\u0010\u0004\u001a\u00020PH&\u00a2\u0006\u0002\u0010Q\u00a8\u0006R"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Type$Converter;", "T", "", "convert", "node", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "(Lorg/partiql/lang/domains/PartiqlAst$Type;)Ljava/lang/Object;", "convertBagType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;)Ljava/lang/Object;", "convertBlobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;)Ljava/lang/Object;", "convertBooleanType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;)Ljava/lang/Object;", "convertCharacterType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;)Ljava/lang/Object;", "convertCharacterVaryingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;)Ljava/lang/Object;", "convertClobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;)Ljava/lang/Object;", "convertDateType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;)Ljava/lang/Object;", "convertDecimalType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;)Ljava/lang/Object;", "convertDoublePrecisionType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;)Ljava/lang/Object;", "convertFloatType", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;)Ljava/lang/Object;", "convertIntegerType", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;)Ljava/lang/Object;", "convertListType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;)Ljava/lang/Object;", "convertMissingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;)Ljava/lang/Object;", "convertNullType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;)Ljava/lang/Object;", "convertNumericType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;)Ljava/lang/Object;", "convertRealType", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;)Ljava/lang/Object;", "convertSexpType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;)Ljava/lang/Object;", "convertSmallintType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;)Ljava/lang/Object;", "convertStringType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;)Ljava/lang/Object;", "convertStructType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;)Ljava/lang/Object;", "convertSymbolType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;)Ljava/lang/Object;", "convertTimeType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;)Ljava/lang/Object;", "convertTimeWithTimeZoneType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;)Ljava/lang/Object;", "convertTimestampType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;)Ljava/lang/Object;", "convertTupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;)Ljava/lang/Object;", "lang"})
        public static interface Converter<T> {
            public T convert(@NotNull Type var1);

            public T convertNullType(@NotNull NullType var1);

            public T convertBooleanType(@NotNull BooleanType var1);

            public T convertSmallintType(@NotNull SmallintType var1);

            public T convertIntegerType(@NotNull IntegerType var1);

            public T convertFloatType(@NotNull FloatType var1);

            public T convertRealType(@NotNull RealType var1);

            public T convertDoublePrecisionType(@NotNull DoublePrecisionType var1);

            public T convertDecimalType(@NotNull DecimalType var1);

            public T convertNumericType(@NotNull NumericType var1);

            public T convertTimestampType(@NotNull TimestampType var1);

            public T convertCharacterType(@NotNull CharacterType var1);

            public T convertCharacterVaryingType(@NotNull CharacterVaryingType var1);

            public T convertMissingType(@NotNull MissingType var1);

            public T convertStringType(@NotNull StringType var1);

            public T convertSymbolType(@NotNull SymbolType var1);

            public T convertBlobType(@NotNull BlobType var1);

            public T convertClobType(@NotNull ClobType var1);

            public T convertDateType(@NotNull DateType var1);

            public T convertTimeType(@NotNull TimeType var1);

            public T convertTimeWithTimeZoneType(@NotNull TimeWithTimeZoneType var1);

            public T convertStructType(@NotNull StructType var1);

            public T convertTupleType(@NotNull TupleType var1);

            public T convertListType(@NotNull ListType var1);

            public T convertSexpType(@NotNull SexpType var1);

            public T convertBagType(@NotNull BagType var1);

            @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3)
            public static final class DefaultImpls {
                public static <T> T convert(Converter<T> $this, @NotNull Type node) {
                    T t;
                    Intrinsics.checkParameterIsNotNull(node, "node");
                    Type type = node;
                    if (type instanceof NullType) {
                        t = $this.convertNullType((NullType)node);
                    } else if (type instanceof BooleanType) {
                        t = $this.convertBooleanType((BooleanType)node);
                    } else if (type instanceof SmallintType) {
                        t = $this.convertSmallintType((SmallintType)node);
                    } else if (type instanceof IntegerType) {
                        t = $this.convertIntegerType((IntegerType)node);
                    } else if (type instanceof FloatType) {
                        t = $this.convertFloatType((FloatType)node);
                    } else if (type instanceof RealType) {
                        t = $this.convertRealType((RealType)node);
                    } else if (type instanceof DoublePrecisionType) {
                        t = $this.convertDoublePrecisionType((DoublePrecisionType)node);
                    } else if (type instanceof DecimalType) {
                        t = $this.convertDecimalType((DecimalType)node);
                    } else if (type instanceof NumericType) {
                        t = $this.convertNumericType((NumericType)node);
                    } else if (type instanceof TimestampType) {
                        t = $this.convertTimestampType((TimestampType)node);
                    } else if (type instanceof CharacterType) {
                        t = $this.convertCharacterType((CharacterType)node);
                    } else if (type instanceof CharacterVaryingType) {
                        t = $this.convertCharacterVaryingType((CharacterVaryingType)node);
                    } else if (type instanceof MissingType) {
                        t = $this.convertMissingType((MissingType)node);
                    } else if (type instanceof StringType) {
                        t = $this.convertStringType((StringType)node);
                    } else if (type instanceof SymbolType) {
                        t = $this.convertSymbolType((SymbolType)node);
                    } else if (type instanceof BlobType) {
                        t = $this.convertBlobType((BlobType)node);
                    } else if (type instanceof ClobType) {
                        t = $this.convertClobType((ClobType)node);
                    } else if (type instanceof DateType) {
                        t = $this.convertDateType((DateType)node);
                    } else if (type instanceof TimeType) {
                        t = $this.convertTimeType((TimeType)node);
                    } else if (type instanceof TimeWithTimeZoneType) {
                        t = $this.convertTimeWithTimeZoneType((TimeWithTimeZoneType)node);
                    } else if (type instanceof StructType) {
                        t = $this.convertStructType((StructType)node);
                    } else if (type instanceof TupleType) {
                        t = $this.convertTupleType((TupleType)node);
                    } else if (type instanceof ListType) {
                        t = $this.convertListType((ListType)node);
                    } else if (type instanceof SexpType) {
                        t = $this.convertSexpType((SexpType)node);
                    } else if (type instanceof BagType) {
                        t = $this.convertBagType((BagType)node);
                    } else {
                        throw new NoWhenBranchMatchedException();
                    }
                    return t;
                }
            }
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u0016\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\b\u0002\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0003J\u0010\u0010\u0004\u001a\u00020\u00022\u0006\u0010\u0005\u001a\u00020\u0006H\u0014\u00a8\u0006\u0007"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$IonElementTransformer;", "Lorg/partiql/pig/runtime/IonElementTransformerBase;", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "()V", "innerTransform", "sexp", "Lcom/amazon/ionelement/api/SexpElement;", "lang"})
    private static final class IonElementTransformer
    extends IonElementTransformerBase<PartiqlAstNode> {
        /*
         * WARNING - void declaration
         */
        @NotNull
        protected PartiqlAstNode innerTransform(@NotNull SexpElement sexp) {
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(sexp, "sexp");
            switch (IonElementExtensionsKt.getTag((SeqElement)((SeqElement)sexp))) {
                case "time_value": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(5, 6));
                    LongPrimitive hour = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    LongPrimitive minute = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1));
                    LongPrimitive second = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2));
                    LongPrimitive nano = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)3));
                    LongPrimitive precision = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)4));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)5);
                    LongPrimitive tzMinutes = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new TimeValue(hour, minute, second, nano, precision, tzMinutes, sexp.getMetas());
                    break;
                }
                case "let": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable nano = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        LetBinding letBinding;
                        void $receiver$iv3;
                        void it;
                        AnyElement anyElement = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        void var13_554 = it;
                        IonElementTransformer this_$iv = this;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv3.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof LetBinding)) {
                            domainNode = null;
                        }
                        if ((LetBinding)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv3.getMetas()), (String)("Expected '" + LetBinding.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(letBinding);
                    }
                    List letBindings = (List)destination$iv$iv;
                    partiqlAstNode = new Let(letBindings, sexp.getMetas());
                    break;
                }
                case "let_binding": {
                    void $receiver$iv2;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv2.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv2.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr2 = expr;
                    SymbolPrimitive name = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1));
                    partiqlAstNode = new LetBinding(expr2, name, sexp.getMetas());
                    break;
                }
                case "expr_pair": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $receiver$iv2 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv2.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv2.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr first = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv2 = this;
                    DomainNode domainObject$iv2 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv2, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode2 = domainObject$iv2;
                    if (!(domainNode2 instanceof Expr)) {
                        domainNode2 = null;
                    }
                    Expr expr3 = (Expr)domainNode2;
                    if (expr3 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv2.getClass() + '\''));
                        throw null;
                    }
                    Expr second = expr3;
                    partiqlAstNode = new ExprPair(first, second, sexp.getMetas());
                    break;
                }
                case "expr_pair_list": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        ExprPair exprPair;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv3 = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv3.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof ExprPair)) {
                            domainNode = null;
                        }
                        if ((ExprPair)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv3.getMetas()), (String)("Expected '" + ExprPair.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(exprPair);
                    }
                    List pairs = (List)destination$iv$iv;
                    partiqlAstNode = new ExprPairList(pairs, sexp.getMetas());
                    break;
                }
                case "group_by": {
                    void $receiver$iv;
                    void $receiver$iv4;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 3));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv4.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof GroupingStrategy)) {
                        domainNode = null;
                    }
                    GroupingStrategy groupingStrategy = (GroupingStrategy)domainNode;
                    if (groupingStrategy == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv4.getMetas()), (String)("Expected '" + GroupingStrategy.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    GroupingStrategy strategy = groupingStrategy;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv3 = this;
                    DomainNode domainObject$iv3 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv3, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode3 = domainObject$iv3;
                    if (!(domainNode3 instanceof GroupKeyList)) {
                        domainNode3 = null;
                    }
                    GroupKeyList groupKeyList = (GroupKeyList)domainNode3;
                    if (groupKeyList == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + GroupKeyList.class + "' but found '" + domainObject$iv3.getClass() + '\''));
                        throw null;
                    }
                    GroupKeyList keyList = groupKeyList;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    SymbolPrimitive groupAsAlias = anyElement != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new GroupBy(strategy, keyList, groupAsAlias, sexp.getMetas());
                    break;
                }
                case "group_key_list": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        GroupKey groupKey;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv5 = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv5.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof GroupKey)) {
                            domainNode = null;
                        }
                        if ((GroupKey)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv5.getMetas()), (String)("Expected '" + GroupKey.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(groupKey);
                    }
                    List keys2 = (List)destination$iv$iv;
                    partiqlAstNode = new GroupKeyList(keys2, sexp.getMetas());
                    break;
                }
                case "group_key": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr4 = expr;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    SymbolPrimitive asAlias = anyElement != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new GroupKey(expr4, asAlias, sexp.getMetas());
                    break;
                }
                case "order_by": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable domainObject$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        SortSpec sortSpec;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv4 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv4;
                        if (!(domainNode instanceof SortSpec)) {
                            domainNode = null;
                        }
                        if ((SortSpec)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + SortSpec.class + "' but found '" + domainObject$iv4.getClass() + '\''));
                            throw null;
                        }
                        collection.add(sortSpec);
                    }
                    List sortSpecs = (List)destination$iv$iv;
                    partiqlAstNode = new OrderBy(sortSpecs, sexp.getMetas());
                    break;
                }
                case "sort_spec": {
                    OrderingSpec orderingSpec;
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr5 = expr;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    if (anyElement != null) {
                        void $receiver$iv6;
                        domainObject$iv = anyElement;
                        IonElementTransformer this_$iv4 = this;
                        DomainNode domainObject$iv5 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv4, (SexpElement)$receiver$iv6.asSexp());
                        DomainNode domainNode4 = domainObject$iv5;
                        if (!(domainNode4 instanceof OrderingSpec)) {
                            domainNode4 = null;
                        }
                        if ((orderingSpec = (OrderingSpec)domainNode4) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv6.getMetas()), (String)("Expected '" + OrderingSpec.class + "' but found '" + domainObject$iv5.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        orderingSpec = null;
                    }
                    OrderingSpec orderingSpec2 = orderingSpec;
                    partiqlAstNode = new SortSpec(expr5, orderingSpec2, sexp.getMetas());
                    break;
                }
                case "dml_op_list": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv6 = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        DmlOp dmlOp;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof DmlOp)) {
                            domainNode = null;
                        }
                        if ((DmlOp)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + DmlOp.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(dmlOp);
                    }
                    List ops = (List)destination$iv$iv;
                    partiqlAstNode = new DmlOpList(ops, sexp.getMetas());
                    break;
                }
                case "on_conflict": {
                    void $receiver$iv;
                    void $receiver$iv7;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv7.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv7.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr6 = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv5 = this;
                    DomainNode domainObject$iv6 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv5, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode5 = domainObject$iv6;
                    if (!(domainNode5 instanceof ConflictAction)) {
                        domainNode5 = null;
                    }
                    ConflictAction conflictAction = (ConflictAction)domainNode5;
                    if (conflictAction == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ConflictAction.class + "' but found '" + domainObject$iv6.getClass() + '\''));
                        throw null;
                    }
                    ConflictAction conflictAction2 = conflictAction;
                    partiqlAstNode = new OnConflict(expr6, conflictAction2, sexp.getMetas());
                    break;
                }
                case "returning_expr": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        ReturningElem returningElem;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv8 = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv8.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof ReturningElem)) {
                            domainNode = null;
                        }
                        if ((ReturningElem)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv8.getMetas()), (String)("Expected '" + ReturningElem.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(returningElem);
                    }
                    List elems = (List)destination$iv$iv;
                    partiqlAstNode = new ReturningExpr(elems, sexp.getMetas());
                    break;
                }
                case "returning_elem": {
                    void $receiver$iv;
                    void $receiver$iv9;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv9.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof ReturningMapping)) {
                        domainNode = null;
                    }
                    ReturningMapping returningMapping = (ReturningMapping)domainNode;
                    if (returningMapping == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv9.getMetas()), (String)("Expected '" + ReturningMapping.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    ReturningMapping mapping = returningMapping;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv6 = this;
                    DomainNode domainObject$iv7 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv6, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode6 = domainObject$iv7;
                    if (!(domainNode6 instanceof ColumnComponent)) {
                        domainNode6 = null;
                    }
                    ColumnComponent columnComponent = (ColumnComponent)domainNode6;
                    if (columnComponent == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ColumnComponent.class + "' but found '" + domainObject$iv7.getClass() + '\''));
                        throw null;
                    }
                    ColumnComponent column = columnComponent;
                    partiqlAstNode = new ReturningElem(mapping, column, sexp.getMetas());
                    break;
                }
                case "identifier": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    SymbolPrimitive name = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof CaseSensitivity)) {
                        domainNode = null;
                    }
                    CaseSensitivity caseSensitivity = (CaseSensitivity)domainNode;
                    if (caseSensitivity == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + CaseSensitivity.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    CaseSensitivity caseSensitivity2 = caseSensitivity;
                    partiqlAstNode = new Identifier(name, caseSensitivity2, sexp.getMetas());
                    break;
                }
                case "assignment": {
                    void $receiver$iv;
                    void $receiver$iv10;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    Object this_$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv7 = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv7, (SexpElement)$receiver$iv10.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv10.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr target = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    this_$iv = this;
                    DomainNode domainObject$iv8 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode7 = domainObject$iv8;
                    if (!(domainNode7 instanceof Expr)) {
                        domainNode7 = null;
                    }
                    Expr expr7 = (Expr)domainNode7;
                    if (expr7 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv8.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr7;
                    partiqlAstNode = new Assignment(target, value, sexp.getMetas());
                    break;
                }
                case "query": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement this_$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv8 = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv8, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr8 = expr;
                    partiqlAstNode = new Statement.Query(expr8, sexp.getMetas());
                    break;
                }
                case "dml": {
                    IntermediateRecord ir = IntermediateRecordKt.transformToIntermediateRecord((SexpElement)sexp);
                    DmlOpList operations2 = (DmlOpList)ir.processRequiredField("operations", (Function1)new Function1<AnyElement, DmlOpList>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final DmlOpList invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof DmlOpList)) {
                                domainNode = null;
                            }
                            DmlOpList dmlOpList = (DmlOpList)domainNode;
                            if (dmlOpList == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + DmlOpList.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return dmlOpList;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    FromSource from2 = (FromSource)ir.processOptionalField("from", (Function1)new Function1<AnyElement, FromSource>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final FromSource invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof FromSource)) {
                                domainNode = null;
                            }
                            FromSource fromSource = (FromSource)domainNode;
                            if (fromSource == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + FromSource.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return fromSource;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Expr where2 = (Expr)ir.processOptionalField("where", (Function1)new Function1<AnyElement, Expr>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Expr invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Expr)) {
                                domainNode = null;
                            }
                            Expr expr = (Expr)domainNode;
                            if (expr == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return expr;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    ReturningExpr returning2 = (ReturningExpr)ir.processOptionalField("returning", (Function1)new Function1<AnyElement, ReturningExpr>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final ReturningExpr invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof ReturningExpr)) {
                                domainNode = null;
                            }
                            ReturningExpr returningExpr = (ReturningExpr)domainNode;
                            if (returningExpr == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ReturningExpr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return returningExpr;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    ir.malformedIfAnyUnprocessedFieldsRemain();
                    partiqlAstNode = new Statement.Dml(operations2, from2, where2, returning2, sexp.getMetas());
                    break;
                }
                case "ddl": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement from2 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof DdlOp)) {
                        domainNode = null;
                    }
                    DdlOp ddlOp = (DdlOp)domainNode;
                    if (ddlOp == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + DdlOp.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    DdlOp op = ddlOp;
                    partiqlAstNode = new Statement.Ddl(op, sexp.getMetas());
                    break;
                }
                case "exec": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    SymbolPrimitive procedureName = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Iterable $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv2 : $this$mapTo$iv$iv) {
                        Expr expr;
                        void $receiver$iv;
                        void it;
                        AnyElement bl = (AnyElement)item$iv$iv2;
                        Collection collection = destination$iv$iv;
                        boolean bl2 = false;
                        void this_$iv = it;
                        IonElementTransformer this_$iv9 = this;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv9, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List args2 = (List)destination$iv$iv;
                    partiqlAstNode = new Statement.Exec(procedureName, args2, sexp.getMetas());
                    break;
                }
                case "missing": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Expr.Missing(sexp.getMetas());
                    break;
                }
                case "lit": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement value = ErrorHelpersKt.getRequiredIon((SexpElement)sexp, (int)0);
                    partiqlAstNode = new Expr.Lit(value, sexp.getMetas());
                    break;
                }
                case "id": {
                    void $receiver$iv;
                    void $receiver$iv11;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(3, 3));
                    SymbolPrimitive name = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv11.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof CaseSensitivity)) {
                        domainNode = null;
                    }
                    CaseSensitivity caseSensitivity = (CaseSensitivity)domainNode;
                    if (caseSensitivity == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv11.getMetas()), (String)("Expected '" + CaseSensitivity.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    CaseSensitivity caseSensitivity3 = caseSensitivity;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2);
                    IonElementTransformer this_$iv10 = this;
                    DomainNode domainObject$iv9 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv10, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode8 = domainObject$iv9;
                    if (!(domainNode8 instanceof ScopeQualifier)) {
                        domainNode8 = null;
                    }
                    ScopeQualifier scopeQualifier = (ScopeQualifier)domainNode8;
                    if (scopeQualifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ScopeQualifier.class + "' but found '" + domainObject$iv9.getClass() + '\''));
                        throw null;
                    }
                    ScopeQualifier qualifier = scopeQualifier;
                    partiqlAstNode = new Expr.Id(name, caseSensitivity3, qualifier, sexp.getMetas());
                    break;
                }
                case "parameter": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    LongPrimitive index = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    partiqlAstNode = new Expr.Parameter(index, sexp.getMetas());
                    break;
                }
                case "not": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement qualifier = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr9 = expr;
                    partiqlAstNode = new Expr.Not(expr9, sexp.getMetas());
                    break;
                }
                case "pos": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr10 = expr;
                    partiqlAstNode = new Expr.Pos(expr10, sexp.getMetas());
                    break;
                }
                case "neg": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr11 = expr;
                    partiqlAstNode = new Expr.Neg(expr11, sexp.getMetas());
                    break;
                }
                case "plus": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable domainObject$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        void $receiver$iv;
                        void it;
                        AnyElement item$iv$iv2 = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        void bl2 = it;
                        IonElementTransformer this_$iv = this;
                        DomainNode domainObject$iv10 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv10;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv10.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Plus(operands, sexp.getMetas());
                    break;
                }
                case "minus": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Minus(operands, sexp.getMetas());
                    break;
                }
                case "times": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Times(operands, sexp.getMetas());
                    break;
                }
                case "divide": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Divide(operands, sexp.getMetas());
                    break;
                }
                case "modulo": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Modulo(operands, sexp.getMetas());
                    break;
                }
                case "concat": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Concat(operands, sexp.getMetas());
                    break;
                }
                case "and": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.And(operands, sexp.getMetas());
                    break;
                }
                case "or": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Or(operands, sexp.getMetas());
                    break;
                }
                case "eq": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Eq(operands, sexp.getMetas());
                    break;
                }
                case "ne": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Ne(operands, sexp.getMetas());
                    break;
                }
                case "gt": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Gt(operands, sexp.getMetas());
                    break;
                }
                case "gte": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Gte(operands, sexp.getMetas());
                    break;
                }
                case "lt": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Lt(operands, sexp.getMetas());
                    break;
                }
                case "lte": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Lte(operands, sexp.getMetas());
                    break;
                }
                case "like": {
                    Expr expr;
                    void $receiver$iv;
                    void $receiver$iv12;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 3));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv12.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr12 = (Expr)domainNode;
                    if (expr12 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv12.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr12;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv11 = this;
                    DomainNode domainObject$iv11 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv11, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode9 = domainObject$iv11;
                    if (!(domainNode9 instanceof Expr)) {
                        domainNode9 = null;
                    }
                    Expr expr13 = (Expr)domainNode9;
                    if (expr13 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv11.getClass() + '\''));
                        throw null;
                    }
                    Expr pattern = expr13;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    if (anyElement != null) {
                        void $receiver$iv13;
                        domainObject$iv11 = anyElement;
                        IonElementTransformer this_$iv12 = this;
                        DomainNode domainObject$iv12 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv12, (SexpElement)$receiver$iv13.asSexp());
                        DomainNode domainNode10 = domainObject$iv12;
                        if (!(domainNode10 instanceof Expr)) {
                            domainNode10 = null;
                        }
                        if ((expr = (Expr)domainNode10) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv13.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv12.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        expr = null;
                    }
                    Expr escape = expr;
                    partiqlAstNode = new Expr.Like(value, pattern, escape, sexp.getMetas());
                    break;
                }
                case "between": {
                    void $receiver$iv;
                    void $receiver$iv14;
                    void $receiver$iv15;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(3, 3));
                    AnyElement escape = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv15.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv15.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv13 = this;
                    DomainNode domainObject$iv13 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv13, (SexpElement)$receiver$iv14.asSexp());
                    DomainNode domainNode11 = domainObject$iv13;
                    if (!(domainNode11 instanceof Expr)) {
                        domainNode11 = null;
                    }
                    Expr expr14 = (Expr)domainNode11;
                    if (expr14 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv14.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv13.getClass() + '\''));
                        throw null;
                    }
                    Expr from3 = expr14;
                    domainObject$iv13 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2);
                    IonElementTransformer this_$iv14 = this;
                    DomainNode domainObject$iv14 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv14, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode12 = domainObject$iv14;
                    if (!(domainNode12 instanceof Expr)) {
                        domainNode12 = null;
                    }
                    Expr expr15 = (Expr)domainNode12;
                    if (expr15 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv14.getClass() + '\''));
                        throw null;
                    }
                    Expr to = expr15;
                    partiqlAstNode = new Expr.Between(value, from3, to, sexp.getMetas());
                    break;
                }
                case "in_collection": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable this_$iv14 = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.InCollection(operands, sexp.getMetas());
                    break;
                }
                case "is_type": {
                    void $receiver$iv;
                    void $receiver$iv16;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv16.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv16.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv15 = this;
                    DomainNode domainObject$iv15 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv15, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode13 = domainObject$iv15;
                    if (!(domainNode13 instanceof Type)) {
                        domainNode13 = null;
                    }
                    Type type = (Type)domainNode13;
                    if (type == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Type.class + "' but found '" + domainObject$iv15.getClass() + '\''));
                        throw null;
                    }
                    Type type2 = type;
                    partiqlAstNode = new Expr.IsType(value, type2, sexp.getMetas());
                    break;
                }
                case "simple_case": {
                    Expr expr;
                    void $receiver$iv;
                    void $receiver$iv17;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 3));
                    Object this_$iv15 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv17.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr16 = (Expr)domainNode;
                    if (expr16 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv17.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr17 = expr16;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    this_$iv15 = this;
                    DomainNode domainObject$iv16 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv15, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode14 = domainObject$iv16;
                    if (!(domainNode14 instanceof ExprPairList)) {
                        domainNode14 = null;
                    }
                    ExprPairList exprPairList = (ExprPairList)domainNode14;
                    if (exprPairList == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ExprPairList.class + "' but found '" + domainObject$iv16.getClass() + '\''));
                        throw null;
                    }
                    ExprPairList cases = exprPairList;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    if (anyElement != null) {
                        void $receiver$iv18;
                        domainObject$iv16 = anyElement;
                        IonElementTransformer this_$iv16 = this;
                        DomainNode domainObject$iv17 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv16, (SexpElement)$receiver$iv18.asSexp());
                        DomainNode domainNode15 = domainObject$iv17;
                        if (!(domainNode15 instanceof Expr)) {
                            domainNode15 = null;
                        }
                        if ((expr = (Expr)domainNode15) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv18.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv17.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        expr = null;
                    }
                    Expr expr18 = expr;
                    partiqlAstNode = new Expr.SimpleCase(expr17, cases, expr18, sexp.getMetas());
                    break;
                }
                case "searched_case": {
                    Expr expr;
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 2));
                    AnyElement expr18 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof ExprPairList)) {
                        domainNode = null;
                    }
                    ExprPairList exprPairList = (ExprPairList)domainNode;
                    if (exprPairList == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ExprPairList.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    ExprPairList cases = exprPairList;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    if (anyElement != null) {
                        void $receiver$iv19;
                        domainObject$iv = anyElement;
                        IonElementTransformer this_$iv17 = this;
                        DomainNode domainObject$iv18 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv17, (SexpElement)$receiver$iv19.asSexp());
                        DomainNode domainNode16 = domainObject$iv18;
                        if (!(domainNode16 instanceof Expr)) {
                            domainNode16 = null;
                        }
                        if ((expr = (Expr)domainNode16) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv19.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv18.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        expr = null;
                    }
                    Expr default2 = expr;
                    partiqlAstNode = new Expr.SearchedCase(cases, default2, sexp.getMetas());
                    break;
                }
                case "struct": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv19 = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        ExprPair exprPair;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof ExprPair)) {
                            domainNode = null;
                        }
                        if ((ExprPair)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + ExprPair.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(exprPair);
                    }
                    List fields = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Struct(fields, sexp.getMetas());
                    break;
                }
                case "bag": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List values2 = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Bag(values2, sexp.getMetas());
                    break;
                }
                case "list": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List values3 = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.List(values3, sexp.getMetas());
                    break;
                }
                case "sexp": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv18 = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv18, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List values4 = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Sexp(values4, sexp.getMetas());
                    break;
                }
                case "date": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(3, 3));
                    LongPrimitive year2 = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    LongPrimitive month = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1));
                    LongPrimitive day = PrimitiveUtilsKt.toLongPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2));
                    partiqlAstNode = new Expr.Date(year2, month, day, sexp.getMetas());
                    break;
                }
                case "lit_time": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement day = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof TimeValue)) {
                        domainNode = null;
                    }
                    TimeValue timeValue = (TimeValue)domainNode;
                    if (timeValue == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + TimeValue.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    TimeValue value = timeValue;
                    partiqlAstNode = new Expr.LitTime(value, sexp.getMetas());
                    break;
                }
                case "union": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof SetQuantifier)) {
                        domainNode = null;
                    }
                    SetQuantifier setQuantifier = (SetQuantifier)domainNode;
                    if (setQuantifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + SetQuantifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    SetQuantifier setq2 = setQuantifier;
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Iterable $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        void $receiver$iv20;
                        void it;
                        AnyElement bl = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl3 = false;
                        void this_$iv18 = it;
                        IonElementTransformer this_$iv19 = this;
                        DomainNode domainObject$iv19 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv19, (SexpElement)$receiver$iv20.asSexp());
                        DomainNode domainNode17 = domainObject$iv19;
                        if (!(domainNode17 instanceof Expr)) {
                            domainNode17 = null;
                        }
                        if ((Expr)domainNode17 == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv20.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv19.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Union(setq2, operands, sexp.getMetas());
                    break;
                }
                case "except": {
                    void $this$mapTo$iv$iv;
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    Object $this$map$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof SetQuantifier)) {
                        domainNode = null;
                    }
                    SetQuantifier setQuantifier = (SetQuantifier)domainNode;
                    if (setQuantifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + SetQuantifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    SetQuantifier setq3 = setQuantifier;
                    $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Object $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv20 = this;
                        AnyElement $receiver$iv20 = it;
                        DomainNode domainObject$iv20 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv20, (SexpElement)$receiver$iv20.asSexp());
                        DomainNode domainNode18 = domainObject$iv20;
                        if (!(domainNode18 instanceof Expr)) {
                            domainNode18 = null;
                        }
                        if ((Expr)domainNode18 == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv20.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv20.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Except(setq3, operands, sexp.getMetas());
                    break;
                }
                case "intersect": {
                    void $this$mapTo$iv$iv;
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    Object $this$map$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof SetQuantifier)) {
                        domainNode = null;
                    }
                    SetQuantifier setQuantifier = (SetQuantifier)domainNode;
                    if (setQuantifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + SetQuantifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    SetQuantifier setq4 = setQuantifier;
                    $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Object $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv21 = this;
                        AnyElement $receiver$iv21 = it;
                        DomainNode domainObject$iv21 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv21, (SexpElement)$receiver$iv21.asSexp());
                        DomainNode domainNode19 = domainObject$iv21;
                        if (!(domainNode19 instanceof Expr)) {
                            domainNode19 = null;
                        }
                        if ((Expr)domainNode19 == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv21.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv21.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List operands = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Intersect(setq4, operands, sexp.getMetas());
                    break;
                }
                case "path": {
                    void $this$mapTo$iv$iv;
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    Object $this$map$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr root = expr;
                    $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Object $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        PathStep pathStep;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        IonElementTransformer this_$iv22 = this;
                        AnyElement $receiver$iv22 = it;
                        DomainNode domainObject$iv22 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv22, (SexpElement)$receiver$iv22.asSexp());
                        DomainNode domainNode20 = domainObject$iv22;
                        if (!(domainNode20 instanceof PathStep)) {
                            domainNode20 = null;
                        }
                        if ((PathStep)domainNode20 == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv22.getMetas()), (String)("Expected '" + PathStep.class + "' but found '" + domainObject$iv22.getClass() + '\''));
                            throw null;
                        }
                        collection.add(pathStep);
                    }
                    List steps = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Path(root, steps, sexp.getMetas());
                    break;
                }
                case "call": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    SymbolPrimitive funcName = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Iterable $this$mapTo$iv$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        AnyElement it = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl4 = false;
                        IonElementTransformer this_$iv = this;
                        AnyElement $receiver$iv = it;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof Expr)) {
                            domainNode = null;
                        }
                        if ((Expr)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List args3 = (List)destination$iv$iv;
                    partiqlAstNode = new Expr.Call(funcName, args3, sexp.getMetas());
                    break;
                }
                case "call_agg": {
                    void $receiver$iv;
                    void $receiver$iv23;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(3, 3));
                    AnyElement $this$map$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv23.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof SetQuantifier)) {
                        domainNode = null;
                    }
                    SetQuantifier setQuantifier = (SetQuantifier)domainNode;
                    if (setQuantifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv23.getMetas()), (String)("Expected '" + SetQuantifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    SetQuantifier setq5 = setQuantifier;
                    SymbolPrimitive funcName = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1));
                    AnyElement $i$f$transformExpect = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2);
                    IonElementTransformer this_$iv23 = this;
                    DomainNode domainObject$iv23 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv23, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode21 = domainObject$iv23;
                    if (!(domainNode21 instanceof Expr)) {
                        domainNode21 = null;
                    }
                    Expr expr = (Expr)domainNode21;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv23.getClass() + '\''));
                        throw null;
                    }
                    Expr arg = expr;
                    partiqlAstNode = new Expr.CallAgg(setq5, funcName, arg, sexp.getMetas());
                    break;
                }
                case "cast": {
                    void $receiver$iv;
                    void $receiver$iv24;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement arg = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv24.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv24.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv24 = this;
                    DomainNode domainObject$iv24 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv24, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode22 = domainObject$iv24;
                    if (!(domainNode22 instanceof Type)) {
                        domainNode22 = null;
                    }
                    Type type = (Type)domainNode22;
                    if (type == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Type.class + "' but found '" + domainObject$iv24.getClass() + '\''));
                        throw null;
                    }
                    Type asType = type;
                    partiqlAstNode = new Expr.Cast(value, asType, sexp.getMetas());
                    break;
                }
                case "select": {
                    IntermediateRecord ir = IntermediateRecordKt.transformToIntermediateRecord((SexpElement)sexp);
                    SetQuantifier setq6 = (SetQuantifier)ir.processOptionalField("setq", (Function1)new Function1<AnyElement, SetQuantifier>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final SetQuantifier invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof SetQuantifier)) {
                                domainNode = null;
                            }
                            SetQuantifier setQuantifier = (SetQuantifier)domainNode;
                            if (setQuantifier == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + SetQuantifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return setQuantifier;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Projection project2 = (Projection)ir.processRequiredField("project", (Function1)new Function1<AnyElement, Projection>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Projection invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Projection)) {
                                domainNode = null;
                            }
                            Projection projection = (Projection)domainNode;
                            if (projection == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Projection.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return projection;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    FromSource from4 = (FromSource)ir.processRequiredField("from", (Function1)new Function1<AnyElement, FromSource>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final FromSource invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof FromSource)) {
                                domainNode = null;
                            }
                            FromSource fromSource = (FromSource)domainNode;
                            if (fromSource == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + FromSource.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return fromSource;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Let fromLet2 = (Let)ir.processOptionalField("from_let", (Function1)new Function1<AnyElement, Let>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Let invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Let)) {
                                domainNode = null;
                            }
                            Let let2 = (Let)domainNode;
                            if (let2 == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Let.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return let2;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Expr where3 = (Expr)ir.processOptionalField("where", (Function1)new Function1<AnyElement, Expr>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Expr invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Expr)) {
                                domainNode = null;
                            }
                            Expr expr = (Expr)domainNode;
                            if (expr == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return expr;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    GroupBy group2 = (GroupBy)ir.processOptionalField("group", (Function1)new Function1<AnyElement, GroupBy>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final GroupBy invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof GroupBy)) {
                                domainNode = null;
                            }
                            GroupBy groupBy2 = (GroupBy)domainNode;
                            if (groupBy2 == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + GroupBy.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return groupBy2;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Expr having2 = (Expr)ir.processOptionalField("having", (Function1)new Function1<AnyElement, Expr>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Expr invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Expr)) {
                                domainNode = null;
                            }
                            Expr expr = (Expr)domainNode;
                            if (expr == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return expr;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    OrderBy order2 = (OrderBy)ir.processOptionalField("order", (Function1)new Function1<AnyElement, OrderBy>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final OrderBy invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof OrderBy)) {
                                domainNode = null;
                            }
                            OrderBy orderBy = (OrderBy)domainNode;
                            if (orderBy == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + OrderBy.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return orderBy;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Expr limit2 = (Expr)ir.processOptionalField("limit", (Function1)new Function1<AnyElement, Expr>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Expr invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Expr)) {
                                domainNode = null;
                            }
                            Expr expr = (Expr)domainNode;
                            if (expr == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return expr;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    ir.malformedIfAnyUnprocessedFieldsRemain();
                    partiqlAstNode = new Expr.Select(setq6, project2, from4, fromLet2, where3, group2, having2, order2, limit2, sexp.getMetas());
                    break;
                }
                case "path_expr": {
                    void $receiver$iv;
                    void $receiver$iv25;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement project2 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv25.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv25.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr index = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv25 = this;
                    DomainNode domainObject$iv25 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv25, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode23 = domainObject$iv25;
                    if (!(domainNode23 instanceof CaseSensitivity)) {
                        domainNode23 = null;
                    }
                    CaseSensitivity caseSensitivity = (CaseSensitivity)domainNode23;
                    if (caseSensitivity == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + CaseSensitivity.class + "' but found '" + domainObject$iv25.getClass() + '\''));
                        throw null;
                    }
                    CaseSensitivity caseSensitivity4 = caseSensitivity;
                    partiqlAstNode = new PathStep.PathExpr(index, caseSensitivity4, sexp.getMetas());
                    break;
                }
                case "path_wildcard": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new PathStep.PathWildcard(sexp.getMetas());
                    break;
                }
                case "path_unpivot": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new PathStep.PathUnpivot(sexp.getMetas());
                    break;
                }
                case "project_star": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Projection.ProjectStar(sexp.getMetas());
                    break;
                }
                case "project_list": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, Integer.MAX_VALUE));
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 1);
                    boolean $i$f$map = false;
                    Iterable $receiver$iv = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        ProjectItem projectItem;
                        void $receiver$iv26;
                        void it;
                        AnyElement order2 = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl = false;
                        void bl4 = it;
                        IonElementTransformer this_$iv33 = this;
                        DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv33, (SexpElement)$receiver$iv26.asSexp());
                        DomainNode domainNode = domainObject$iv;
                        if (!(domainNode instanceof ProjectItem)) {
                            domainNode = null;
                        }
                        if ((ProjectItem)domainNode == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv26.getMetas()), (String)("Expected '" + ProjectItem.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                        collection.add(projectItem);
                    }
                    List projectItems = (List)destination$iv$iv;
                    partiqlAstNode = new Projection.ProjectList(projectItems, sexp.getMetas());
                    break;
                }
                case "project_pivot": {
                    void $receiver$iv;
                    void $receiver$iv27;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement $i$f$map = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv27.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv27.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv26 = this;
                    DomainNode domainObject$iv26 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv26, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode24 = domainObject$iv26;
                    if (!(domainNode24 instanceof Expr)) {
                        domainNode24 = null;
                    }
                    Expr expr19 = (Expr)domainNode24;
                    if (expr19 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv26.getClass() + '\''));
                        throw null;
                    }
                    Expr key = expr19;
                    partiqlAstNode = new Projection.ProjectPivot(value, key, sexp.getMetas());
                    break;
                }
                case "project_value": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement this_$iv26 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr;
                    partiqlAstNode = new Projection.ProjectValue(value, sexp.getMetas());
                    break;
                }
                case "project_all": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr20 = expr;
                    partiqlAstNode = new ProjectItem.ProjectAll(expr20, sexp.getMetas());
                    break;
                }
                case "project_expr": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 2));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr21 = expr;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    SymbolPrimitive asAlias = anyElement != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new ProjectItem.ProjectExpr(expr21, asAlias, sexp.getMetas());
                    break;
                }
                case "scan": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 4));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr22 = expr;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    SymbolPrimitive asAlias = anyElement != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement) : null;
                    AnyElement anyElement2 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    SymbolPrimitive atAlias = anyElement2 != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement2) : null;
                    AnyElement anyElement3 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)3);
                    SymbolPrimitive byAlias = anyElement3 != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement3) : null;
                    partiqlAstNode = new FromSource.Scan(expr22, asAlias, atAlias, byAlias, sexp.getMetas());
                    break;
                }
                case "unpivot": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 4));
                    AnyElement atAlias = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr23 = expr;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    SymbolPrimitive asAlias = anyElement != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement) : null;
                    AnyElement anyElement4 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    atAlias = anyElement4 != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement4) : null;
                    AnyElement anyElement5 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)3);
                    SymbolPrimitive byAlias = anyElement5 != null ? PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)anyElement5) : null;
                    partiqlAstNode = new FromSource.Unpivot(expr23, asAlias, (SymbolPrimitive)atAlias, byAlias, sexp.getMetas());
                    break;
                }
                case "join": {
                    Expr expr;
                    void $receiver$iv;
                    void $receiver$iv28;
                    void $receiver$iv29;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(3, 4));
                    AnyElement atAlias = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv29.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof JoinType)) {
                        domainNode = null;
                    }
                    JoinType joinType = (JoinType)domainNode;
                    if (joinType == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv29.getMetas()), (String)("Expected '" + JoinType.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    JoinType type = joinType;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv27 = this;
                    DomainNode domainObject$iv27 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv27, (SexpElement)$receiver$iv28.asSexp());
                    DomainNode domainNode25 = domainObject$iv27;
                    if (!(domainNode25 instanceof FromSource)) {
                        domainNode25 = null;
                    }
                    FromSource fromSource = (FromSource)domainNode25;
                    if (fromSource == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv28.getMetas()), (String)("Expected '" + FromSource.class + "' but found '" + domainObject$iv27.getClass() + '\''));
                        throw null;
                    }
                    FromSource left = fromSource;
                    domainObject$iv27 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)2);
                    IonElementTransformer this_$iv28 = this;
                    DomainNode domainObject$iv28 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv28, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode26 = domainObject$iv28;
                    if (!(domainNode26 instanceof FromSource)) {
                        domainNode26 = null;
                    }
                    FromSource fromSource2 = (FromSource)domainNode26;
                    if (fromSource2 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + FromSource.class + "' but found '" + domainObject$iv28.getClass() + '\''));
                        throw null;
                    }
                    FromSource right = fromSource2;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)3);
                    if (anyElement != null) {
                        void $receiver$iv30;
                        domainObject$iv28 = anyElement;
                        IonElementTransformer this_$iv29 = this;
                        DomainNode domainObject$iv29 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv29, (SexpElement)$receiver$iv30.asSexp());
                        DomainNode domainNode27 = domainObject$iv29;
                        if (!(domainNode27 instanceof Expr)) {
                            domainNode27 = null;
                        }
                        if ((expr = (Expr)domainNode27) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv30.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv29.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        expr = null;
                    }
                    Expr predicate = expr;
                    partiqlAstNode = new FromSource.Join(type, left, right, predicate, sexp.getMetas());
                    break;
                }
                case "inner": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new JoinType.Inner(sexp.getMetas());
                    break;
                }
                case "left": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new JoinType.Left(sexp.getMetas());
                    break;
                }
                case "right": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new JoinType.Right(sexp.getMetas());
                    break;
                }
                case "full": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new JoinType.Full(sexp.getMetas());
                    break;
                }
                case "group_full": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new GroupingStrategy.GroupFull(sexp.getMetas());
                    break;
                }
                case "group_partial": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new GroupingStrategy.GroupPartial(sexp.getMetas());
                    break;
                }
                case "asc": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new OrderingSpec.Asc(sexp.getMetas());
                    break;
                }
                case "desc": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new OrderingSpec.Desc(sexp.getMetas());
                    break;
                }
                case "case_sensitive": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new CaseSensitivity.CaseSensitive(sexp.getMetas());
                    break;
                }
                case "case_insensitive": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new CaseSensitivity.CaseInsensitive(sexp.getMetas());
                    break;
                }
                case "unqualified": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ScopeQualifier.Unqualified(sexp.getMetas());
                    break;
                }
                case "locals_first": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ScopeQualifier.LocalsFirst(sexp.getMetas());
                    break;
                }
                case "all": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new SetQuantifier.All(sexp.getMetas());
                    break;
                }
                case "distinct": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new SetQuantifier.Distinct(sexp.getMetas());
                    break;
                }
                case "insert": {
                    void $receiver$iv;
                    void $receiver$iv31;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 2));
                    AnyElement right = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv31.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv31.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr target = expr;
                    domainObject$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    IonElementTransformer this_$iv30 = this;
                    DomainNode domainObject$iv30 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv30, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode28 = domainObject$iv30;
                    if (!(domainNode28 instanceof Expr)) {
                        domainNode28 = null;
                    }
                    Expr expr24 = (Expr)domainNode28;
                    if (expr24 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv30.getClass() + '\''));
                        throw null;
                    }
                    Expr values5 = expr24;
                    partiqlAstNode = new DmlOp.Insert(target, values5, sexp.getMetas());
                    break;
                }
                case "insert_value": {
                    OnConflict onConflict;
                    Expr expr;
                    DomainNode domainObject$iv;
                    void $receiver$iv;
                    void $receiver$iv32;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(2, 4));
                    Object this_$iv30 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv31 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv32.asSexp());
                    DomainNode domainNode = domainObject$iv31;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr25 = (Expr)domainNode;
                    if (expr25 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv32.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv31.getClass() + '\''));
                        throw null;
                    }
                    Expr target = expr25;
                    domainObject$iv31 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)1);
                    this_$iv30 = this;
                    DomainNode domainObject$iv32 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv30, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode29 = domainObject$iv32;
                    if (!(domainNode29 instanceof Expr)) {
                        domainNode29 = null;
                    }
                    Expr expr26 = (Expr)domainNode29;
                    if (expr26 == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv32.getClass() + '\''));
                        throw null;
                    }
                    Expr value = expr26;
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)2);
                    if (anyElement != null) {
                        void $receiver$iv33;
                        domainObject$iv32 = anyElement;
                        IonElementTransformer this_$iv31 = this;
                        domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv31, (SexpElement)$receiver$iv33.asSexp());
                        DomainNode domainNode30 = domainObject$iv;
                        if (!(domainNode30 instanceof Expr)) {
                            domainNode30 = null;
                        }
                        if ((expr = (Expr)domainNode30) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv33.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        expr = null;
                    }
                    Expr index = expr;
                    AnyElement anyElement6 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)3);
                    if (anyElement6 != null) {
                        void $receiver$iv34;
                        domainObject$iv = anyElement6;
                        IonElementTransformer this_$iv32 = this;
                        DomainNode domainObject$iv33 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv32, (SexpElement)$receiver$iv34.asSexp());
                        DomainNode domainNode31 = domainObject$iv33;
                        if (!(domainNode31 instanceof OnConflict)) {
                            domainNode31 = null;
                        }
                        if ((onConflict = (OnConflict)domainNode31) == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv34.getMetas()), (String)("Expected '" + OnConflict.class + "' but found '" + domainObject$iv33.getClass() + '\''));
                            throw null;
                        }
                    } else {
                        onConflict = null;
                    }
                    OnConflict onConflict2 = onConflict;
                    partiqlAstNode = new DmlOp.InsertValue(target, value, index, onConflict2, sexp.getMetas());
                    break;
                }
                case "set": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement index = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Assignment)) {
                        domainNode = null;
                    }
                    Assignment assignment = (Assignment)domainNode;
                    if (assignment == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Assignment.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Assignment assignment2 = assignment;
                    partiqlAstNode = new DmlOp.Set(assignment2, sexp.getMetas());
                    break;
                }
                case "remove": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr target = expr;
                    partiqlAstNode = new DmlOp.Remove(target, sexp.getMetas());
                    break;
                }
                case "delete": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new DmlOp.Delete(sexp.getMetas());
                    break;
                }
                case "do_nothing": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ConflictAction.DoNothing(sexp.getMetas());
                    break;
                }
                case "create_table": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    SymbolPrimitive tableName = PrimitiveUtilsKt.toSymbolPrimitive((AnyElement)ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0));
                    partiqlAstNode = new DdlOp.CreateTable(tableName, sexp.getMetas());
                    break;
                }
                case "drop_table": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Identifier)) {
                        domainNode = null;
                    }
                    Identifier identifier = (Identifier)domainNode;
                    if (identifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Identifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Identifier tableName = identifier;
                    partiqlAstNode = new DdlOp.DropTable(tableName, sexp.getMetas());
                    break;
                }
                case "create_index": {
                    void $this$mapTo$iv$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, Integer.MAX_VALUE));
                    AnyElement $receiver$iv = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Identifier)) {
                        domainNode = null;
                    }
                    Identifier identifier = (Identifier)domainNode;
                    if (identifier == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Identifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Identifier indexName = identifier;
                    Iterable $this$map$iv = CollectionsKt.drop(sexp.getValues(), 2);
                    boolean $i$f$map = false;
                    Iterable $i$f$transformExpect = $this$map$iv;
                    Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
                    boolean $i$f$mapTo = false;
                    for (Object item$iv$iv : $this$mapTo$iv$iv) {
                        Expr expr;
                        void $receiver$iv35;
                        void it;
                        AnyElement bl = (AnyElement)item$iv$iv;
                        Collection collection = destination$iv$iv;
                        boolean bl5 = false;
                        void this_$iv33 = it;
                        IonElementTransformer this_$iv34 = this;
                        DomainNode domainObject$iv34 = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv34, (SexpElement)$receiver$iv35.asSexp());
                        DomainNode domainNode32 = domainObject$iv34;
                        if (!(domainNode32 instanceof Expr)) {
                            domainNode32 = null;
                        }
                        if ((Expr)domainNode32 == null) {
                            Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv35.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv34.getClass() + '\''));
                            throw null;
                        }
                        collection.add(expr);
                    }
                    List fields = (List)destination$iv$iv;
                    partiqlAstNode = new DdlOp.CreateIndex(indexName, fields, sexp.getMetas());
                    break;
                }
                case "drop_index": {
                    IntermediateRecord ir = IntermediateRecordKt.transformToIntermediateRecord((SexpElement)sexp);
                    Identifier table2 = (Identifier)ir.processRequiredField("table", (Function1)new Function1<AnyElement, Identifier>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Identifier invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Identifier)) {
                                domainNode = null;
                            }
                            Identifier identifier = (Identifier)domainNode;
                            if (identifier == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Identifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return identifier;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    Identifier keys3 = (Identifier)ir.processRequiredField("keys", (Function1)new Function1<AnyElement, Identifier>(this){
                        final /* synthetic */ IonElementTransformer this$0;

                        @NotNull
                        public final Identifier invoke(@NotNull AnyElement it) {
                            Intrinsics.checkParameterIsNotNull(it, "it");
                            AnyElement $receiver$iv = it;
                            IonElementTransformer this_$iv = this.this$0;
                            DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                            DomainNode domainNode = domainObject$iv;
                            if (!(domainNode instanceof Identifier)) {
                                domainNode = null;
                            }
                            Identifier identifier = (Identifier)domainNode;
                            if (identifier == null) {
                                Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Identifier.class + "' but found '" + domainObject$iv.getClass() + '\''));
                                throw null;
                            }
                            return identifier;
                        }
                        {
                            this.this$0 = ionElementTransformer;
                            super(1);
                        }
                    });
                    ir.malformedIfAnyUnprocessedFieldsRemain();
                    partiqlAstNode = new DdlOp.DropIndex(table2, keys3, sexp.getMetas());
                    break;
                }
                case "returning_wildcard": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ColumnComponent.ReturningWildcard(sexp.getMetas());
                    break;
                }
                case "returning_column": {
                    void $receiver$iv;
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(1, 1));
                    AnyElement keys3 = ErrorHelpersKt.getRequired((SexpElement)sexp, (int)0);
                    IonElementTransformer this_$iv = this;
                    DomainNode domainObject$iv = IonElementTransformerBase.access$innerTransform((IonElementTransformerBase)this_$iv, (SexpElement)$receiver$iv.asSexp());
                    DomainNode domainNode = domainObject$iv;
                    if (!(domainNode instanceof Expr)) {
                        domainNode = null;
                    }
                    Expr expr = (Expr)domainNode;
                    if (expr == null) {
                        Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)$receiver$iv.getMetas()), (String)("Expected '" + Expr.class + "' but found '" + domainObject$iv.getClass() + '\''));
                        throw null;
                    }
                    Expr expr27 = expr;
                    partiqlAstNode = new ColumnComponent.ReturningColumn(expr27, sexp.getMetas());
                    break;
                }
                case "modified_new": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ReturningMapping.ModifiedNew(sexp.getMetas());
                    break;
                }
                case "modified_old": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ReturningMapping.ModifiedOld(sexp.getMetas());
                    break;
                }
                case "all_new": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ReturningMapping.AllNew(sexp.getMetas());
                    break;
                }
                case "all_old": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new ReturningMapping.AllOld(sexp.getMetas());
                    break;
                }
                case "null_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.NullType(sexp.getMetas());
                    break;
                }
                case "boolean_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.BooleanType(sexp.getMetas());
                    break;
                }
                case "smallint_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.SmallintType(sexp.getMetas());
                    break;
                }
                case "integer_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.IntegerType(sexp.getMetas());
                    break;
                }
                case "float_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 1));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive precision = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new Type.FloatType(precision, sexp.getMetas());
                    break;
                }
                case "real_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.RealType(sexp.getMetas());
                    break;
                }
                case "double_precision_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.DoublePrecisionType(sexp.getMetas());
                    break;
                }
                case "decimal_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 2));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive precision = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    AnyElement anyElement7 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    LongPrimitive scale = anyElement7 != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement7) : null;
                    partiqlAstNode = new Type.DecimalType(precision, scale, sexp.getMetas());
                    break;
                }
                case "numeric_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 2));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive precision = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    AnyElement anyElement8 = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)1);
                    LongPrimitive scale = anyElement8 != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement8) : null;
                    partiqlAstNode = new Type.NumericType(precision, scale, sexp.getMetas());
                    break;
                }
                case "timestamp_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.TimestampType(sexp.getMetas());
                    break;
                }
                case "character_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 1));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive length = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new Type.CharacterType(length, sexp.getMetas());
                    break;
                }
                case "character_varying_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 1));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive length = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new Type.CharacterVaryingType(length, sexp.getMetas());
                    break;
                }
                case "missing_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.MissingType(sexp.getMetas());
                    break;
                }
                case "string_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.StringType(sexp.getMetas());
                    break;
                }
                case "symbol_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.SymbolType(sexp.getMetas());
                    break;
                }
                case "blob_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.BlobType(sexp.getMetas());
                    break;
                }
                case "clob_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.ClobType(sexp.getMetas());
                    break;
                }
                case "date_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.DateType(sexp.getMetas());
                    break;
                }
                case "time_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 1));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive precision = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new Type.TimeType(precision, sexp.getMetas());
                    break;
                }
                case "time_with_time_zone_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 1));
                    AnyElement anyElement = ErrorHelpersKt.getOptional((SexpElement)sexp, (int)0);
                    LongPrimitive precision = anyElement != null ? PrimitiveUtilsKt.toLongPrimitive((AnyElement)anyElement) : null;
                    partiqlAstNode = new Type.TimeWithTimeZoneType(precision, sexp.getMetas());
                    break;
                }
                case "struct_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.StructType(sexp.getMetas());
                    break;
                }
                case "tuple_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.TupleType(sexp.getMetas());
                    break;
                }
                case "list_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.ListType(sexp.getMetas());
                    break;
                }
                case "sexp_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.SexpType(sexp.getMetas());
                    break;
                }
                case "bag_type": {
                    ErrorHelpersKt.requireArityOrMalformed((SexpElement)sexp, (IntRange)new IntRange(0, 0));
                    partiqlAstNode = new Type.BagType(sexp.getMetas());
                    break;
                }
                default: {
                    Void void_ = ErrorHelpersKt.errMalformed((IonLocation)IonLocationKt.getLocation((Map)IonElementExtensionsKt.getHead((SeqElement)((SeqElement)sexp)).getMetas()), (String)("Unknown tag '" + IonElementExtensionsKt.getTag((SeqElement)((SeqElement)sexp)) + "' for domain 'partiql_ast'"));
                    throw null;
                }
            }
            return partiqlAstNode;
        }

        public static final /* synthetic */ PartiqlAstNode access$transformExpect(IonElementTransformer $this, AnyElement $this$access_u24transformExpect) {
            return (PartiqlAstNode)$this.transformExpect($this$access_u24transformExpect);
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u0081\u0007\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0003\b\u0093\u0001\b\u0016\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\u0016J\u0010\u0010\u0007\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\bH\u0014J\u0010\u0010\t\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\nH\u0014J\u0010\u0010\u000b\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\fH\u0014J\u0010\u0010\r\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u000eH\u0014J\u0010\u0010\u000f\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0010H\u0014J\u0010\u0010\u0011\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0012H\u0014J\u0010\u0010\u0013\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0014H\u0014J\u0010\u0010\u0015\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0016H\u0014J\u0010\u0010\u0017\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0018H\u0014J\u0010\u0010\u0019\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001aH\u0014J\u0010\u0010\u001b\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001cH\u0014J\u0010\u0010\u001d\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001eH\u0014J\u0010\u0010\u001f\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020 H\u0014J\u0010\u0010!\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\"H\u0014J\u0010\u0010#\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020$H\u0014J\u0010\u0010%\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020&H\u0014J\u0010\u0010'\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020(H\u0014J\u0010\u0010)\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020*H\u0016J\u0010\u0010+\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020,H\u0014J\u0010\u0010-\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020.H\u0014J\u0010\u0010/\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000200H\u0014J\u0010\u00101\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000202H\u0014J\u0010\u00103\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000204H\u0014J\u0010\u00105\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000206H\u0014J\u0010\u00107\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000208H\u0014J\u0010\u00109\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020:H\u0014J\u0010\u0010;\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020<H\u0014J\u0010\u0010=\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020>H\u0014J\u0010\u0010?\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020@H\u0014J\u0010\u0010A\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020BH\u0014J\u0010\u0010C\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020DH\u0014J\u0010\u0010E\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020FH\u0014J\u0010\u0010G\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020HH\u0014J\u0010\u0010I\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020JH\u0014J\u0010\u0010K\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020LH\u0014J\u0010\u0010M\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020NH\u0014J\u0010\u0010O\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020PH\u0014J\u0010\u0010Q\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020RH\u0014J\u0010\u0010S\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020TH\u0014J\u0010\u0010U\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020VH\u0014J\u0010\u0010W\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020XH\u0014J\u0010\u0010Y\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020ZH\u0014J\u0010\u0010[\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\\H\u0014J\u0010\u0010]\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020^H\u0014J\u0010\u0010_\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020`H\u0014J\u0010\u0010a\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020bH\u0014J\u0010\u0010c\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020dH\u0014J\u0010\u0010e\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020fH\u0014J\u0010\u0010g\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020hH\u0014J\u0010\u0010i\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020jH\u0014J\u0010\u0010k\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020lH\u0014J\u0010\u0010m\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020nH\u0016J\u0010\u0010o\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020pH\u0016J\u0010\u0010q\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020rH\u0014J\u0010\u0010s\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020tH\u0014J\u0010\u0010u\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020vH\u0014J\u0010\u0010w\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020xH\u0014J\u0010\u0010y\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020zH\u0014J\u0010\u0010{\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020|H\u0014J\u0010\u0010}\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020~H\u0014J\u0011\u0010\u007f\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0080\u0001H\u0014J\u0012\u0010\u0081\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0082\u0001H\u0014J\u0012\u0010\u0083\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0084\u0001H\u0014J\u0012\u0010\u0085\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0086\u0001H\u0014J\u0012\u0010\u0087\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0088\u0001H\u0014J\u0012\u0010\u0089\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008a\u0001H\u0014J\u0012\u0010\u008b\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008c\u0001H\u0014J\u0012\u0010\u008d\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0014J\u0012\u0010\u008f\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0090\u0001H\u0016J\u0012\u0010\u0091\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0092\u0001H\u0016J\u0012\u0010\u0093\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0094\u0001H\u0016J\u0012\u0010\u0095\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0096\u0001H\u0014J\u0012\u0010\u0097\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0098\u0001H\u0014J\u0012\u0010\u0099\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009a\u0001H\u0014J\u0012\u0010\u009b\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009c\u0001H\u0016J\u0012\u0010\u009d\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009e\u0001H\u0014J\u0012\u0010\u009f\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a0\u0001H\u0014J\u0012\u0010\u00a1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a2\u0001H\u0014J\u0012\u0010\u00a3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a4\u0001H\u0014J\u0012\u0010\u00a5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0014J\u0012\u0010\u00a7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a8\u0001H\u0016J\u0012\u0010\u00a9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00aa\u0001H\u0016J\u0012\u0010\u00ab\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ac\u0001H\u0016J\u0012\u0010\u00ad\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ae\u0001H\u0016J\u0012\u0010\u00af\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0014J\u0012\u0010\u00b1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b2\u0001H\u0014J\u0012\u0010\u00b3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b4\u0001H\u0014J\u0012\u0010\u00b5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b6\u0001H\u0014J\u0012\u0010\u00b7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b8\u0001H\u0014J\u0012\u0010\u00b9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ba\u0001H\u0014J\u0012\u0010\u00bb\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00bc\u0001H\u0014J\u0012\u0010\u00bd\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00be\u0001H\u0014J\u0012\u0010\u00bf\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c0\u0001H\u0014J\u0012\u0010\u00c1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c2\u0001H\u0014J\u0012\u0010\u00c3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c4\u0001H\u0014J\u0012\u0010\u00c5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c6\u0001H\u0014J\u0012\u0010\u00c7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c8\u0001H\u0014J\u0012\u0010\u00c9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ca\u0001H\u0014J\u0012\u0010\u00cb\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00cc\u0001H\u0014J\u0012\u0010\u00cd\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ce\u0001H\u0016J\u0012\u0010\u00cf\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d0\u0001H\u0016J\u0012\u0010\u00d1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d2\u0001H\u0014J\u0012\u0010\u00d3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d4\u0001H\u0014J\u0012\u0010\u00d5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d6\u0001H\u0014J\u0012\u0010\u00d7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d8\u0001H\u0014J\u0012\u0010\u00d9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00da\u0001H\u0014J\u0012\u0010\u00db\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00dc\u0001H\u0014J\u0012\u0010\u00dd\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00de\u0001H\u0014J\u0012\u0010\u00df\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e0\u0001H\u0014J\u0012\u0010\u00e1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e2\u0001H\u0014J\u0012\u0010\u00e3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e4\u0001H\u0014J\u0012\u0010\u00e5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e6\u0001H\u0014J\u0012\u0010\u00e7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e8\u0001H\u0016J\u0012\u0010\u00e9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ea\u0001H\u0014J\u0012\u0010\u00eb\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ec\u0001H\u0014J\u0012\u0010\u00ed\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ee\u0001H\u0014J\u0012\u0010\u00ef\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f0\u0001H\u0014J\u0012\u0010\u00f1\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f2\u0001H\u0014J\u0012\u0010\u00f3\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\u0012\u0010\u00f5\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f6\u0001H\u0014J\u0012\u0010\u00f7\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f8\u0001H\u0014J\u0012\u0010\u00f9\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fa\u0001H\u0014J\u0012\u0010\u00fb\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fc\u0001H\u0014J\u0012\u0010\u00fd\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fe\u0001H\u0014J\u0012\u0010\u00ff\u0001\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0080\u0002H\u0014J\u0012\u0010\u0081\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0014J\u0012\u0010\u0083\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0084\u0002H\u0014J\u0012\u0010\u0085\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0086\u0002H\u0014J\u0012\u0010\u0087\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0088\u0002H\u0014J\u0012\u0010\u0089\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008a\u0002H\u0014J\u0012\u0010\u008b\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008c\u0002H\u0014J\u0012\u0010\u008d\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008e\u0002H\u0014J\u0012\u0010\u008f\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0090\u0002H\u0014J\u0012\u0010\u0091\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0092\u0002H\u0014J\u0012\u0010\u0093\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0094\u0002H\u0014J\u0012\u0010\u0095\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0096\u0002H\u0014J\u0012\u0010\u0097\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0098\u0002H\u0014J\u0012\u0010\u0099\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009a\u0002H\u0014J\u0012\u0010\u009b\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0014J\u0012\u0010\u009d\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009e\u0002H\u0014J\u0012\u0010\u009f\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a0\u0002H\u0014J\u0012\u0010\u00a1\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a2\u0002H\u0014J\u0012\u0010\u00a3\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a4\u0002H\u0014J\u0012\u0010\u00a5\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a6\u0002H\u0014J\u0012\u0010\u00a7\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a8\u0002H\u0014J\u0011\u0010\u00a9\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\u0016J\u0011\u0010\u00aa\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\bH\u0016J\u0011\u0010\u00ab\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\nH\u0016J\u0011\u0010\u00ac\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\fH\u0016J\u0011\u0010\u00ad\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u000eH\u0016J\u0011\u0010\u00ae\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0010H\u0016J\u0011\u0010\u00af\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0012H\u0016J\u0011\u0010\u00b0\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0014H\u0016J\u0011\u0010\u00b1\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0016H\u0016J\u0011\u0010\u00b2\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0018H\u0016J\u0011\u0010\u00b3\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001aH\u0016J\u0011\u0010\u00b4\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001cH\u0016J\u0011\u0010\u00b5\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u001eH\u0016J\u0011\u0010\u00b6\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020 H\u0016J\u0011\u0010\u00b7\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\"H\u0016J\u0011\u0010\u00b8\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020$H\u0016J\u0011\u0010\u00b9\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020&H\u0016J\u0011\u0010\u00ba\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020(H\u0016J\u0011\u0010\u00bb\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020*H\u0016J\u0011\u0010\u00bc\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020,H\u0016J\u0011\u0010\u00bd\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020.H\u0016J\u0011\u0010\u00be\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000200H\u0016J\u0011\u0010\u00bf\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000202H\u0016J\u0011\u0010\u00c0\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000204H\u0016J\u0011\u0010\u00c1\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000206H\u0016J\u0011\u0010\u00c2\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u000208H\u0016J\u0011\u0010\u00c3\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020:H\u0016J\u0011\u0010\u00c4\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020<H\u0016J\u0011\u0010\u00c5\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020>H\u0016J\u0011\u0010\u00c6\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020@H\u0016J\u0011\u0010\u00c7\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020BH\u0016J\u0011\u0010\u00c8\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020DH\u0016J\u0011\u0010\u00c9\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020FH\u0016J\u0011\u0010\u00ca\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020HH\u0016J\u0011\u0010\u00cb\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020JH\u0016J\u0011\u0010\u00cc\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020LH\u0016J\u0011\u0010\u00cd\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020NH\u0016J\u0011\u0010\u00ce\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020PH\u0016J\u0011\u0010\u00cf\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020RH\u0016J\u0011\u0010\u00d0\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020TH\u0016J\u0011\u0010\u00d1\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020VH\u0016J\u0011\u0010\u00d2\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020XH\u0016J\u0011\u0010\u00d3\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020ZH\u0016J\u0011\u0010\u00d4\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\\H\u0016J\u0011\u0010\u00d5\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020^H\u0016J\u0011\u0010\u00d6\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020`H\u0016J\u0011\u0010\u00d7\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020bH\u0016J\u0011\u0010\u00d8\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020dH\u0016J\u0011\u0010\u00d9\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020fH\u0016J\u0011\u0010\u00da\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020hH\u0016J\u0011\u0010\u00db\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020jH\u0016J\u0011\u0010\u00dc\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020lH\u0016J\u0011\u0010\u00dd\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020nH\u0016J\u0011\u0010\u00de\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020pH\u0016J\u0011\u0010\u00df\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020rH\u0016J\u0011\u0010\u00e0\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020tH\u0016J\u0011\u0010\u00e1\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020vH\u0016J\u0011\u0010\u00e2\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020xH\u0016J\u0011\u0010\u00e3\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020zH\u0016J\u0011\u0010\u00e4\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020|H\u0016J\u0011\u0010\u00e5\u0002\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020~H\u0016J\u0012\u0010\u00e6\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0080\u0001H\u0016J\u0012\u0010\u00e7\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0082\u0001H\u0016J\u0012\u0010\u00e8\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0084\u0001H\u0016J\u0012\u0010\u00e9\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0086\u0001H\u0016J\u0012\u0010\u00ea\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0088\u0001H\u0016J\u0012\u0010\u00eb\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008a\u0001H\u0016J\u0012\u0010\u00ec\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008c\u0001H\u0016J\u0012\u0010\u00ed\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0016J\u0012\u0010\u00ee\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0090\u0001H\u0016J\u0012\u0010\u00ef\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0092\u0001H\u0016J\u0012\u0010\u00f0\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0094\u0001H\u0016J\u0012\u0010\u00f1\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0096\u0001H\u0016J\u0012\u0010\u00f2\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0098\u0001H\u0016J\u0012\u0010\u00f3\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009a\u0001H\u0016J\u0012\u0010\u00f4\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009c\u0001H\u0016J\u0012\u0010\u00f5\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009e\u0001H\u0016J\u0012\u0010\u00f6\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a0\u0001H\u0016J\u0012\u0010\u00f7\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a2\u0001H\u0016J\u0012\u0010\u00f8\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a4\u0001H\u0016J\u0012\u0010\u00f9\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0016J\u0012\u0010\u00fa\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a8\u0001H\u0016J\u0012\u0010\u00fb\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00aa\u0001H\u0016J\u0012\u0010\u00fc\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ac\u0001H\u0016J\u0012\u0010\u00fd\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ae\u0001H\u0016J\u0012\u0010\u00fe\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\u0012\u0010\u00ff\u0002\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b2\u0001H\u0016J\u0012\u0010\u0080\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b4\u0001H\u0016J\u0012\u0010\u0081\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b6\u0001H\u0016J\u0012\u0010\u0082\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00b8\u0001H\u0016J\u0012\u0010\u0083\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ba\u0001H\u0016J\u0012\u0010\u0084\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00bc\u0001H\u0016J\u0012\u0010\u0085\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00be\u0001H\u0016J\u0012\u0010\u0086\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c0\u0001H\u0016J\u0012\u0010\u0087\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c2\u0001H\u0016J\u0012\u0010\u0088\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c4\u0001H\u0016J\u0012\u0010\u0089\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c6\u0001H\u0016J\u0012\u0010\u008a\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00c8\u0001H\u0016J\u0012\u0010\u008b\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ca\u0001H\u0016J\u0012\u0010\u008c\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00cc\u0001H\u0016J\u0012\u0010\u008d\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ce\u0001H\u0016J\u0012\u0010\u008e\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d0\u0001H\u0016J\u0012\u0010\u008f\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d2\u0001H\u0016J\u0012\u0010\u0090\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d4\u0001H\u0016J\u0012\u0010\u0091\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d6\u0001H\u0016J\u0012\u0010\u0092\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00d8\u0001H\u0016J\u0012\u0010\u0093\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00da\u0001H\u0016J\u0012\u0010\u0094\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00dc\u0001H\u0016J\u0012\u0010\u0095\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00de\u0001H\u0016J\u0012\u0010\u0096\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e0\u0001H\u0016J\u0012\u0010\u0097\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e2\u0001H\u0016J\u0012\u0010\u0098\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e4\u0001H\u0016J\u0012\u0010\u0099\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e6\u0001H\u0016J\u0012\u0010\u009a\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00e8\u0001H\u0016J\u0012\u0010\u009b\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ea\u0001H\u0016J\u0012\u0010\u009c\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ec\u0001H\u0016J\u0012\u0010\u009d\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00ee\u0001H\u0016J\u0012\u0010\u009e\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f0\u0001H\u0016J\u0012\u0010\u009f\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f2\u0001H\u0016J\u0012\u0010\u00a0\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\u0012\u0010\u00a1\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f6\u0001H\u0016J\u0012\u0010\u00a2\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00f8\u0001H\u0016J\u0012\u0010\u00a3\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fa\u0001H\u0016J\u0012\u0010\u00a4\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fc\u0001H\u0016J\u0012\u0010\u00a5\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00fe\u0001H\u0016J\u0012\u0010\u00a6\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0080\u0002H\u0016J\u0012\u0010\u00a7\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0016J\u0012\u0010\u00a8\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0084\u0002H\u0016J\u0012\u0010\u00a9\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0086\u0002H\u0016J\u0012\u0010\u00aa\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0088\u0002H\u0016J\u0012\u0010\u00ab\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008a\u0002H\u0016J\u0012\u0010\u00ac\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008c\u0002H\u0016J\u0012\u0010\u00ad\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u008e\u0002H\u0016J\u0012\u0010\u00ae\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0090\u0002H\u0016J\u0012\u0010\u00af\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0092\u0002H\u0016J\u0012\u0010\u00b0\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0094\u0002H\u0016J\u0012\u0010\u00b1\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0096\u0002H\u0016J\u0012\u0010\u00b2\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u0098\u0002H\u0016J\u0012\u0010\u00b3\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009a\u0002H\u0016J\u0012\u0010\u00b4\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\u0012\u0010\u00b5\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u009e\u0002H\u0016J\u0012\u0010\u00b6\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a0\u0002H\u0016J\u0012\u0010\u00b7\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a2\u0002H\u0016J\u0012\u0010\u00b8\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a4\u0002H\u0016J\u0012\u0010\u00b9\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a6\u0002H\u0016J\u0012\u0010\u00ba\u0003\u001a\u00020\u00042\u0007\u0010\u0005\u001a\u00030\u00a8\u0002H\u0016\u00a8\u0006\u00bb\u0003"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Visitor;", "Lorg/partiql/pig/runtime/DomainVisitorBase;", "()V", "visitAssignment", "", "node", "Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "visitCaseSensitivity", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "visitCaseSensitivityCaseInsensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "visitCaseSensitivityCaseSensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "visitColumnComponent", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "visitColumnComponentReturningColumn", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "visitColumnComponentReturningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "visitConflictAction", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "visitConflictActionDoNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "visitDdlOp", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "visitDdlOpCreateIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "visitDdlOpCreateTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "visitDdlOpDropIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "visitDdlOpDropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "visitDmlOp", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "visitDmlOpDelete", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "visitDmlOpInsert", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "visitDmlOpInsertValue", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "visitDmlOpList", "Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "visitDmlOpRemove", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "visitDmlOpSet", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "visitExpr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "visitExprAnd", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "visitExprBag", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "visitExprBetween", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "visitExprCall", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "visitExprCallAgg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "visitExprCast", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "visitExprConcat", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "visitExprDate", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "visitExprDivide", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "visitExprEq", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "visitExprExcept", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "visitExprGt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "visitExprGte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "visitExprId", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "visitExprInCollection", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "visitExprIntersect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "visitExprIsType", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "visitExprLike", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "visitExprList", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "visitExprLit", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "visitExprLitTime", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "visitExprLt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "visitExprLte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "visitExprMinus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "visitExprMissing", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "visitExprModulo", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "visitExprNe", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "visitExprNeg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "visitExprNot", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "visitExprOr", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "visitExprPair", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "visitExprPairList", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "visitExprParameter", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "visitExprPath", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "visitExprPlus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "visitExprPos", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "visitExprSearchedCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "visitExprSelect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "visitExprSexp", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "visitExprSimpleCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "visitExprStruct", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "visitExprTimes", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "visitExprUnion", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "visitFromSource", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "visitFromSourceJoin", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "visitFromSourceScan", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "visitFromSourceUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "visitGroupBy", "Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "visitGroupKey", "Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "visitGroupKeyList", "Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "visitGroupingStrategy", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "visitGroupingStrategyGroupFull", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "visitGroupingStrategyGroupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "visitIdentifier", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "visitJoinType", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "visitJoinTypeFull", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "visitJoinTypeInner", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "visitJoinTypeLeft", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "visitJoinTypeRight", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "visitLet", "Lorg/partiql/lang/domains/PartiqlAst$Let;", "visitLetBinding", "Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "visitOnConflict", "Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "visitOrderBy", "Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "visitOrderingSpec", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "visitOrderingSpecAsc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "visitOrderingSpecDesc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "visitPathStep", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "visitPathStepPathExpr", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "visitPathStepPathUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "visitPathStepPathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "visitProjectItem", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "visitProjectItemProjectAll", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "visitProjectItemProjectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "visitProjection", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "visitProjectionProjectList", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "visitProjectionProjectPivot", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "visitProjectionProjectStar", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "visitProjectionProjectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "visitReturningElem", "Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "visitReturningExpr", "Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "visitReturningMapping", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "visitReturningMappingAllNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "visitReturningMappingAllOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "visitReturningMappingModifiedNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "visitReturningMappingModifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "visitScopeQualifier", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "visitScopeQualifierLocalsFirst", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "visitScopeQualifierUnqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "visitSetQuantifier", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "visitSetQuantifierAll", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "visitSetQuantifierDistinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "visitSortSpec", "Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "visitStatement", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "visitStatementDdl", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "visitStatementDml", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "visitStatementExec", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "visitStatementQuery", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "visitTimeValue", "Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "visitType", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "visitTypeBagType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "visitTypeBlobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "visitTypeBooleanType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "visitTypeCharacterType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "visitTypeCharacterVaryingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "visitTypeClobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "visitTypeDateType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "visitTypeDecimalType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "visitTypeDoublePrecisionType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "visitTypeFloatType", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "visitTypeIntegerType", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "visitTypeListType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "visitTypeMissingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "visitTypeNullType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "visitTypeNumericType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "visitTypeRealType", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "visitTypeSexpType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "visitTypeSmallintType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "visitTypeStringType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "visitTypeStructType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "visitTypeSymbolType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "visitTypeTimeType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "visitTypeTimeWithTimeZoneType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "visitTypeTimestampType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "visitTypeTupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "walkAssignment", "walkCaseSensitivity", "walkCaseSensitivityCaseInsensitive", "walkCaseSensitivityCaseSensitive", "walkColumnComponent", "walkColumnComponentReturningColumn", "walkColumnComponentReturningWildcard", "walkConflictAction", "walkConflictActionDoNothing", "walkDdlOp", "walkDdlOpCreateIndex", "walkDdlOpCreateTable", "walkDdlOpDropIndex", "walkDdlOpDropTable", "walkDmlOp", "walkDmlOpDelete", "walkDmlOpInsert", "walkDmlOpInsertValue", "walkDmlOpList", "walkDmlOpRemove", "walkDmlOpSet", "walkExpr", "walkExprAnd", "walkExprBag", "walkExprBetween", "walkExprCall", "walkExprCallAgg", "walkExprCast", "walkExprConcat", "walkExprDate", "walkExprDivide", "walkExprEq", "walkExprExcept", "walkExprGt", "walkExprGte", "walkExprId", "walkExprInCollection", "walkExprIntersect", "walkExprIsType", "walkExprLike", "walkExprList", "walkExprLit", "walkExprLitTime", "walkExprLt", "walkExprLte", "walkExprMinus", "walkExprMissing", "walkExprModulo", "walkExprNe", "walkExprNeg", "walkExprNot", "walkExprOr", "walkExprPair", "walkExprPairList", "walkExprParameter", "walkExprPath", "walkExprPlus", "walkExprPos", "walkExprSearchedCase", "walkExprSelect", "walkExprSexp", "walkExprSimpleCase", "walkExprStruct", "walkExprTimes", "walkExprUnion", "walkFromSource", "walkFromSourceJoin", "walkFromSourceScan", "walkFromSourceUnpivot", "walkGroupBy", "walkGroupKey", "walkGroupKeyList", "walkGroupingStrategy", "walkGroupingStrategyGroupFull", "walkGroupingStrategyGroupPartial", "walkIdentifier", "walkJoinType", "walkJoinTypeFull", "walkJoinTypeInner", "walkJoinTypeLeft", "walkJoinTypeRight", "walkLet", "walkLetBinding", "walkOnConflict", "walkOrderBy", "walkOrderingSpec", "walkOrderingSpecAsc", "walkOrderingSpecDesc", "walkPathStep", "walkPathStepPathExpr", "walkPathStepPathUnpivot", "walkPathStepPathWildcard", "walkProjectItem", "walkProjectItemProjectAll", "walkProjectItemProjectExpr", "walkProjection", "walkProjectionProjectList", "walkProjectionProjectPivot", "walkProjectionProjectStar", "walkProjectionProjectValue", "walkReturningElem", "walkReturningExpr", "walkReturningMapping", "walkReturningMappingAllNew", "walkReturningMappingAllOld", "walkReturningMappingModifiedNew", "walkReturningMappingModifiedOld", "walkScopeQualifier", "walkScopeQualifierLocalsFirst", "walkScopeQualifierUnqualified", "walkSetQuantifier", "walkSetQuantifierAll", "walkSetQuantifierDistinct", "walkSortSpec", "walkStatement", "walkStatementDdl", "walkStatementDml", "walkStatementExec", "walkStatementQuery", "walkTimeValue", "walkType", "walkTypeBagType", "walkTypeBlobType", "walkTypeBooleanType", "walkTypeCharacterType", "walkTypeCharacterVaryingType", "walkTypeClobType", "walkTypeDateType", "walkTypeDecimalType", "walkTypeDoublePrecisionType", "walkTypeFloatType", "walkTypeIntegerType", "walkTypeListType", "walkTypeMissingType", "walkTypeNullType", "walkTypeNumericType", "walkTypeRealType", "walkTypeSexpType", "walkTypeSmallintType", "walkTypeStringType", "walkTypeStructType", "walkTypeSymbolType", "walkTypeTimeType", "walkTypeTimeWithTimeZoneType", "walkTypeTimestampType", "walkTypeTupleType", "lang"})
    public static class Visitor
    extends DomainVisitorBase {
        public void visitTimeValue(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitLet(@NotNull Let node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitLetBinding(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitExprPair(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitExprPairList(@NotNull ExprPairList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitGroupBy(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitGroupKeyList(@NotNull GroupKeyList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitGroupKey(@NotNull GroupKey node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitOrderBy(@NotNull OrderBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitSortSpec(@NotNull SortSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitDmlOpList(@NotNull DmlOpList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitOnConflict(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitReturningExpr(@NotNull ReturningExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitReturningElem(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitIdentifier(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void visitAssignment(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitStatement(@NotNull Statement node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitStatementQuery(@NotNull Statement.Query node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitStatementDml(@NotNull Statement.Dml node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitStatementDdl(@NotNull Statement.Ddl node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitStatementExec(@NotNull Statement.Exec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExpr(@NotNull Expr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprMissing(@NotNull Expr.Missing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprLit(@NotNull Expr.Lit node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprId(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprParameter(@NotNull Expr.Parameter node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprNot(@NotNull Expr.Not node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprPos(@NotNull Expr.Pos node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprNeg(@NotNull Expr.Neg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprPlus(@NotNull Expr.Plus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprMinus(@NotNull Expr.Minus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprTimes(@NotNull Expr.Times node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprDivide(@NotNull Expr.Divide node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprModulo(@NotNull Expr.Modulo node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprConcat(@NotNull Expr.Concat node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprAnd(@NotNull Expr.And node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprOr(@NotNull Expr.Or node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprEq(@NotNull Expr.Eq node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprNe(@NotNull Expr.Ne node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprGt(@NotNull Expr.Gt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprGte(@NotNull Expr.Gte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprLt(@NotNull Expr.Lt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprLte(@NotNull Expr.Lte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprLike(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprBetween(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprInCollection(@NotNull Expr.InCollection node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprIsType(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprSimpleCase(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprSearchedCase(@NotNull Expr.SearchedCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprStruct(@NotNull Expr.Struct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprBag(@NotNull Expr.Bag node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprList(@NotNull Expr.List node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprSexp(@NotNull Expr.Sexp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprDate(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprLitTime(@NotNull Expr.LitTime node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprUnion(@NotNull Expr.Union node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprExcept(@NotNull Expr.Except node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprIntersect(@NotNull Expr.Intersect node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprPath(@NotNull Expr.Path node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprCall(@NotNull Expr.Call node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprCallAgg(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprCast(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitExprSelect(@NotNull Expr.Select node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitPathStep(@NotNull PathStep node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitPathStepPathExpr(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitPathStepPathWildcard(@NotNull PathStep.PathWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitPathStepPathUnpivot(@NotNull PathStep.PathUnpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjection(@NotNull Projection node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectionProjectStar(@NotNull Projection.ProjectStar node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectionProjectList(@NotNull Projection.ProjectList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectionProjectPivot(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectionProjectValue(@NotNull Projection.ProjectValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectItem(@NotNull ProjectItem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectItemProjectAll(@NotNull ProjectItem.ProjectAll node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitProjectItemProjectExpr(@NotNull ProjectItem.ProjectExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitFromSource(@NotNull FromSource node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitFromSourceScan(@NotNull FromSource.Scan node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitFromSourceUnpivot(@NotNull FromSource.Unpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitFromSourceJoin(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitJoinType(@NotNull JoinType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitJoinTypeInner(@NotNull JoinType.Inner node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitJoinTypeLeft(@NotNull JoinType.Left node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitJoinTypeRight(@NotNull JoinType.Right node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitJoinTypeFull(@NotNull JoinType.Full node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitGroupingStrategy(@NotNull GroupingStrategy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitGroupingStrategyGroupFull(@NotNull GroupingStrategy.GroupFull node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitGroupingStrategyGroupPartial(@NotNull GroupingStrategy.GroupPartial node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitOrderingSpec(@NotNull OrderingSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitOrderingSpecAsc(@NotNull OrderingSpec.Asc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitOrderingSpecDesc(@NotNull OrderingSpec.Desc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitCaseSensitivity(@NotNull CaseSensitivity node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitCaseSensitivityCaseSensitive(@NotNull CaseSensitivity.CaseSensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitCaseSensitivityCaseInsensitive(@NotNull CaseSensitivity.CaseInsensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitScopeQualifier(@NotNull ScopeQualifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitScopeQualifierUnqualified(@NotNull ScopeQualifier.Unqualified node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitScopeQualifierLocalsFirst(@NotNull ScopeQualifier.LocalsFirst node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitSetQuantifier(@NotNull SetQuantifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitSetQuantifierAll(@NotNull SetQuantifier.All node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitSetQuantifierDistinct(@NotNull SetQuantifier.Distinct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOp(@NotNull DmlOp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOpInsert(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOpInsertValue(@NotNull DmlOp.InsertValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOpSet(@NotNull DmlOp.Set node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOpRemove(@NotNull DmlOp.Remove node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDmlOpDelete(@NotNull DmlOp.Delete node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitConflictAction(@NotNull ConflictAction node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitConflictActionDoNothing(@NotNull ConflictAction.DoNothing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDdlOp(@NotNull DdlOp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDdlOpCreateTable(@NotNull DdlOp.CreateTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDdlOpDropTable(@NotNull DdlOp.DropTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDdlOpCreateIndex(@NotNull DdlOp.CreateIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitDdlOpDropIndex(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitColumnComponent(@NotNull ColumnComponent node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitColumnComponentReturningWildcard(@NotNull ColumnComponent.ReturningWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitColumnComponentReturningColumn(@NotNull ColumnComponent.ReturningColumn node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitReturningMapping(@NotNull ReturningMapping node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitReturningMappingModifiedNew(@NotNull ReturningMapping.ModifiedNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitReturningMappingModifiedOld(@NotNull ReturningMapping.ModifiedOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitReturningMappingAllNew(@NotNull ReturningMapping.AllNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitReturningMappingAllOld(@NotNull ReturningMapping.AllOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitType(@NotNull Type node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeNullType(@NotNull Type.NullType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeBooleanType(@NotNull Type.BooleanType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeSmallintType(@NotNull Type.SmallintType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeIntegerType(@NotNull Type.IntegerType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeFloatType(@NotNull Type.FloatType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeRealType(@NotNull Type.RealType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeDoublePrecisionType(@NotNull Type.DoublePrecisionType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeDecimalType(@NotNull Type.DecimalType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeNumericType(@NotNull Type.NumericType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeTimestampType(@NotNull Type.TimestampType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeCharacterType(@NotNull Type.CharacterType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeCharacterVaryingType(@NotNull Type.CharacterVaryingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeMissingType(@NotNull Type.MissingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeStringType(@NotNull Type.StringType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeSymbolType(@NotNull Type.SymbolType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeBlobType(@NotNull Type.BlobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeClobType(@NotNull Type.ClobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeDateType(@NotNull Type.DateType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeTimeType(@NotNull Type.TimeType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeTimeWithTimeZoneType(@NotNull Type.TimeWithTimeZoneType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeStructType(@NotNull Type.StructType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeTupleType(@NotNull Type.TupleType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeListType(@NotNull Type.ListType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeSexpType(@NotNull Type.SexpType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        protected void visitTypeBagType(@NotNull Type.BagType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
        }

        public void walkTimeValue(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTimeValue(node);
            this.walkLongPrimitive(node.getHour());
            this.walkLongPrimitive(node.getMinute());
            this.walkLongPrimitive(node.getSecond());
            this.walkLongPrimitive(node.getNano());
            this.walkLongPrimitive(node.getPrecision());
            LongPrimitive longPrimitive = node.getTzMinutes();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkLet(@NotNull Let node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitLet(node);
            Iterable $this$map$iv = node.getLetBindings();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                LetBinding letBinding = (LetBinding)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkLetBinding((LetBinding)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkLetBinding(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitLetBinding(node);
            this.walkExpr(node.getExpr());
            this.walkSymbolPrimitive(node.getName());
            this.walkMetas(node.getMetas());
        }

        public void walkExprPair(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprPair(node);
            this.walkExpr(node.getFirst());
            this.walkExpr(node.getSecond());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprPairList(@NotNull ExprPairList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprPairList(node);
            Iterable $this$map$iv = node.getPairs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExprPair((ExprPair)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkGroupBy(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupBy(node);
            this.walkGroupingStrategy(node.getStrategy());
            this.walkGroupKeyList(node.getKeyList());
            SymbolPrimitive symbolPrimitive = node.getGroupAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                this.walkSymbolPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkGroupKeyList(@NotNull GroupKeyList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupKeyList(node);
            Iterable $this$map$iv = node.getKeys();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                GroupKey groupKey = (GroupKey)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkGroupKey((GroupKey)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkGroupKey(@NotNull GroupKey node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupKey(node);
            this.walkExpr(node.getExpr());
            SymbolPrimitive symbolPrimitive = node.getAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                this.walkSymbolPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkOrderBy(@NotNull OrderBy node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitOrderBy(node);
            Iterable $this$map$iv = node.getSortSpecs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                SortSpec sortSpec = (SortSpec)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkSortSpec((SortSpec)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkSortSpec(@NotNull SortSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitSortSpec(node);
            this.walkExpr(node.getExpr());
            OrderingSpec orderingSpec = node.getOrderingSpec();
            if (orderingSpec != null) {
                OrderingSpec orderingSpec2 = orderingSpec;
                boolean bl = false;
                boolean bl2 = false;
                OrderingSpec it = orderingSpec2;
                boolean bl3 = false;
                this.walkOrderingSpec(it);
            }
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkDmlOpList(@NotNull DmlOpList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpList(node);
            Iterable $this$map$iv = node.getOps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                DmlOp dmlOp = (DmlOp)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkDmlOp((DmlOp)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkOnConflict(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitOnConflict(node);
            this.walkExpr(node.getExpr());
            this.walkConflictAction(node.getConflictAction());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkReturningExpr(@NotNull ReturningExpr node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningExpr(node);
            Iterable $this$map$iv = node.getElems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ReturningElem returningElem = (ReturningElem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkReturningElem((ReturningElem)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkReturningElem(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningElem(node);
            this.walkReturningMapping(node.getMapping());
            this.walkColumnComponent(node.getColumn());
            this.walkMetas(node.getMetas());
        }

        public void walkIdentifier(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitIdentifier(node);
            this.walkSymbolPrimitive(node.getName());
            this.walkCaseSensitivity(node.getCase());
            this.walkMetas(node.getMetas());
        }

        public void walkAssignment(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitAssignment(node);
            this.walkExpr(node.getTarget());
            this.walkExpr(node.getValue());
            this.walkMetas(node.getMetas());
        }

        public void walkStatement(@NotNull Statement node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitStatement(node);
            Statement statement = node;
            if (statement instanceof Statement.Query) {
                this.walkStatementQuery((Statement.Query)node);
            } else if (statement instanceof Statement.Dml) {
                this.walkStatementDml((Statement.Dml)node);
            } else if (statement instanceof Statement.Ddl) {
                this.walkStatementDdl((Statement.Ddl)node);
            } else if (statement instanceof Statement.Exec) {
                this.walkStatementExec((Statement.Exec)node);
            }
        }

        public void walkStatementQuery(@NotNull Statement.Query node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitStatementQuery(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        public void walkStatementDml(@NotNull Statement.Dml node) {
            FromSource it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitStatementDml(node);
            this.walkDmlOpList(node.getOperations());
            FromSource fromSource = node.getFrom();
            if (fromSource != null) {
                partiqlAstNode = fromSource;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                this.walkFromSource(it);
            }
            Expr expr = node.getWhere();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                this.walkExpr((Expr)((Object)it));
            }
            ReturningExpr returningExpr = node.getReturning();
            if (returningExpr != null) {
                partiqlAstNode = returningExpr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl5 = false;
                this.walkReturningExpr((ReturningExpr)((Object)it));
            }
            this.walkMetas(node.getMetas());
        }

        public void walkStatementDdl(@NotNull Statement.Ddl node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitStatementDdl(node);
            this.walkDdlOp(node.getOp());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkStatementExec(@NotNull Statement.Exec node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitStatementExec(node);
            this.walkSymbolPrimitive(node.getProcedureName());
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkExpr(@NotNull Expr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExpr(node);
            Expr expr = node;
            if (expr instanceof Expr.Missing) {
                this.walkExprMissing((Expr.Missing)node);
            } else if (expr instanceof Expr.Lit) {
                this.walkExprLit((Expr.Lit)node);
            } else if (expr instanceof Expr.Id) {
                this.walkExprId((Expr.Id)node);
            } else if (expr instanceof Expr.Parameter) {
                this.walkExprParameter((Expr.Parameter)node);
            } else if (expr instanceof Expr.Not) {
                this.walkExprNot((Expr.Not)node);
            } else if (expr instanceof Expr.Pos) {
                this.walkExprPos((Expr.Pos)node);
            } else if (expr instanceof Expr.Neg) {
                this.walkExprNeg((Expr.Neg)node);
            } else if (expr instanceof Expr.Plus) {
                this.walkExprPlus((Expr.Plus)node);
            } else if (expr instanceof Expr.Minus) {
                this.walkExprMinus((Expr.Minus)node);
            } else if (expr instanceof Expr.Times) {
                this.walkExprTimes((Expr.Times)node);
            } else if (expr instanceof Expr.Divide) {
                this.walkExprDivide((Expr.Divide)node);
            } else if (expr instanceof Expr.Modulo) {
                this.walkExprModulo((Expr.Modulo)node);
            } else if (expr instanceof Expr.Concat) {
                this.walkExprConcat((Expr.Concat)node);
            } else if (expr instanceof Expr.And) {
                this.walkExprAnd((Expr.And)node);
            } else if (expr instanceof Expr.Or) {
                this.walkExprOr((Expr.Or)node);
            } else if (expr instanceof Expr.Eq) {
                this.walkExprEq((Expr.Eq)node);
            } else if (expr instanceof Expr.Ne) {
                this.walkExprNe((Expr.Ne)node);
            } else if (expr instanceof Expr.Gt) {
                this.walkExprGt((Expr.Gt)node);
            } else if (expr instanceof Expr.Gte) {
                this.walkExprGte((Expr.Gte)node);
            } else if (expr instanceof Expr.Lt) {
                this.walkExprLt((Expr.Lt)node);
            } else if (expr instanceof Expr.Lte) {
                this.walkExprLte((Expr.Lte)node);
            } else if (expr instanceof Expr.Like) {
                this.walkExprLike((Expr.Like)node);
            } else if (expr instanceof Expr.Between) {
                this.walkExprBetween((Expr.Between)node);
            } else if (expr instanceof Expr.InCollection) {
                this.walkExprInCollection((Expr.InCollection)node);
            } else if (expr instanceof Expr.IsType) {
                this.walkExprIsType((Expr.IsType)node);
            } else if (expr instanceof Expr.SimpleCase) {
                this.walkExprSimpleCase((Expr.SimpleCase)node);
            } else if (expr instanceof Expr.SearchedCase) {
                this.walkExprSearchedCase((Expr.SearchedCase)node);
            } else if (expr instanceof Expr.Struct) {
                this.walkExprStruct((Expr.Struct)node);
            } else if (expr instanceof Expr.Bag) {
                this.walkExprBag((Expr.Bag)node);
            } else if (expr instanceof Expr.List) {
                this.walkExprList((Expr.List)node);
            } else if (expr instanceof Expr.Sexp) {
                this.walkExprSexp((Expr.Sexp)node);
            } else if (expr instanceof Expr.Date) {
                this.walkExprDate((Expr.Date)node);
            } else if (expr instanceof Expr.LitTime) {
                this.walkExprLitTime((Expr.LitTime)node);
            } else if (expr instanceof Expr.Union) {
                this.walkExprUnion((Expr.Union)node);
            } else if (expr instanceof Expr.Except) {
                this.walkExprExcept((Expr.Except)node);
            } else if (expr instanceof Expr.Intersect) {
                this.walkExprIntersect((Expr.Intersect)node);
            } else if (expr instanceof Expr.Path) {
                this.walkExprPath((Expr.Path)node);
            } else if (expr instanceof Expr.Call) {
                this.walkExprCall((Expr.Call)node);
            } else if (expr instanceof Expr.CallAgg) {
                this.walkExprCallAgg((Expr.CallAgg)node);
            } else if (expr instanceof Expr.Cast) {
                this.walkExprCast((Expr.Cast)node);
            } else if (expr instanceof Expr.Select) {
                this.walkExprSelect((Expr.Select)node);
            }
        }

        public void walkExprMissing(@NotNull Expr.Missing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprMissing(node);
            this.walkMetas(node.getMetas());
        }

        public void walkExprLit(@NotNull Expr.Lit node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprLit(node);
            this.walkAnyElement(node.getValue());
            this.walkMetas(node.getMetas());
        }

        public void walkExprId(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprId(node);
            this.walkSymbolPrimitive(node.getName());
            this.walkCaseSensitivity(node.getCase());
            this.walkScopeQualifier(node.getQualifier());
            this.walkMetas(node.getMetas());
        }

        public void walkExprParameter(@NotNull Expr.Parameter node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprParameter(node);
            this.walkLongPrimitive(node.getIndex());
            this.walkMetas(node.getMetas());
        }

        public void walkExprNot(@NotNull Expr.Not node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprNot(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        public void walkExprPos(@NotNull Expr.Pos node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprPos(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        public void walkExprNeg(@NotNull Expr.Neg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprNeg(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprPlus(@NotNull Expr.Plus node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprPlus(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprMinus(@NotNull Expr.Minus node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprMinus(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprTimes(@NotNull Expr.Times node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprTimes(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprDivide(@NotNull Expr.Divide node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprDivide(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprModulo(@NotNull Expr.Modulo node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprModulo(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprConcat(@NotNull Expr.Concat node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprConcat(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprAnd(@NotNull Expr.And node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprAnd(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprOr(@NotNull Expr.Or node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprOr(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprEq(@NotNull Expr.Eq node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprEq(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprNe(@NotNull Expr.Ne node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprNe(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprGt(@NotNull Expr.Gt node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprGt(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprGte(@NotNull Expr.Gte node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprGte(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprLt(@NotNull Expr.Lt node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprLt(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprLte(@NotNull Expr.Lte node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprLte(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkExprLike(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprLike(node);
            this.walkExpr(node.getValue());
            this.walkExpr(node.getPattern());
            Expr expr = node.getEscape();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                this.walkExpr(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkExprBetween(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprBetween(node);
            this.walkExpr(node.getValue());
            this.walkExpr(node.getFrom());
            this.walkExpr(node.getTo());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprInCollection(@NotNull Expr.InCollection node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprInCollection(node);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkExprIsType(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprIsType(node);
            this.walkExpr(node.getValue());
            this.walkType(node.getType());
            this.walkMetas(node.getMetas());
        }

        public void walkExprSimpleCase(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprSimpleCase(node);
            this.walkExpr(node.getExpr());
            this.walkExprPairList(node.getCases());
            Expr expr = node.getDefault();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                this.walkExpr(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkExprSearchedCase(@NotNull Expr.SearchedCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprSearchedCase(node);
            this.walkExprPairList(node.getCases());
            Expr expr = node.getDefault();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                this.walkExpr(it);
            }
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprStruct(@NotNull Expr.Struct node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprStruct(node);
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExprPair((ExprPair)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprBag(@NotNull Expr.Bag node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprBag(node);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprList(@NotNull Expr.List node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprList(node);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprSexp(@NotNull Expr.Sexp node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprSexp(node);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkExprDate(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprDate(node);
            this.walkLongPrimitive(node.getYear());
            this.walkLongPrimitive(node.getMonth());
            this.walkLongPrimitive(node.getDay());
            this.walkMetas(node.getMetas());
        }

        public void walkExprLitTime(@NotNull Expr.LitTime node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprLitTime(node);
            this.walkTimeValue(node.getValue());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprUnion(@NotNull Expr.Union node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprUnion(node);
            this.walkSetQuantifier(node.getSetq());
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprExcept(@NotNull Expr.Except node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprExcept(node);
            this.walkSetQuantifier(node.getSetq());
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprIntersect(@NotNull Expr.Intersect node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprIntersect(node);
            this.walkSetQuantifier(node.getSetq());
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprPath(@NotNull Expr.Path node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprPath(node);
            this.walkExpr(node.getRoot());
            Iterable $this$map$iv = node.getSteps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                PathStep pathStep = (PathStep)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkPathStep((PathStep)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkExprCall(@NotNull Expr.Call node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprCall(node);
            this.walkSymbolPrimitive(node.getFuncName());
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkExprCallAgg(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprCallAgg(node);
            this.walkSetQuantifier(node.getSetq());
            this.walkSymbolPrimitive(node.getFuncName());
            this.walkExpr(node.getArg());
            this.walkMetas(node.getMetas());
        }

        public void walkExprCast(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprCast(node);
            this.walkExpr(node.getValue());
            this.walkType(node.getAsType());
            this.walkMetas(node.getMetas());
        }

        public void walkExprSelect(@NotNull Expr.Select node) {
            SetQuantifier it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitExprSelect(node);
            SetQuantifier setQuantifier = node.getSetq();
            if (setQuantifier != null) {
                partiqlAstNode = setQuantifier;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                this.walkSetQuantifier(it);
            }
            this.walkProjection(node.getProject());
            this.walkFromSource(node.getFrom());
            Let let2 = node.getFromLet();
            if (let2 != null) {
                partiqlAstNode = let2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                this.walkLet((Let)((Object)it));
            }
            Expr expr = node.getWhere();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl5 = false;
                this.walkExpr((Expr)((Object)it));
            }
            GroupBy groupBy2 = node.getGroup();
            if (groupBy2 != null) {
                partiqlAstNode = groupBy2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl6 = false;
                this.walkGroupBy((GroupBy)((Object)it));
            }
            Expr expr2 = node.getHaving();
            if (expr2 != null) {
                partiqlAstNode = expr2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl7 = false;
                this.walkExpr((Expr)((Object)it));
            }
            OrderBy orderBy = node.getOrder();
            if (orderBy != null) {
                partiqlAstNode = orderBy;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl8 = false;
                this.walkOrderBy((OrderBy)((Object)it));
            }
            Expr expr3 = node.getLimit();
            if (expr3 != null) {
                partiqlAstNode = expr3;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl9 = false;
                this.walkExpr((Expr)((Object)it));
            }
            this.walkMetas(node.getMetas());
        }

        public void walkPathStep(@NotNull PathStep node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitPathStep(node);
            PathStep pathStep = node;
            if (pathStep instanceof PathStep.PathExpr) {
                this.walkPathStepPathExpr((PathStep.PathExpr)node);
            } else if (pathStep instanceof PathStep.PathWildcard) {
                this.walkPathStepPathWildcard((PathStep.PathWildcard)node);
            } else if (pathStep instanceof PathStep.PathUnpivot) {
                this.walkPathStepPathUnpivot((PathStep.PathUnpivot)node);
            }
        }

        public void walkPathStepPathExpr(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitPathStepPathExpr(node);
            this.walkExpr(node.getIndex());
            this.walkCaseSensitivity(node.getCase());
            this.walkMetas(node.getMetas());
        }

        public void walkPathStepPathWildcard(@NotNull PathStep.PathWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitPathStepPathWildcard(node);
            this.walkMetas(node.getMetas());
        }

        public void walkPathStepPathUnpivot(@NotNull PathStep.PathUnpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitPathStepPathUnpivot(node);
            this.walkMetas(node.getMetas());
        }

        public void walkProjection(@NotNull Projection node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjection(node);
            Projection projection = node;
            if (projection instanceof Projection.ProjectStar) {
                this.walkProjectionProjectStar((Projection.ProjectStar)node);
            } else if (projection instanceof Projection.ProjectList) {
                this.walkProjectionProjectList((Projection.ProjectList)node);
            } else if (projection instanceof Projection.ProjectPivot) {
                this.walkProjectionProjectPivot((Projection.ProjectPivot)node);
            } else if (projection instanceof Projection.ProjectValue) {
                this.walkProjectionProjectValue((Projection.ProjectValue)node);
            }
        }

        public void walkProjectionProjectStar(@NotNull Projection.ProjectStar node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectionProjectStar(node);
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkProjectionProjectList(@NotNull Projection.ProjectList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectionProjectList(node);
            Iterable $this$map$iv = node.getProjectItems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ProjectItem projectItem = (ProjectItem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkProjectItem((ProjectItem)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkProjectionProjectPivot(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectionProjectPivot(node);
            this.walkExpr(node.getValue());
            this.walkExpr(node.getKey());
            this.walkMetas(node.getMetas());
        }

        public void walkProjectionProjectValue(@NotNull Projection.ProjectValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectionProjectValue(node);
            this.walkExpr(node.getValue());
            this.walkMetas(node.getMetas());
        }

        public void walkProjectItem(@NotNull ProjectItem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectItem(node);
            ProjectItem projectItem = node;
            if (projectItem instanceof ProjectItem.ProjectAll) {
                this.walkProjectItemProjectAll((ProjectItem.ProjectAll)node);
            } else if (projectItem instanceof ProjectItem.ProjectExpr) {
                this.walkProjectItemProjectExpr((ProjectItem.ProjectExpr)node);
            }
        }

        public void walkProjectItemProjectAll(@NotNull ProjectItem.ProjectAll node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectItemProjectAll(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        public void walkProjectItemProjectExpr(@NotNull ProjectItem.ProjectExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitProjectItemProjectExpr(node);
            this.walkExpr(node.getExpr());
            SymbolPrimitive symbolPrimitive = node.getAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                this.walkSymbolPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkFromSource(@NotNull FromSource node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitFromSource(node);
            FromSource fromSource = node;
            if (fromSource instanceof FromSource.Scan) {
                this.walkFromSourceScan((FromSource.Scan)node);
            } else if (fromSource instanceof FromSource.Unpivot) {
                this.walkFromSourceUnpivot((FromSource.Unpivot)node);
            } else if (fromSource instanceof FromSource.Join) {
                this.walkFromSourceJoin((FromSource.Join)node);
            }
        }

        public void walkFromSourceScan(@NotNull FromSource.Scan node) {
            SymbolPrimitive it;
            boolean bl;
            boolean bl2;
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitFromSourceScan(node);
            this.walkExpr(node.getExpr());
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                symbolPrimitive = symbolPrimitive2;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl3 = false;
                this.walkSymbolPrimitive(it);
            }
            SymbolPrimitive symbolPrimitive3 = node.getAtAlias();
            if (symbolPrimitive3 != null) {
                symbolPrimitive = symbolPrimitive3;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl4 = false;
                this.walkSymbolPrimitive(it);
            }
            SymbolPrimitive symbolPrimitive4 = node.getByAlias();
            if (symbolPrimitive4 != null) {
                symbolPrimitive = symbolPrimitive4;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl5 = false;
                this.walkSymbolPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkFromSourceUnpivot(@NotNull FromSource.Unpivot node) {
            SymbolPrimitive it;
            boolean bl;
            boolean bl2;
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitFromSourceUnpivot(node);
            this.walkExpr(node.getExpr());
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                symbolPrimitive = symbolPrimitive2;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl3 = false;
                this.walkSymbolPrimitive(it);
            }
            SymbolPrimitive symbolPrimitive3 = node.getAtAlias();
            if (symbolPrimitive3 != null) {
                symbolPrimitive = symbolPrimitive3;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl4 = false;
                this.walkSymbolPrimitive(it);
            }
            SymbolPrimitive symbolPrimitive4 = node.getByAlias();
            if (symbolPrimitive4 != null) {
                symbolPrimitive = symbolPrimitive4;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl5 = false;
                this.walkSymbolPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkFromSourceJoin(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitFromSourceJoin(node);
            this.walkJoinType(node.getType());
            this.walkFromSource(node.getLeft());
            this.walkFromSource(node.getRight());
            Expr expr = node.getPredicate();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                this.walkExpr(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkJoinType(@NotNull JoinType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitJoinType(node);
            JoinType joinType = node;
            if (joinType instanceof JoinType.Inner) {
                this.walkJoinTypeInner((JoinType.Inner)node);
            } else if (joinType instanceof JoinType.Left) {
                this.walkJoinTypeLeft((JoinType.Left)node);
            } else if (joinType instanceof JoinType.Right) {
                this.walkJoinTypeRight((JoinType.Right)node);
            } else if (joinType instanceof JoinType.Full) {
                this.walkJoinTypeFull((JoinType.Full)node);
            }
        }

        public void walkJoinTypeInner(@NotNull JoinType.Inner node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitJoinTypeInner(node);
            this.walkMetas(node.getMetas());
        }

        public void walkJoinTypeLeft(@NotNull JoinType.Left node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitJoinTypeLeft(node);
            this.walkMetas(node.getMetas());
        }

        public void walkJoinTypeRight(@NotNull JoinType.Right node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitJoinTypeRight(node);
            this.walkMetas(node.getMetas());
        }

        public void walkJoinTypeFull(@NotNull JoinType.Full node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitJoinTypeFull(node);
            this.walkMetas(node.getMetas());
        }

        public void walkGroupingStrategy(@NotNull GroupingStrategy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupingStrategy(node);
            GroupingStrategy groupingStrategy = node;
            if (groupingStrategy instanceof GroupingStrategy.GroupFull) {
                this.walkGroupingStrategyGroupFull((GroupingStrategy.GroupFull)node);
            } else if (groupingStrategy instanceof GroupingStrategy.GroupPartial) {
                this.walkGroupingStrategyGroupPartial((GroupingStrategy.GroupPartial)node);
            }
        }

        public void walkGroupingStrategyGroupFull(@NotNull GroupingStrategy.GroupFull node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupingStrategyGroupFull(node);
            this.walkMetas(node.getMetas());
        }

        public void walkGroupingStrategyGroupPartial(@NotNull GroupingStrategy.GroupPartial node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitGroupingStrategyGroupPartial(node);
            this.walkMetas(node.getMetas());
        }

        public void walkOrderingSpec(@NotNull OrderingSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitOrderingSpec(node);
            OrderingSpec orderingSpec = node;
            if (orderingSpec instanceof OrderingSpec.Asc) {
                this.walkOrderingSpecAsc((OrderingSpec.Asc)node);
            } else if (orderingSpec instanceof OrderingSpec.Desc) {
                this.walkOrderingSpecDesc((OrderingSpec.Desc)node);
            }
        }

        public void walkOrderingSpecAsc(@NotNull OrderingSpec.Asc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitOrderingSpecAsc(node);
            this.walkMetas(node.getMetas());
        }

        public void walkOrderingSpecDesc(@NotNull OrderingSpec.Desc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitOrderingSpecDesc(node);
            this.walkMetas(node.getMetas());
        }

        public void walkCaseSensitivity(@NotNull CaseSensitivity node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitCaseSensitivity(node);
            CaseSensitivity caseSensitivity = node;
            if (caseSensitivity instanceof CaseSensitivity.CaseSensitive) {
                this.walkCaseSensitivityCaseSensitive((CaseSensitivity.CaseSensitive)node);
            } else if (caseSensitivity instanceof CaseSensitivity.CaseInsensitive) {
                this.walkCaseSensitivityCaseInsensitive((CaseSensitivity.CaseInsensitive)node);
            }
        }

        public void walkCaseSensitivityCaseSensitive(@NotNull CaseSensitivity.CaseSensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitCaseSensitivityCaseSensitive(node);
            this.walkMetas(node.getMetas());
        }

        public void walkCaseSensitivityCaseInsensitive(@NotNull CaseSensitivity.CaseInsensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitCaseSensitivityCaseInsensitive(node);
            this.walkMetas(node.getMetas());
        }

        public void walkScopeQualifier(@NotNull ScopeQualifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitScopeQualifier(node);
            ScopeQualifier scopeQualifier = node;
            if (scopeQualifier instanceof ScopeQualifier.Unqualified) {
                this.walkScopeQualifierUnqualified((ScopeQualifier.Unqualified)node);
            } else if (scopeQualifier instanceof ScopeQualifier.LocalsFirst) {
                this.walkScopeQualifierLocalsFirst((ScopeQualifier.LocalsFirst)node);
            }
        }

        public void walkScopeQualifierUnqualified(@NotNull ScopeQualifier.Unqualified node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitScopeQualifierUnqualified(node);
            this.walkMetas(node.getMetas());
        }

        public void walkScopeQualifierLocalsFirst(@NotNull ScopeQualifier.LocalsFirst node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitScopeQualifierLocalsFirst(node);
            this.walkMetas(node.getMetas());
        }

        public void walkSetQuantifier(@NotNull SetQuantifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitSetQuantifier(node);
            SetQuantifier setQuantifier = node;
            if (setQuantifier instanceof SetQuantifier.All) {
                this.walkSetQuantifierAll((SetQuantifier.All)node);
            } else if (setQuantifier instanceof SetQuantifier.Distinct) {
                this.walkSetQuantifierDistinct((SetQuantifier.Distinct)node);
            }
        }

        public void walkSetQuantifierAll(@NotNull SetQuantifier.All node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitSetQuantifierAll(node);
            this.walkMetas(node.getMetas());
        }

        public void walkSetQuantifierDistinct(@NotNull SetQuantifier.Distinct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitSetQuantifierDistinct(node);
            this.walkMetas(node.getMetas());
        }

        public void walkDmlOp(@NotNull DmlOp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOp(node);
            DmlOp dmlOp = node;
            if (dmlOp instanceof DmlOp.Insert) {
                this.walkDmlOpInsert((DmlOp.Insert)node);
            } else if (dmlOp instanceof DmlOp.InsertValue) {
                this.walkDmlOpInsertValue((DmlOp.InsertValue)node);
            } else if (dmlOp instanceof DmlOp.Set) {
                this.walkDmlOpSet((DmlOp.Set)node);
            } else if (dmlOp instanceof DmlOp.Remove) {
                this.walkDmlOpRemove((DmlOp.Remove)node);
            } else if (dmlOp instanceof DmlOp.Delete) {
                this.walkDmlOpDelete((DmlOp.Delete)node);
            }
        }

        public void walkDmlOpInsert(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpInsert(node);
            this.walkExpr(node.getTarget());
            this.walkExpr(node.getValues());
            this.walkMetas(node.getMetas());
        }

        public void walkDmlOpInsertValue(@NotNull DmlOp.InsertValue node) {
            Expr it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpInsertValue(node);
            this.walkExpr(node.getTarget());
            this.walkExpr(node.getValue());
            Expr expr = node.getIndex();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                this.walkExpr(it);
            }
            OnConflict onConflict = node.getOnConflict();
            if (onConflict != null) {
                partiqlAstNode = onConflict;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                this.walkOnConflict((OnConflict)((Object)it));
            }
            this.walkMetas(node.getMetas());
        }

        public void walkDmlOpSet(@NotNull DmlOp.Set node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpSet(node);
            this.walkAssignment(node.getAssignment());
            this.walkMetas(node.getMetas());
        }

        public void walkDmlOpRemove(@NotNull DmlOp.Remove node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpRemove(node);
            this.walkExpr(node.getTarget());
            this.walkMetas(node.getMetas());
        }

        public void walkDmlOpDelete(@NotNull DmlOp.Delete node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDmlOpDelete(node);
            this.walkMetas(node.getMetas());
        }

        public void walkConflictAction(@NotNull ConflictAction node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitConflictAction(node);
            ConflictAction conflictAction = node;
            if (conflictAction instanceof ConflictAction.DoNothing) {
                this.walkConflictActionDoNothing((ConflictAction.DoNothing)node);
            }
        }

        public void walkConflictActionDoNothing(@NotNull ConflictAction.DoNothing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitConflictActionDoNothing(node);
            this.walkMetas(node.getMetas());
        }

        public void walkDdlOp(@NotNull DdlOp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDdlOp(node);
            DdlOp ddlOp = node;
            if (ddlOp instanceof DdlOp.CreateTable) {
                this.walkDdlOpCreateTable((DdlOp.CreateTable)node);
            } else if (ddlOp instanceof DdlOp.DropTable) {
                this.walkDdlOpDropTable((DdlOp.DropTable)node);
            } else if (ddlOp instanceof DdlOp.CreateIndex) {
                this.walkDdlOpCreateIndex((DdlOp.CreateIndex)node);
            } else if (ddlOp instanceof DdlOp.DropIndex) {
                this.walkDdlOpDropIndex((DdlOp.DropIndex)node);
            }
        }

        public void walkDdlOpCreateTable(@NotNull DdlOp.CreateTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDdlOpCreateTable(node);
            this.walkSymbolPrimitive(node.getTableName());
            this.walkMetas(node.getMetas());
        }

        public void walkDdlOpDropTable(@NotNull DdlOp.DropTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDdlOpDropTable(node);
            this.walkIdentifier(node.getTableName());
            this.walkMetas(node.getMetas());
        }

        /*
         * WARNING - void declaration
         */
        public void walkDdlOpCreateIndex(@NotNull DdlOp.CreateIndex node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDdlOpCreateIndex(node);
            this.walkIdentifier(node.getIndexName());
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                this.walkExpr((Expr)it);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            this.walkMetas(node.getMetas());
        }

        public void walkDdlOpDropIndex(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitDdlOpDropIndex(node);
            this.walkIdentifier(node.getTable());
            this.walkIdentifier(node.getKeys());
            this.walkMetas(node.getMetas());
        }

        public void walkColumnComponent(@NotNull ColumnComponent node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitColumnComponent(node);
            ColumnComponent columnComponent = node;
            if (columnComponent instanceof ColumnComponent.ReturningWildcard) {
                this.walkColumnComponentReturningWildcard((ColumnComponent.ReturningWildcard)node);
            } else if (columnComponent instanceof ColumnComponent.ReturningColumn) {
                this.walkColumnComponentReturningColumn((ColumnComponent.ReturningColumn)node);
            }
        }

        public void walkColumnComponentReturningWildcard(@NotNull ColumnComponent.ReturningWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitColumnComponentReturningWildcard(node);
            this.walkMetas(node.getMetas());
        }

        public void walkColumnComponentReturningColumn(@NotNull ColumnComponent.ReturningColumn node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitColumnComponentReturningColumn(node);
            this.walkExpr(node.getExpr());
            this.walkMetas(node.getMetas());
        }

        public void walkReturningMapping(@NotNull ReturningMapping node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningMapping(node);
            ReturningMapping returningMapping = node;
            if (returningMapping instanceof ReturningMapping.ModifiedNew) {
                this.walkReturningMappingModifiedNew((ReturningMapping.ModifiedNew)node);
            } else if (returningMapping instanceof ReturningMapping.ModifiedOld) {
                this.walkReturningMappingModifiedOld((ReturningMapping.ModifiedOld)node);
            } else if (returningMapping instanceof ReturningMapping.AllNew) {
                this.walkReturningMappingAllNew((ReturningMapping.AllNew)node);
            } else if (returningMapping instanceof ReturningMapping.AllOld) {
                this.walkReturningMappingAllOld((ReturningMapping.AllOld)node);
            }
        }

        public void walkReturningMappingModifiedNew(@NotNull ReturningMapping.ModifiedNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningMappingModifiedNew(node);
            this.walkMetas(node.getMetas());
        }

        public void walkReturningMappingModifiedOld(@NotNull ReturningMapping.ModifiedOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningMappingModifiedOld(node);
            this.walkMetas(node.getMetas());
        }

        public void walkReturningMappingAllNew(@NotNull ReturningMapping.AllNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningMappingAllNew(node);
            this.walkMetas(node.getMetas());
        }

        public void walkReturningMappingAllOld(@NotNull ReturningMapping.AllOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitReturningMappingAllOld(node);
            this.walkMetas(node.getMetas());
        }

        public void walkType(@NotNull Type node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitType(node);
            Type type = node;
            if (type instanceof Type.NullType) {
                this.walkTypeNullType((Type.NullType)node);
            } else if (type instanceof Type.BooleanType) {
                this.walkTypeBooleanType((Type.BooleanType)node);
            } else if (type instanceof Type.SmallintType) {
                this.walkTypeSmallintType((Type.SmallintType)node);
            } else if (type instanceof Type.IntegerType) {
                this.walkTypeIntegerType((Type.IntegerType)node);
            } else if (type instanceof Type.FloatType) {
                this.walkTypeFloatType((Type.FloatType)node);
            } else if (type instanceof Type.RealType) {
                this.walkTypeRealType((Type.RealType)node);
            } else if (type instanceof Type.DoublePrecisionType) {
                this.walkTypeDoublePrecisionType((Type.DoublePrecisionType)node);
            } else if (type instanceof Type.DecimalType) {
                this.walkTypeDecimalType((Type.DecimalType)node);
            } else if (type instanceof Type.NumericType) {
                this.walkTypeNumericType((Type.NumericType)node);
            } else if (type instanceof Type.TimestampType) {
                this.walkTypeTimestampType((Type.TimestampType)node);
            } else if (type instanceof Type.CharacterType) {
                this.walkTypeCharacterType((Type.CharacterType)node);
            } else if (type instanceof Type.CharacterVaryingType) {
                this.walkTypeCharacterVaryingType((Type.CharacterVaryingType)node);
            } else if (type instanceof Type.MissingType) {
                this.walkTypeMissingType((Type.MissingType)node);
            } else if (type instanceof Type.StringType) {
                this.walkTypeStringType((Type.StringType)node);
            } else if (type instanceof Type.SymbolType) {
                this.walkTypeSymbolType((Type.SymbolType)node);
            } else if (type instanceof Type.BlobType) {
                this.walkTypeBlobType((Type.BlobType)node);
            } else if (type instanceof Type.ClobType) {
                this.walkTypeClobType((Type.ClobType)node);
            } else if (type instanceof Type.DateType) {
                this.walkTypeDateType((Type.DateType)node);
            } else if (type instanceof Type.TimeType) {
                this.walkTypeTimeType((Type.TimeType)node);
            } else if (type instanceof Type.TimeWithTimeZoneType) {
                this.walkTypeTimeWithTimeZoneType((Type.TimeWithTimeZoneType)node);
            } else if (type instanceof Type.StructType) {
                this.walkTypeStructType((Type.StructType)node);
            } else if (type instanceof Type.TupleType) {
                this.walkTypeTupleType((Type.TupleType)node);
            } else if (type instanceof Type.ListType) {
                this.walkTypeListType((Type.ListType)node);
            } else if (type instanceof Type.SexpType) {
                this.walkTypeSexpType((Type.SexpType)node);
            } else if (type instanceof Type.BagType) {
                this.walkTypeBagType((Type.BagType)node);
            }
        }

        public void walkTypeNullType(@NotNull Type.NullType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeNullType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeBooleanType(@NotNull Type.BooleanType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeBooleanType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeSmallintType(@NotNull Type.SmallintType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeSmallintType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeIntegerType(@NotNull Type.IntegerType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeIntegerType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeFloatType(@NotNull Type.FloatType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeFloatType(node);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeRealType(@NotNull Type.RealType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeRealType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeDoublePrecisionType(@NotNull Type.DoublePrecisionType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeDoublePrecisionType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeDecimalType(@NotNull Type.DecimalType node) {
            LongPrimitive it;
            boolean bl;
            boolean bl2;
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeDecimalType(node);
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                longPrimitive = longPrimitive2;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            LongPrimitive longPrimitive3 = node.getScale();
            if (longPrimitive3 != null) {
                longPrimitive = longPrimitive3;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl4 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeNumericType(@NotNull Type.NumericType node) {
            LongPrimitive it;
            boolean bl;
            boolean bl2;
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeNumericType(node);
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                longPrimitive = longPrimitive2;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            LongPrimitive longPrimitive3 = node.getScale();
            if (longPrimitive3 != null) {
                longPrimitive = longPrimitive3;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl4 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeTimestampType(@NotNull Type.TimestampType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeTimestampType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeCharacterType(@NotNull Type.CharacterType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeCharacterType(node);
            LongPrimitive longPrimitive = node.getLength();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeCharacterVaryingType(@NotNull Type.CharacterVaryingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeCharacterVaryingType(node);
            LongPrimitive longPrimitive = node.getLength();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeMissingType(@NotNull Type.MissingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeMissingType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeStringType(@NotNull Type.StringType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeStringType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeSymbolType(@NotNull Type.SymbolType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeSymbolType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeBlobType(@NotNull Type.BlobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeBlobType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeClobType(@NotNull Type.ClobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeClobType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeDateType(@NotNull Type.DateType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeDateType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeTimeType(@NotNull Type.TimeType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeTimeType(node);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeTimeWithTimeZoneType(@NotNull Type.TimeWithTimeZoneType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeTimeWithTimeZoneType(node);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                this.walkLongPrimitive(it);
            }
            this.walkMetas(node.getMetas());
        }

        public void walkTypeStructType(@NotNull Type.StructType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeStructType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeTupleType(@NotNull Type.TupleType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeTupleType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeListType(@NotNull Type.ListType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeListType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeSexpType(@NotNull Type.SexpType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeSexpType(node);
            this.walkMetas(node.getMetas());
        }

        public void walkTypeBagType(@NotNull Type.BagType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            this.visitTypeBagType(node);
            this.walkMetas(node.getMetas());
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u009f\t\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0003\b\u0094\u0001\b\u0016\u0018\u0000*\u0004\b\u0000\u0010\u00012\b\u0012\u0004\u0012\u0002H\u00010\u0002B\u0005\u00a2\u0006\u0002\u0010\u0003J\u001d\u0010\u0004\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\bJ\u001d\u0010\t\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\n2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u000bJ\u001d\u0010\f\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\r2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u000eJ\u001d\u0010\u000f\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00102\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u0011J\u001d\u0010\u0012\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00132\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u0014J\u001d\u0010\u0015\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00162\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u0017J\u001d\u0010\u0018\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00192\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u001aJ\u001d\u0010\u001b\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u001c2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\u001dJ\u001d\u0010\u001e\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u001f2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010 J\u001d\u0010!\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\"2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010#J\u001d\u0010$\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020%2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010&J\u001d\u0010'\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020(2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010)J\u001d\u0010*\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020+2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010,J\u001d\u0010-\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020.2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010/J\u001d\u00100\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u00102J\u001d\u00103\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002042\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u00105J\u001d\u00106\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002072\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u00108J\u001d\u00109\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020:2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010;J\u001d\u0010<\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020=2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010>J\u001d\u0010?\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020@2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010AJ\u001d\u0010B\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020C2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010DJ\u001d\u0010E\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020F2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010GJ\u001d\u0010H\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020I2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010JJ\u001d\u0010K\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020L2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010MJ\u001d\u0010N\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020O2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010PJ\u001d\u0010Q\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020R2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010SJ\u001d\u0010T\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020U2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010VJ\u001d\u0010W\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020X2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010YJ\u001d\u0010Z\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020[2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010\\J\u001d\u0010]\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020^2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010_J\u001d\u0010`\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020a2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010bJ\u001d\u0010c\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020d2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010eJ\u001d\u0010f\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020g2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010hJ\u001d\u0010i\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020j2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010kJ\u001d\u0010l\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020m2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010nJ\u001d\u0010o\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020p2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010qJ\u001d\u0010r\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020s2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010tJ\u001d\u0010u\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020v2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010wJ\u001d\u0010x\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020y2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010zJ\u001d\u0010{\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020|2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0002\u0010}J\u001e\u0010~\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u007f2\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0080\u0001J \u0010\u0081\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0082\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0083\u0001J \u0010\u0084\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0085\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0086\u0001J \u0010\u0087\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0088\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0089\u0001J \u0010\u008a\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008b\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008c\u0001J \u0010\u008d\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008e\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008f\u0001J \u0010\u0090\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0091\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0092\u0001J \u0010\u0093\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0094\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0095\u0001J \u0010\u0096\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0097\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0098\u0001J \u0010\u0099\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009a\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009b\u0001J \u0010\u009c\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009d\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009e\u0001J \u0010\u009f\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a0\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a1\u0001J \u0010\u00a2\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a3\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a4\u0001J \u0010\u00a5\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a6\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a7\u0001J \u0010\u00a8\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a9\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00aa\u0001J \u0010\u00ab\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ac\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ad\u0001J \u0010\u00ae\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00af\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b0\u0001J \u0010\u00b1\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b2\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b3\u0001J \u0010\u00b4\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b5\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b6\u0001J \u0010\u00b7\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b8\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b9\u0001J \u0010\u00ba\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bb\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00bc\u0001J \u0010\u00bd\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00be\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00bf\u0001J \u0010\u00c0\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c1\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c2\u0001J \u0010\u00c3\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c4\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c5\u0001J \u0010\u00c6\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c7\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c8\u0001J \u0010\u00c9\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ca\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00cb\u0001J \u0010\u00cc\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00cd\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ce\u0001J \u0010\u00cf\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d0\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d1\u0001J \u0010\u00d2\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d3\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d4\u0001J \u0010\u00d5\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d6\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d7\u0001J \u0010\u00d8\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d9\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00da\u0001J \u0010\u00db\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00dc\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00dd\u0001J \u0010\u00de\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00df\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e0\u0001J \u0010\u00e1\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e2\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e3\u0001J \u0010\u00e4\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e5\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e6\u0001J \u0010\u00e7\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e8\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e9\u0001J \u0010\u00ea\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00eb\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ec\u0001J \u0010\u00ed\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ee\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ef\u0001J \u0010\u00f0\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f1\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f2\u0001J \u0010\u00f3\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f4\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f5\u0001J \u0010\u00f6\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f7\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f8\u0001J \u0010\u00f9\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fa\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00fb\u0001J \u0010\u00fc\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fd\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00fe\u0001J \u0010\u00ff\u0001\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0080\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0081\u0002J \u0010\u0082\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0083\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0084\u0002J \u0010\u0085\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0086\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0087\u0002J \u0010\u0088\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0089\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008a\u0002J \u0010\u008b\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008c\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008d\u0002J \u0010\u008e\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008f\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0090\u0002J \u0010\u0091\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0092\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0093\u0002J \u0010\u0094\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0095\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0096\u0002J \u0010\u0097\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0098\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0099\u0002J \u0010\u009a\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009b\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009c\u0002J \u0010\u009d\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009e\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009f\u0002J \u0010\u00a0\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a1\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a2\u0002J \u0010\u00a3\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a4\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a5\u0002J \u0010\u00a6\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a7\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a8\u0002J \u0010\u00a9\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00aa\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ab\u0002J \u0010\u00ac\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ad\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ae\u0002J \u0010\u00af\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b0\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b1\u0002J \u0010\u00b2\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b3\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b4\u0002J \u0010\u00b5\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b6\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b7\u0002J \u0010\u00b8\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b9\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ba\u0002J \u0010\u00bb\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bc\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00bd\u0002J \u0010\u00be\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bf\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c0\u0002J \u0010\u00c1\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c2\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c3\u0002J \u0010\u00c4\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c5\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c6\u0002J \u0010\u00c7\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c8\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00c9\u0002J \u0010\u00ca\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00cb\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00cc\u0002J \u0010\u00cd\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ce\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00cf\u0002J \u0010\u00d0\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d1\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d2\u0002J \u0010\u00d3\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d4\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d5\u0002J \u0010\u00d6\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d7\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00d8\u0002J \u0010\u00d9\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00da\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00db\u0002J \u0010\u00dc\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00dd\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00de\u0002J \u0010\u00df\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e0\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e1\u0002J \u0010\u00e2\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e3\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e4\u0002J \u0010\u00e5\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e6\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00e7\u0002J \u0010\u00e8\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e9\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ea\u0002J \u0010\u00eb\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ec\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ed\u0002J \u0010\u00ee\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ef\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f0\u0002J \u0010\u00f1\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f2\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f3\u0002J \u0010\u00f4\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f5\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f6\u0002J \u0010\u00f7\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f8\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00f9\u0002J \u0010\u00fa\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fb\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00fc\u0002J \u0010\u00fd\u0002\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fe\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ff\u0002J \u0010\u0080\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0081\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0082\u0003J \u0010\u0083\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0084\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0085\u0003J \u0010\u0086\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0087\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0088\u0003J \u0010\u0089\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008a\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008b\u0003J \u0010\u008c\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008d\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u008e\u0003J \u0010\u008f\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0090\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0091\u0003J \u0010\u0092\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0093\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0094\u0003J \u0010\u0095\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0096\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u0097\u0003J \u0010\u0098\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0099\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009a\u0003J \u0010\u009b\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009c\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u009d\u0003J \u0010\u009e\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009f\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a0\u0003J \u0010\u00a1\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a2\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a3\u0003J \u0010\u00a4\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a5\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a6\u0003J \u0010\u00a7\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a8\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00a9\u0003J \u0010\u00aa\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ab\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00ac\u0003J \u0010\u00ad\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ae\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00af\u0003J \u0010\u00b0\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b1\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b2\u0003J \u0010\u00b3\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b4\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b5\u0003J \u0010\u00b6\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b7\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00b8\u0003J \u0010\u00b9\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ba\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0014\u00a2\u0006\u0003\u0010\u00bb\u0003J\u001e\u0010\u00bc\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\bJ\u001e\u0010\u00bd\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\n2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u000bJ\u001e\u0010\u00be\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\r2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u000eJ\u001e\u0010\u00bf\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00102\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u0011J\u001e\u0010\u00c0\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00132\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u0014J\u001e\u0010\u00c1\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00162\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u0017J\u001e\u0010\u00c2\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u00192\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u001aJ\u001e\u0010\u00c3\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u001c2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\u001dJ\u001e\u0010\u00c4\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u001f2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010 J\u001e\u0010\u00c5\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\"2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010#J\u001e\u0010\u00c6\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020%2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010&J\u001e\u0010\u00c7\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020(2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010)J\u001e\u0010\u00c8\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020+2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010,J\u001e\u0010\u00c9\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020.2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010/J\u001e\u0010\u00ca\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u00102J\u001e\u0010\u00cb\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002042\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u00105J\u001e\u0010\u00cc\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u0002072\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u00108J\u001e\u0010\u00cd\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020:2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010;J\u001e\u0010\u00ce\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020=2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010>J\u001e\u0010\u00cf\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020@2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010AJ\u001e\u0010\u00d0\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020C2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010DJ\u001e\u0010\u00d1\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020F2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010GJ\u001e\u0010\u00d2\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020I2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010JJ\u001e\u0010\u00d3\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020L2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010MJ\u001e\u0010\u00d4\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020O2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010PJ\u001e\u0010\u00d5\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020R2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010SJ\u001e\u0010\u00d6\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020U2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010VJ\u001e\u0010\u00d7\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020X2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010YJ\u001e\u0010\u00d8\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020[2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010\\J\u001e\u0010\u00d9\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020^2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010_J\u001e\u0010\u00da\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020a2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010bJ\u001e\u0010\u00db\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020d2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010eJ\u001e\u0010\u00dc\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020g2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010hJ\u001e\u0010\u00dd\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020j2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010kJ\u001e\u0010\u00de\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020m2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010nJ\u001e\u0010\u00df\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020p2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010qJ\u001e\u0010\u00e0\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020s2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010tJ\u001e\u0010\u00e1\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020v2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010wJ\u001e\u0010\u00e2\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020y2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010zJ\u001e\u0010\u00e3\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020|2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0002\u0010}J\u001f\u0010\u00e4\u0003\u001a\u00028\u00002\u0006\u0010\u0005\u001a\u00020\u007f2\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0080\u0001J \u0010\u00e5\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0082\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0083\u0001J \u0010\u00e6\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0085\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0086\u0001J \u0010\u00e7\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0088\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0089\u0001J \u0010\u00e8\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008b\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008c\u0001J \u0010\u00e9\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008e\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008f\u0001J \u0010\u00ea\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0091\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0092\u0001J \u0010\u00eb\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0094\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0095\u0001J \u0010\u00ec\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0097\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0098\u0001J \u0010\u00ed\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009a\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009b\u0001J \u0010\u00ee\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009d\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009e\u0001J \u0010\u00ef\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a0\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a1\u0001J \u0010\u00f0\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a3\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a4\u0001J \u0010\u00f1\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a6\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a7\u0001J \u0010\u00f2\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a9\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00aa\u0001J \u0010\u00f3\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ac\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ad\u0001J \u0010\u00f4\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00af\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b0\u0001J \u0010\u00f5\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b2\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b3\u0001J \u0010\u00f6\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b5\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b6\u0001J \u0010\u00f7\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b8\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b9\u0001J \u0010\u00f8\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bb\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00bc\u0001J \u0010\u00f9\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00be\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00bf\u0001J \u0010\u00fa\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c1\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c2\u0001J \u0010\u00fb\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c4\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c5\u0001J \u0010\u00fc\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c7\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c8\u0001J \u0010\u00fd\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ca\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00cb\u0001J \u0010\u00fe\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00cd\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ce\u0001J \u0010\u00ff\u0003\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d0\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d1\u0001J \u0010\u0080\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d3\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d4\u0001J \u0010\u0081\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d6\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d7\u0001J \u0010\u0082\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d9\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00da\u0001J \u0010\u0083\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00dc\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00dd\u0001J \u0010\u0084\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00df\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e0\u0001J \u0010\u0085\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e2\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e3\u0001J \u0010\u0086\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e5\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e6\u0001J \u0010\u0087\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e8\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e9\u0001J \u0010\u0088\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00eb\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ec\u0001J \u0010\u0089\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ee\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ef\u0001J \u0010\u008a\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f1\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f2\u0001J \u0010\u008b\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f4\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f5\u0001J \u0010\u008c\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f7\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f8\u0001J \u0010\u008d\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fa\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00fb\u0001J \u0010\u008e\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fd\u00012\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00fe\u0001J \u0010\u008f\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0080\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0081\u0002J \u0010\u0090\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0083\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0084\u0002J \u0010\u0091\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0086\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0087\u0002J \u0010\u0092\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0089\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008a\u0002J \u0010\u0093\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008c\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008d\u0002J \u0010\u0094\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008f\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0090\u0002J \u0010\u0095\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0092\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0093\u0002J \u0010\u0096\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0095\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0096\u0002J \u0010\u0097\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0098\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0099\u0002J \u0010\u0098\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009b\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009c\u0002J \u0010\u0099\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009e\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009f\u0002J \u0010\u009a\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a1\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a2\u0002J \u0010\u009b\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a4\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a5\u0002J \u0010\u009c\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a7\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a8\u0002J \u0010\u009d\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00aa\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ab\u0002J \u0010\u009e\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ad\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ae\u0002J \u0010\u009f\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b0\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b1\u0002J \u0010\u00a0\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b3\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b4\u0002J \u0010\u00a1\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b6\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b7\u0002J \u0010\u00a2\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b9\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ba\u0002J \u0010\u00a3\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bc\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00bd\u0002J \u0010\u00a4\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00bf\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c0\u0002J \u0010\u00a5\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c2\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c3\u0002J \u0010\u00a6\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c5\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c6\u0002J \u0010\u00a7\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00c8\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00c9\u0002J \u0010\u00a8\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00cb\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00cc\u0002J \u0010\u00a9\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ce\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00cf\u0002J \u0010\u00aa\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d1\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d2\u0002J \u0010\u00ab\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d4\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d5\u0002J \u0010\u00ac\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00d7\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00d8\u0002J \u0010\u00ad\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00da\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00db\u0002J \u0010\u00ae\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00dd\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00de\u0002J \u0010\u00af\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e0\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e1\u0002J \u0010\u00b0\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e3\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e4\u0002J \u0010\u00b1\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e6\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00e7\u0002J \u0010\u00b2\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00e9\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ea\u0002J \u0010\u00b3\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ec\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ed\u0002J \u0010\u00b4\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ef\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f0\u0002J \u0010\u00b5\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f2\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f3\u0002J \u0010\u00b6\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f5\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f6\u0002J \u0010\u00b7\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00f8\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00f9\u0002J \u0010\u00b8\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fb\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00fc\u0002J \u0010\u00b9\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00fe\u00022\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ff\u0002J \u0010\u00ba\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0081\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0082\u0003J \u0010\u00bb\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0084\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0085\u0003J \u0010\u00bc\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0087\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0088\u0003J \u0010\u00bd\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008a\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008b\u0003J \u0010\u00be\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u008d\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u008e\u0003J \u0010\u00bf\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0090\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0091\u0003J \u0010\u00c0\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0093\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0094\u0003J \u0010\u00c1\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0096\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u0097\u0003J \u0010\u00c2\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u0099\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009a\u0003J \u0010\u00c3\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009c\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u009d\u0003J \u0010\u00c4\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u009f\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a0\u0003J \u0010\u00c5\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a2\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a3\u0003J \u0010\u00c6\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a5\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a6\u0003J \u0010\u00c7\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00a8\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00a9\u0003J \u0010\u00c8\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ab\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00ac\u0003J \u0010\u00c9\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ae\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00af\u0003J \u0010\u00ca\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b1\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b2\u0003J \u0010\u00cb\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b4\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b5\u0003J \u0010\u00cc\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00b7\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00b8\u0003J \u0010\u00cd\u0004\u001a\u00028\u00002\u0007\u0010\u0005\u001a\u00030\u00ba\u00032\u0006\u0010\u0007\u001a\u00028\u0000H\u0016\u00a2\u0006\u0003\u0010\u00bb\u0003\u00a8\u0006\u00ce\u0004"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$VisitorFold;", "T", "Lorg/partiql/pig/runtime/DomainVisitorFoldBase;", "()V", "visitAssignment", "node", "Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "accumulator", "(Lorg/partiql/lang/domains/PartiqlAst$Assignment;Ljava/lang/Object;)Ljava/lang/Object;", "visitCaseSensitivity", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;Ljava/lang/Object;)Ljava/lang/Object;", "visitCaseSensitivityCaseInsensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;Ljava/lang/Object;)Ljava/lang/Object;", "visitCaseSensitivityCaseSensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "(Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;Ljava/lang/Object;)Ljava/lang/Object;", "visitColumnComponent", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;Ljava/lang/Object;)Ljava/lang/Object;", "visitColumnComponentReturningColumn", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;Ljava/lang/Object;)Ljava/lang/Object;", "visitColumnComponentReturningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "(Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;Ljava/lang/Object;)Ljava/lang/Object;", "visitConflictAction", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "(Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;Ljava/lang/Object;)Ljava/lang/Object;", "visitConflictActionDoNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "(Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;Ljava/lang/Object;)Ljava/lang/Object;", "visitDdlOp", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp;Ljava/lang/Object;)Ljava/lang/Object;", "visitDdlOpCreateIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;Ljava/lang/Object;)Ljava/lang/Object;", "visitDdlOpCreateTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;Ljava/lang/Object;)Ljava/lang/Object;", "visitDdlOpDropIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;Ljava/lang/Object;)Ljava/lang/Object;", "visitDdlOpDropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "(Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOp", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpDelete", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpInsert", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpInsertValue", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpList", "Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpRemove", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;Ljava/lang/Object;)Ljava/lang/Object;", "visitDmlOpSet", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "(Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;Ljava/lang/Object;)Ljava/lang/Object;", "visitExpr", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprAnd", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$And;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprBag", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprBetween", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprCall", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprCallAgg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprCast", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprConcat", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprDate", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprDivide", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprEq", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprExcept", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprGt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprGte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprId", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprInCollection", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprIntersect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprIsType", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprLike", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprList", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$List;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprLit", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprLitTime", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprLt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprLte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprMinus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprMissing", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprModulo", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprNe", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprNeg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprNot", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprOr", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprPair", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "(Lorg/partiql/lang/domains/PartiqlAst$ExprPair;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprPairList", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "(Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprParameter", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprPath", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprPlus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprPos", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprSearchedCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprSelect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprSexp", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprSimpleCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprStruct", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprTimes", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;Ljava/lang/Object;)Ljava/lang/Object;", "visitExprUnion", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "(Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;Ljava/lang/Object;)Ljava/lang/Object;", "visitFromSource", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource;Ljava/lang/Object;)Ljava/lang/Object;", "visitFromSourceJoin", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;Ljava/lang/Object;)Ljava/lang/Object;", "visitFromSourceScan", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;Ljava/lang/Object;)Ljava/lang/Object;", "visitFromSourceUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "(Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupBy", "Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupBy;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupKey", "Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupKey;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupKeyList", "Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupingStrategy", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupingStrategyGroupFull", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;Ljava/lang/Object;)Ljava/lang/Object;", "visitGroupingStrategyGroupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "(Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;Ljava/lang/Object;)Ljava/lang/Object;", "visitIdentifier", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "(Lorg/partiql/lang/domains/PartiqlAst$Identifier;Ljava/lang/Object;)Ljava/lang/Object;", "visitJoinType", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType;Ljava/lang/Object;)Ljava/lang/Object;", "visitJoinTypeFull", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;Ljava/lang/Object;)Ljava/lang/Object;", "visitJoinTypeInner", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;Ljava/lang/Object;)Ljava/lang/Object;", "visitJoinTypeLeft", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;Ljava/lang/Object;)Ljava/lang/Object;", "visitJoinTypeRight", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "(Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;Ljava/lang/Object;)Ljava/lang/Object;", "visitLet", "Lorg/partiql/lang/domains/PartiqlAst$Let;", "(Lorg/partiql/lang/domains/PartiqlAst$Let;Ljava/lang/Object;)Ljava/lang/Object;", "visitLetBinding", "Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "(Lorg/partiql/lang/domains/PartiqlAst$LetBinding;Ljava/lang/Object;)Ljava/lang/Object;", "visitOnConflict", "Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "(Lorg/partiql/lang/domains/PartiqlAst$OnConflict;Ljava/lang/Object;)Ljava/lang/Object;", "visitOrderBy", "Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderBy;Ljava/lang/Object;)Ljava/lang/Object;", "visitOrderingSpec", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;Ljava/lang/Object;)Ljava/lang/Object;", "visitOrderingSpecAsc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;Ljava/lang/Object;)Ljava/lang/Object;", "visitOrderingSpecDesc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "(Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;Ljava/lang/Object;)Ljava/lang/Object;", "visitPathStep", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep;Ljava/lang/Object;)Ljava/lang/Object;", "visitPathStepPathExpr", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;Ljava/lang/Object;)Ljava/lang/Object;", "visitPathStepPathUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;Ljava/lang/Object;)Ljava/lang/Object;", "visitPathStepPathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "(Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectItem", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectItemProjectAll", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectItemProjectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "(Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjection", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectionProjectList", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectionProjectPivot", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectionProjectStar", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;Ljava/lang/Object;)Ljava/lang/Object;", "visitProjectionProjectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "(Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningElem", "Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningExpr", "Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningMapping", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningMappingAllNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningMappingAllOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningMappingModifiedNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;Ljava/lang/Object;)Ljava/lang/Object;", "visitReturningMappingModifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "(Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;Ljava/lang/Object;)Ljava/lang/Object;", "visitScopeQualifier", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;Ljava/lang/Object;)Ljava/lang/Object;", "visitScopeQualifierLocalsFirst", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;Ljava/lang/Object;)Ljava/lang/Object;", "visitScopeQualifierUnqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "(Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;Ljava/lang/Object;)Ljava/lang/Object;", "visitSetQuantifier", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;Ljava/lang/Object;)Ljava/lang/Object;", "visitSetQuantifierAll", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;Ljava/lang/Object;)Ljava/lang/Object;", "visitSetQuantifierDistinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "(Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;Ljava/lang/Object;)Ljava/lang/Object;", "visitSortSpec", "Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "(Lorg/partiql/lang/domains/PartiqlAst$SortSpec;Ljava/lang/Object;)Ljava/lang/Object;", "visitStatement", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement;Ljava/lang/Object;)Ljava/lang/Object;", "visitStatementDdl", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;Ljava/lang/Object;)Ljava/lang/Object;", "visitStatementDml", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;Ljava/lang/Object;)Ljava/lang/Object;", "visitStatementExec", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;Ljava/lang/Object;)Ljava/lang/Object;", "visitStatementQuery", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "(Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;Ljava/lang/Object;)Ljava/lang/Object;", "visitTimeValue", "Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "(Lorg/partiql/lang/domains/PartiqlAst$TimeValue;Ljava/lang/Object;)Ljava/lang/Object;", "visitType", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "(Lorg/partiql/lang/domains/PartiqlAst$Type;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeBagType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeBlobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeBooleanType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeCharacterType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeCharacterVaryingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeClobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeDateType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeDecimalType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeDoublePrecisionType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeFloatType", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeIntegerType", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeListType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeMissingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeNullType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeNumericType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeRealType", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeSexpType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeSmallintType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeStringType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeStructType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeSymbolType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeTimeType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeTimeWithTimeZoneType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeTimestampType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;Ljava/lang/Object;)Ljava/lang/Object;", "visitTypeTupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "(Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;Ljava/lang/Object;)Ljava/lang/Object;", "walkAssignment", "walkCaseSensitivity", "walkCaseSensitivityCaseInsensitive", "walkCaseSensitivityCaseSensitive", "walkColumnComponent", "walkColumnComponentReturningColumn", "walkColumnComponentReturningWildcard", "walkConflictAction", "walkConflictActionDoNothing", "walkDdlOp", "walkDdlOpCreateIndex", "walkDdlOpCreateTable", "walkDdlOpDropIndex", "walkDdlOpDropTable", "walkDmlOp", "walkDmlOpDelete", "walkDmlOpInsert", "walkDmlOpInsertValue", "walkDmlOpList", "walkDmlOpRemove", "walkDmlOpSet", "walkExpr", "walkExprAnd", "walkExprBag", "walkExprBetween", "walkExprCall", "walkExprCallAgg", "walkExprCast", "walkExprConcat", "walkExprDate", "walkExprDivide", "walkExprEq", "walkExprExcept", "walkExprGt", "walkExprGte", "walkExprId", "walkExprInCollection", "walkExprIntersect", "walkExprIsType", "walkExprLike", "walkExprList", "walkExprLit", "walkExprLitTime", "walkExprLt", "walkExprLte", "walkExprMinus", "walkExprMissing", "walkExprModulo", "walkExprNe", "walkExprNeg", "walkExprNot", "walkExprOr", "walkExprPair", "walkExprPairList", "walkExprParameter", "walkExprPath", "walkExprPlus", "walkExprPos", "walkExprSearchedCase", "walkExprSelect", "walkExprSexp", "walkExprSimpleCase", "walkExprStruct", "walkExprTimes", "walkExprUnion", "walkFromSource", "walkFromSourceJoin", "walkFromSourceScan", "walkFromSourceUnpivot", "walkGroupBy", "walkGroupKey", "walkGroupKeyList", "walkGroupingStrategy", "walkGroupingStrategyGroupFull", "walkGroupingStrategyGroupPartial", "walkIdentifier", "walkJoinType", "walkJoinTypeFull", "walkJoinTypeInner", "walkJoinTypeLeft", "walkJoinTypeRight", "walkLet", "walkLetBinding", "walkOnConflict", "walkOrderBy", "walkOrderingSpec", "walkOrderingSpecAsc", "walkOrderingSpecDesc", "walkPathStep", "walkPathStepPathExpr", "walkPathStepPathUnpivot", "walkPathStepPathWildcard", "walkProjectItem", "walkProjectItemProjectAll", "walkProjectItemProjectExpr", "walkProjection", "walkProjectionProjectList", "walkProjectionProjectPivot", "walkProjectionProjectStar", "walkProjectionProjectValue", "walkReturningElem", "walkReturningExpr", "walkReturningMapping", "walkReturningMappingAllNew", "walkReturningMappingAllOld", "walkReturningMappingModifiedNew", "walkReturningMappingModifiedOld", "walkScopeQualifier", "walkScopeQualifierLocalsFirst", "walkScopeQualifierUnqualified", "walkSetQuantifier", "walkSetQuantifierAll", "walkSetQuantifierDistinct", "walkSortSpec", "walkStatement", "walkStatementDdl", "walkStatementDml", "walkStatementExec", "walkStatementQuery", "walkTimeValue", "walkType", "walkTypeBagType", "walkTypeBlobType", "walkTypeBooleanType", "walkTypeCharacterType", "walkTypeCharacterVaryingType", "walkTypeClobType", "walkTypeDateType", "walkTypeDecimalType", "walkTypeDoublePrecisionType", "walkTypeFloatType", "walkTypeIntegerType", "walkTypeListType", "walkTypeMissingType", "walkTypeNullType", "walkTypeNumericType", "walkTypeRealType", "walkTypeSexpType", "walkTypeSmallintType", "walkTypeStringType", "walkTypeStructType", "walkTypeSymbolType", "walkTypeTimeType", "walkTypeTimeWithTimeZoneType", "walkTypeTimestampType", "walkTypeTupleType", "lang"})
    public static class VisitorFold<T>
    extends DomainVisitorFoldBase<T> {
        protected T visitTimeValue(@NotNull TimeValue node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitLet(@NotNull Let node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitLetBinding(@NotNull LetBinding node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprPair(@NotNull ExprPair node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprPairList(@NotNull ExprPairList node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupBy(@NotNull GroupBy node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupKeyList(@NotNull GroupKeyList node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupKey(@NotNull GroupKey node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitOrderBy(@NotNull OrderBy node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitSortSpec(@NotNull SortSpec node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpList(@NotNull DmlOpList node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitOnConflict(@NotNull OnConflict node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningExpr(@NotNull ReturningExpr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningElem(@NotNull ReturningElem node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitIdentifier(@NotNull Identifier node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitAssignment(@NotNull Assignment node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitStatement(@NotNull Statement node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitStatementQuery(@NotNull Statement.Query node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitStatementDml(@NotNull Statement.Dml node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitStatementDdl(@NotNull Statement.Ddl node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitStatementExec(@NotNull Statement.Exec node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExpr(@NotNull Expr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprMissing(@NotNull Expr.Missing node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprLit(@NotNull Expr.Lit node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprId(@NotNull Expr.Id node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprParameter(@NotNull Expr.Parameter node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprNot(@NotNull Expr.Not node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprPos(@NotNull Expr.Pos node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprNeg(@NotNull Expr.Neg node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprPlus(@NotNull Expr.Plus node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprMinus(@NotNull Expr.Minus node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprTimes(@NotNull Expr.Times node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprDivide(@NotNull Expr.Divide node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprModulo(@NotNull Expr.Modulo node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprConcat(@NotNull Expr.Concat node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprAnd(@NotNull Expr.And node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprOr(@NotNull Expr.Or node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprEq(@NotNull Expr.Eq node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprNe(@NotNull Expr.Ne node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprGt(@NotNull Expr.Gt node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprGte(@NotNull Expr.Gte node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprLt(@NotNull Expr.Lt node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprLte(@NotNull Expr.Lte node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprLike(@NotNull Expr.Like node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprBetween(@NotNull Expr.Between node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprInCollection(@NotNull Expr.InCollection node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprIsType(@NotNull Expr.IsType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprSimpleCase(@NotNull Expr.SimpleCase node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprSearchedCase(@NotNull Expr.SearchedCase node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprStruct(@NotNull Expr.Struct node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprBag(@NotNull Expr.Bag node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprList(@NotNull Expr.List node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprSexp(@NotNull Expr.Sexp node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprDate(@NotNull Expr.Date node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprLitTime(@NotNull Expr.LitTime node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprUnion(@NotNull Expr.Union node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprExcept(@NotNull Expr.Except node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprIntersect(@NotNull Expr.Intersect node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprPath(@NotNull Expr.Path node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprCall(@NotNull Expr.Call node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprCallAgg(@NotNull Expr.CallAgg node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprCast(@NotNull Expr.Cast node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitExprSelect(@NotNull Expr.Select node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitPathStep(@NotNull PathStep node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitPathStepPathExpr(@NotNull PathStep.PathExpr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitPathStepPathWildcard(@NotNull PathStep.PathWildcard node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitPathStepPathUnpivot(@NotNull PathStep.PathUnpivot node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjection(@NotNull Projection node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectionProjectStar(@NotNull Projection.ProjectStar node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectionProjectList(@NotNull Projection.ProjectList node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectionProjectPivot(@NotNull Projection.ProjectPivot node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectionProjectValue(@NotNull Projection.ProjectValue node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectItem(@NotNull ProjectItem node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectItemProjectAll(@NotNull ProjectItem.ProjectAll node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitProjectItemProjectExpr(@NotNull ProjectItem.ProjectExpr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitFromSource(@NotNull FromSource node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitFromSourceScan(@NotNull FromSource.Scan node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitFromSourceUnpivot(@NotNull FromSource.Unpivot node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitFromSourceJoin(@NotNull FromSource.Join node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitJoinType(@NotNull JoinType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitJoinTypeInner(@NotNull JoinType.Inner node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitJoinTypeLeft(@NotNull JoinType.Left node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitJoinTypeRight(@NotNull JoinType.Right node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitJoinTypeFull(@NotNull JoinType.Full node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupingStrategy(@NotNull GroupingStrategy node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupingStrategyGroupFull(@NotNull GroupingStrategy.GroupFull node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitGroupingStrategyGroupPartial(@NotNull GroupingStrategy.GroupPartial node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitOrderingSpec(@NotNull OrderingSpec node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitOrderingSpecAsc(@NotNull OrderingSpec.Asc node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitOrderingSpecDesc(@NotNull OrderingSpec.Desc node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitCaseSensitivity(@NotNull CaseSensitivity node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitCaseSensitivityCaseSensitive(@NotNull CaseSensitivity.CaseSensitive node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitCaseSensitivityCaseInsensitive(@NotNull CaseSensitivity.CaseInsensitive node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitScopeQualifier(@NotNull ScopeQualifier node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitScopeQualifierUnqualified(@NotNull ScopeQualifier.Unqualified node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitScopeQualifierLocalsFirst(@NotNull ScopeQualifier.LocalsFirst node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitSetQuantifier(@NotNull SetQuantifier node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitSetQuantifierAll(@NotNull SetQuantifier.All node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitSetQuantifierDistinct(@NotNull SetQuantifier.Distinct node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOp(@NotNull DmlOp node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpInsert(@NotNull DmlOp.Insert node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpInsertValue(@NotNull DmlOp.InsertValue node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpSet(@NotNull DmlOp.Set node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpRemove(@NotNull DmlOp.Remove node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDmlOpDelete(@NotNull DmlOp.Delete node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitConflictAction(@NotNull ConflictAction node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitConflictActionDoNothing(@NotNull ConflictAction.DoNothing node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDdlOp(@NotNull DdlOp node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDdlOpCreateTable(@NotNull DdlOp.CreateTable node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDdlOpDropTable(@NotNull DdlOp.DropTable node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDdlOpCreateIndex(@NotNull DdlOp.CreateIndex node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitDdlOpDropIndex(@NotNull DdlOp.DropIndex node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitColumnComponent(@NotNull ColumnComponent node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitColumnComponentReturningWildcard(@NotNull ColumnComponent.ReturningWildcard node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitColumnComponentReturningColumn(@NotNull ColumnComponent.ReturningColumn node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningMapping(@NotNull ReturningMapping node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningMappingModifiedNew(@NotNull ReturningMapping.ModifiedNew node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningMappingModifiedOld(@NotNull ReturningMapping.ModifiedOld node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningMappingAllNew(@NotNull ReturningMapping.AllNew node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitReturningMappingAllOld(@NotNull ReturningMapping.AllOld node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitType(@NotNull Type node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeNullType(@NotNull Type.NullType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeBooleanType(@NotNull Type.BooleanType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeSmallintType(@NotNull Type.SmallintType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeIntegerType(@NotNull Type.IntegerType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeFloatType(@NotNull Type.FloatType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeRealType(@NotNull Type.RealType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeDoublePrecisionType(@NotNull Type.DoublePrecisionType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeDecimalType(@NotNull Type.DecimalType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeNumericType(@NotNull Type.NumericType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeTimestampType(@NotNull Type.TimestampType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeCharacterType(@NotNull Type.CharacterType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeCharacterVaryingType(@NotNull Type.CharacterVaryingType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeMissingType(@NotNull Type.MissingType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeStringType(@NotNull Type.StringType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeSymbolType(@NotNull Type.SymbolType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeBlobType(@NotNull Type.BlobType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeClobType(@NotNull Type.ClobType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeDateType(@NotNull Type.DateType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeTimeType(@NotNull Type.TimeType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeTimeWithTimeZoneType(@NotNull Type.TimeWithTimeZoneType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeStructType(@NotNull Type.StructType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeTupleType(@NotNull Type.TupleType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeListType(@NotNull Type.ListType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeSexpType(@NotNull Type.SexpType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        protected T visitTypeBagType(@NotNull Type.BagType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return accumulator;
        }

        public T walkTimeValue(@NotNull TimeValue node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTimeValue(node, current);
            current = this.walkLongPrimitive(node.getHour(), current);
            current = this.walkLongPrimitive(node.getMinute(), current);
            current = this.walkLongPrimitive(node.getSecond(), current);
            current = this.walkLongPrimitive(node.getNano(), current);
            current = this.walkLongPrimitive(node.getPrecision(), current);
            LongPrimitive longPrimitive = node.getTzMinutes();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkLet(@NotNull Let node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitLet(node, current);
            Iterable $this$map$iv = node.getLetBindings();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                LetBinding letBinding = (LetBinding)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkLetBinding((LetBinding)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkLetBinding(@NotNull LetBinding node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitLetBinding(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkSymbolPrimitive(node.getName(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprPair(@NotNull ExprPair node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprPair(node, current);
            current = this.walkExpr(node.getFirst(), current);
            current = this.walkExpr(node.getSecond(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprPairList(@NotNull ExprPairList node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprPairList(node, current);
            Iterable $this$map$iv = node.getPairs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExprPair((ExprPair)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkGroupBy(@NotNull GroupBy node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitGroupBy(node, current);
            current = this.walkGroupingStrategy(node.getStrategy(), current);
            current = this.walkGroupKeyList(node.getKeyList(), current);
            SymbolPrimitive symbolPrimitive = node.getGroupAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkGroupKeyList(@NotNull GroupKeyList node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitGroupKeyList(node, current);
            Iterable $this$map$iv = node.getKeys();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                GroupKey groupKey = (GroupKey)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkGroupKey((GroupKey)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkGroupKey(@NotNull GroupKey node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitGroupKey(node, current);
            current = this.walkExpr(node.getExpr(), current);
            SymbolPrimitive symbolPrimitive = node.getAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkOrderBy(@NotNull OrderBy node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitOrderBy(node, current);
            Iterable $this$map$iv = node.getSortSpecs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                SortSpec sortSpec = (SortSpec)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkSortSpec((SortSpec)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkSortSpec(@NotNull SortSpec node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitSortSpec(node, current);
            current = this.walkExpr(node.getExpr(), current);
            OrderingSpec orderingSpec = node.getOrderingSpec();
            if (orderingSpec != null) {
                OrderingSpec orderingSpec2 = orderingSpec;
                boolean bl = false;
                boolean bl2 = false;
                OrderingSpec it = orderingSpec2;
                boolean bl3 = false;
                current = this.walkOrderingSpec(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkDmlOpList(@NotNull DmlOpList node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpList(node, current);
            Iterable $this$map$iv = node.getOps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                DmlOp dmlOp = (DmlOp)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkDmlOp((DmlOp)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkOnConflict(@NotNull OnConflict node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitOnConflict(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkConflictAction(node.getConflictAction(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkReturningExpr(@NotNull ReturningExpr node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningExpr(node, current);
            Iterable $this$map$iv = node.getElems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ReturningElem returningElem = (ReturningElem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkReturningElem((ReturningElem)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkReturningElem(@NotNull ReturningElem node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningElem(node, current);
            current = this.walkReturningMapping(node.getMapping(), current);
            current = this.walkColumnComponent(node.getColumn(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkIdentifier(@NotNull Identifier node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitIdentifier(node, current);
            current = this.walkSymbolPrimitive(node.getName(), current);
            current = this.walkCaseSensitivity(node.getCase(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkAssignment(@NotNull Assignment node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitAssignment(node, current);
            current = this.walkExpr(node.getTarget(), current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkStatement(@NotNull Statement node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitStatement(node, accumulator);
            Statement statement = node;
            if (statement instanceof Statement.Query) {
                t = this.walkStatementQuery((Statement.Query)node, current);
            } else if (statement instanceof Statement.Dml) {
                t = this.walkStatementDml((Statement.Dml)node, current);
            } else if (statement instanceof Statement.Ddl) {
                t = this.walkStatementDdl((Statement.Ddl)node, current);
            } else if (statement instanceof Statement.Exec) {
                t = this.walkStatementExec((Statement.Exec)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkStatementQuery(@NotNull Statement.Query node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitStatementQuery(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkStatementDml(@NotNull Statement.Dml node, T accumulator) {
            FromSource it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitStatementDml(node, current);
            current = this.walkDmlOpList(node.getOperations(), current);
            FromSource fromSource = node.getFrom();
            if (fromSource != null) {
                partiqlAstNode = fromSource;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                current = this.walkFromSource(it, current);
            }
            Expr expr = node.getWhere();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                current = this.walkExpr((Expr)((Object)it), current);
            }
            ReturningExpr returningExpr = node.getReturning();
            if (returningExpr != null) {
                partiqlAstNode = returningExpr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl5 = false;
                current = this.walkReturningExpr((ReturningExpr)((Object)it), current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkStatementDdl(@NotNull Statement.Ddl node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitStatementDdl(node, current);
            current = this.walkDdlOp(node.getOp(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkStatementExec(@NotNull Statement.Exec node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitStatementExec(node, current);
            current = this.walkSymbolPrimitive(node.getProcedureName(), current);
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExpr(@NotNull Expr node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitExpr(node, accumulator);
            Expr expr = node;
            if (expr instanceof Expr.Missing) {
                t = this.walkExprMissing((Expr.Missing)node, current);
            } else if (expr instanceof Expr.Lit) {
                t = this.walkExprLit((Expr.Lit)node, current);
            } else if (expr instanceof Expr.Id) {
                t = this.walkExprId((Expr.Id)node, current);
            } else if (expr instanceof Expr.Parameter) {
                t = this.walkExprParameter((Expr.Parameter)node, current);
            } else if (expr instanceof Expr.Not) {
                t = this.walkExprNot((Expr.Not)node, current);
            } else if (expr instanceof Expr.Pos) {
                t = this.walkExprPos((Expr.Pos)node, current);
            } else if (expr instanceof Expr.Neg) {
                t = this.walkExprNeg((Expr.Neg)node, current);
            } else if (expr instanceof Expr.Plus) {
                t = this.walkExprPlus((Expr.Plus)node, current);
            } else if (expr instanceof Expr.Minus) {
                t = this.walkExprMinus((Expr.Minus)node, current);
            } else if (expr instanceof Expr.Times) {
                t = this.walkExprTimes((Expr.Times)node, current);
            } else if (expr instanceof Expr.Divide) {
                t = this.walkExprDivide((Expr.Divide)node, current);
            } else if (expr instanceof Expr.Modulo) {
                t = this.walkExprModulo((Expr.Modulo)node, current);
            } else if (expr instanceof Expr.Concat) {
                t = this.walkExprConcat((Expr.Concat)node, current);
            } else if (expr instanceof Expr.And) {
                t = this.walkExprAnd((Expr.And)node, current);
            } else if (expr instanceof Expr.Or) {
                t = this.walkExprOr((Expr.Or)node, current);
            } else if (expr instanceof Expr.Eq) {
                t = this.walkExprEq((Expr.Eq)node, current);
            } else if (expr instanceof Expr.Ne) {
                t = this.walkExprNe((Expr.Ne)node, current);
            } else if (expr instanceof Expr.Gt) {
                t = this.walkExprGt((Expr.Gt)node, current);
            } else if (expr instanceof Expr.Gte) {
                t = this.walkExprGte((Expr.Gte)node, current);
            } else if (expr instanceof Expr.Lt) {
                t = this.walkExprLt((Expr.Lt)node, current);
            } else if (expr instanceof Expr.Lte) {
                t = this.walkExprLte((Expr.Lte)node, current);
            } else if (expr instanceof Expr.Like) {
                t = this.walkExprLike((Expr.Like)node, current);
            } else if (expr instanceof Expr.Between) {
                t = this.walkExprBetween((Expr.Between)node, current);
            } else if (expr instanceof Expr.InCollection) {
                t = this.walkExprInCollection((Expr.InCollection)node, current);
            } else if (expr instanceof Expr.IsType) {
                t = this.walkExprIsType((Expr.IsType)node, current);
            } else if (expr instanceof Expr.SimpleCase) {
                t = this.walkExprSimpleCase((Expr.SimpleCase)node, current);
            } else if (expr instanceof Expr.SearchedCase) {
                t = this.walkExprSearchedCase((Expr.SearchedCase)node, current);
            } else if (expr instanceof Expr.Struct) {
                t = this.walkExprStruct((Expr.Struct)node, current);
            } else if (expr instanceof Expr.Bag) {
                t = this.walkExprBag((Expr.Bag)node, current);
            } else if (expr instanceof Expr.List) {
                t = this.walkExprList((Expr.List)node, current);
            } else if (expr instanceof Expr.Sexp) {
                t = this.walkExprSexp((Expr.Sexp)node, current);
            } else if (expr instanceof Expr.Date) {
                t = this.walkExprDate((Expr.Date)node, current);
            } else if (expr instanceof Expr.LitTime) {
                t = this.walkExprLitTime((Expr.LitTime)node, current);
            } else if (expr instanceof Expr.Union) {
                t = this.walkExprUnion((Expr.Union)node, current);
            } else if (expr instanceof Expr.Except) {
                t = this.walkExprExcept((Expr.Except)node, current);
            } else if (expr instanceof Expr.Intersect) {
                t = this.walkExprIntersect((Expr.Intersect)node, current);
            } else if (expr instanceof Expr.Path) {
                t = this.walkExprPath((Expr.Path)node, current);
            } else if (expr instanceof Expr.Call) {
                t = this.walkExprCall((Expr.Call)node, current);
            } else if (expr instanceof Expr.CallAgg) {
                t = this.walkExprCallAgg((Expr.CallAgg)node, current);
            } else if (expr instanceof Expr.Cast) {
                t = this.walkExprCast((Expr.Cast)node, current);
            } else if (expr instanceof Expr.Select) {
                t = this.walkExprSelect((Expr.Select)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkExprMissing(@NotNull Expr.Missing node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprMissing(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprLit(@NotNull Expr.Lit node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprLit(node, current);
            current = this.walkAnyElement(node.getValue(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprId(@NotNull Expr.Id node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprId(node, current);
            current = this.walkSymbolPrimitive(node.getName(), current);
            current = this.walkCaseSensitivity(node.getCase(), current);
            current = this.walkScopeQualifier(node.getQualifier(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprParameter(@NotNull Expr.Parameter node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprParameter(node, current);
            current = this.walkLongPrimitive(node.getIndex(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprNot(@NotNull Expr.Not node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprNot(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprPos(@NotNull Expr.Pos node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprPos(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprNeg(@NotNull Expr.Neg node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprNeg(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprPlus(@NotNull Expr.Plus node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprPlus(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprMinus(@NotNull Expr.Minus node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprMinus(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprTimes(@NotNull Expr.Times node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprTimes(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprDivide(@NotNull Expr.Divide node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprDivide(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprModulo(@NotNull Expr.Modulo node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprModulo(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprConcat(@NotNull Expr.Concat node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprConcat(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprAnd(@NotNull Expr.And node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprAnd(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprOr(@NotNull Expr.Or node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprOr(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprEq(@NotNull Expr.Eq node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprEq(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprNe(@NotNull Expr.Ne node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprNe(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprGt(@NotNull Expr.Gt node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprGt(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprGte(@NotNull Expr.Gte node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprGte(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprLt(@NotNull Expr.Lt node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprLt(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprLte(@NotNull Expr.Lte node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprLte(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprLike(@NotNull Expr.Like node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprLike(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkExpr(node.getPattern(), current);
            Expr expr = node.getEscape();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                current = this.walkExpr(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprBetween(@NotNull Expr.Between node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprBetween(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkExpr(node.getFrom(), current);
            current = this.walkExpr(node.getTo(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprInCollection(@NotNull Expr.InCollection node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprInCollection(node, current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprIsType(@NotNull Expr.IsType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprIsType(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkType(node.getType(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprSimpleCase(@NotNull Expr.SimpleCase node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprSimpleCase(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkExprPairList(node.getCases(), current);
            Expr expr = node.getDefault();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                current = this.walkExpr(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprSearchedCase(@NotNull Expr.SearchedCase node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprSearchedCase(node, current);
            current = this.walkExprPairList(node.getCases(), current);
            Expr expr = node.getDefault();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                current = this.walkExpr(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprStruct(@NotNull Expr.Struct node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprStruct(node, current);
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExprPair((ExprPair)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprBag(@NotNull Expr.Bag node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprBag(node, current);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprList(@NotNull Expr.List node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprList(node, current);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprSexp(@NotNull Expr.Sexp node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprSexp(node, current);
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprDate(@NotNull Expr.Date node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprDate(node, current);
            current = this.walkLongPrimitive(node.getYear(), current);
            current = this.walkLongPrimitive(node.getMonth(), current);
            current = this.walkLongPrimitive(node.getDay(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprLitTime(@NotNull Expr.LitTime node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprLitTime(node, current);
            current = this.walkTimeValue(node.getValue(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprUnion(@NotNull Expr.Union node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprUnion(node, current);
            current = this.walkSetQuantifier(node.getSetq(), current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprExcept(@NotNull Expr.Except node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprExcept(node, current);
            current = this.walkSetQuantifier(node.getSetq(), current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprIntersect(@NotNull Expr.Intersect node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprIntersect(node, current);
            current = this.walkSetQuantifier(node.getSetq(), current);
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprPath(@NotNull Expr.Path node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprPath(node, current);
            current = this.walkExpr(node.getRoot(), current);
            Iterable $this$map$iv = node.getSteps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                PathStep pathStep = (PathStep)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkPathStep((PathStep)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkExprCall(@NotNull Expr.Call node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprCall(node, current);
            current = this.walkSymbolPrimitive(node.getFuncName(), current);
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprCallAgg(@NotNull Expr.CallAgg node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprCallAgg(node, current);
            current = this.walkSetQuantifier(node.getSetq(), current);
            current = this.walkSymbolPrimitive(node.getFuncName(), current);
            current = this.walkExpr(node.getArg(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprCast(@NotNull Expr.Cast node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprCast(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkType(node.getAsType(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkExprSelect(@NotNull Expr.Select node, T accumulator) {
            SetQuantifier it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitExprSelect(node, current);
            SetQuantifier setQuantifier = node.getSetq();
            if (setQuantifier != null) {
                partiqlAstNode = setQuantifier;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                current = this.walkSetQuantifier(it, current);
            }
            current = this.walkProjection(node.getProject(), current);
            current = this.walkFromSource(node.getFrom(), current);
            Let let2 = node.getFromLet();
            if (let2 != null) {
                partiqlAstNode = let2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                current = this.walkLet((Let)((Object)it), current);
            }
            Expr expr = node.getWhere();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl5 = false;
                current = this.walkExpr((Expr)((Object)it), current);
            }
            GroupBy groupBy2 = node.getGroup();
            if (groupBy2 != null) {
                partiqlAstNode = groupBy2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl6 = false;
                current = this.walkGroupBy((GroupBy)((Object)it), current);
            }
            Expr expr2 = node.getHaving();
            if (expr2 != null) {
                partiqlAstNode = expr2;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl7 = false;
                current = this.walkExpr((Expr)((Object)it), current);
            }
            OrderBy orderBy = node.getOrder();
            if (orderBy != null) {
                partiqlAstNode = orderBy;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl8 = false;
                current = this.walkOrderBy((OrderBy)((Object)it), current);
            }
            Expr expr3 = node.getLimit();
            if (expr3 != null) {
                partiqlAstNode = expr3;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl9 = false;
                current = this.walkExpr((Expr)((Object)it), current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkPathStep(@NotNull PathStep node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitPathStep(node, accumulator);
            PathStep pathStep = node;
            if (pathStep instanceof PathStep.PathExpr) {
                t = this.walkPathStepPathExpr((PathStep.PathExpr)node, current);
            } else if (pathStep instanceof PathStep.PathWildcard) {
                t = this.walkPathStepPathWildcard((PathStep.PathWildcard)node, current);
            } else if (pathStep instanceof PathStep.PathUnpivot) {
                t = this.walkPathStepPathUnpivot((PathStep.PathUnpivot)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkPathStepPathExpr(@NotNull PathStep.PathExpr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitPathStepPathExpr(node, current);
            current = this.walkExpr(node.getIndex(), current);
            current = this.walkCaseSensitivity(node.getCase(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkPathStepPathWildcard(@NotNull PathStep.PathWildcard node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitPathStepPathWildcard(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkPathStepPathUnpivot(@NotNull PathStep.PathUnpivot node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitPathStepPathUnpivot(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkProjection(@NotNull Projection node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitProjection(node, accumulator);
            Projection projection = node;
            if (projection instanceof Projection.ProjectStar) {
                t = this.walkProjectionProjectStar((Projection.ProjectStar)node, current);
            } else if (projection instanceof Projection.ProjectList) {
                t = this.walkProjectionProjectList((Projection.ProjectList)node, current);
            } else if (projection instanceof Projection.ProjectPivot) {
                t = this.walkProjectionProjectPivot((Projection.ProjectPivot)node, current);
            } else if (projection instanceof Projection.ProjectValue) {
                t = this.walkProjectionProjectValue((Projection.ProjectValue)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkProjectionProjectStar(@NotNull Projection.ProjectStar node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectionProjectStar(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkProjectionProjectList(@NotNull Projection.ProjectList node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectionProjectList(node, current);
            Iterable $this$map$iv = node.getProjectItems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ProjectItem projectItem = (ProjectItem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkProjectItem((ProjectItem)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkProjectionProjectPivot(@NotNull Projection.ProjectPivot node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectionProjectPivot(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkExpr(node.getKey(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkProjectionProjectValue(@NotNull Projection.ProjectValue node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectionProjectValue(node, current);
            current = this.walkExpr(node.getValue(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkProjectItem(@NotNull ProjectItem node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitProjectItem(node, accumulator);
            ProjectItem projectItem = node;
            if (projectItem instanceof ProjectItem.ProjectAll) {
                t = this.walkProjectItemProjectAll((ProjectItem.ProjectAll)node, current);
            } else if (projectItem instanceof ProjectItem.ProjectExpr) {
                t = this.walkProjectItemProjectExpr((ProjectItem.ProjectExpr)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkProjectItemProjectAll(@NotNull ProjectItem.ProjectAll node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectItemProjectAll(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkProjectItemProjectExpr(@NotNull ProjectItem.ProjectExpr node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitProjectItemProjectExpr(node, current);
            current = this.walkExpr(node.getExpr(), current);
            SymbolPrimitive symbolPrimitive = node.getAsAlias();
            if (symbolPrimitive != null) {
                SymbolPrimitive symbolPrimitive2 = symbolPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive2;
                boolean bl3 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkFromSource(@NotNull FromSource node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitFromSource(node, accumulator);
            FromSource fromSource = node;
            if (fromSource instanceof FromSource.Scan) {
                t = this.walkFromSourceScan((FromSource.Scan)node, current);
            } else if (fromSource instanceof FromSource.Unpivot) {
                t = this.walkFromSourceUnpivot((FromSource.Unpivot)node, current);
            } else if (fromSource instanceof FromSource.Join) {
                t = this.walkFromSourceJoin((FromSource.Join)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkFromSourceScan(@NotNull FromSource.Scan node, T accumulator) {
            SymbolPrimitive it;
            boolean bl;
            boolean bl2;
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitFromSourceScan(node, current);
            current = this.walkExpr(node.getExpr(), current);
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                symbolPrimitive = symbolPrimitive2;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl3 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            SymbolPrimitive symbolPrimitive3 = node.getAtAlias();
            if (symbolPrimitive3 != null) {
                symbolPrimitive = symbolPrimitive3;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl4 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            SymbolPrimitive symbolPrimitive4 = node.getByAlias();
            if (symbolPrimitive4 != null) {
                symbolPrimitive = symbolPrimitive4;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl5 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkFromSourceUnpivot(@NotNull FromSource.Unpivot node, T accumulator) {
            SymbolPrimitive it;
            boolean bl;
            boolean bl2;
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitFromSourceUnpivot(node, current);
            current = this.walkExpr(node.getExpr(), current);
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                symbolPrimitive = symbolPrimitive2;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl3 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            SymbolPrimitive symbolPrimitive3 = node.getAtAlias();
            if (symbolPrimitive3 != null) {
                symbolPrimitive = symbolPrimitive3;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl4 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            SymbolPrimitive symbolPrimitive4 = node.getByAlias();
            if (symbolPrimitive4 != null) {
                symbolPrimitive = symbolPrimitive4;
                bl2 = false;
                bl = false;
                it = symbolPrimitive;
                boolean bl5 = false;
                current = this.walkSymbolPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkFromSourceJoin(@NotNull FromSource.Join node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitFromSourceJoin(node, current);
            current = this.walkJoinType(node.getType(), current);
            current = this.walkFromSource(node.getLeft(), current);
            current = this.walkFromSource(node.getRight(), current);
            Expr expr = node.getPredicate();
            if (expr != null) {
                Expr expr2 = expr;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr2;
                boolean bl3 = false;
                current = this.walkExpr(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkJoinType(@NotNull JoinType node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitJoinType(node, accumulator);
            JoinType joinType = node;
            if (joinType instanceof JoinType.Inner) {
                t = this.walkJoinTypeInner((JoinType.Inner)node, current);
            } else if (joinType instanceof JoinType.Left) {
                t = this.walkJoinTypeLeft((JoinType.Left)node, current);
            } else if (joinType instanceof JoinType.Right) {
                t = this.walkJoinTypeRight((JoinType.Right)node, current);
            } else if (joinType instanceof JoinType.Full) {
                t = this.walkJoinTypeFull((JoinType.Full)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkJoinTypeInner(@NotNull JoinType.Inner node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitJoinTypeInner(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkJoinTypeLeft(@NotNull JoinType.Left node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitJoinTypeLeft(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkJoinTypeRight(@NotNull JoinType.Right node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitJoinTypeRight(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkJoinTypeFull(@NotNull JoinType.Full node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitJoinTypeFull(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkGroupingStrategy(@NotNull GroupingStrategy node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitGroupingStrategy(node, accumulator);
            GroupingStrategy groupingStrategy = node;
            if (groupingStrategy instanceof GroupingStrategy.GroupFull) {
                t = this.walkGroupingStrategyGroupFull((GroupingStrategy.GroupFull)node, current);
            } else if (groupingStrategy instanceof GroupingStrategy.GroupPartial) {
                t = this.walkGroupingStrategyGroupPartial((GroupingStrategy.GroupPartial)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkGroupingStrategyGroupFull(@NotNull GroupingStrategy.GroupFull node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitGroupingStrategyGroupFull(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkGroupingStrategyGroupPartial(@NotNull GroupingStrategy.GroupPartial node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitGroupingStrategyGroupPartial(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkOrderingSpec(@NotNull OrderingSpec node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitOrderingSpec(node, accumulator);
            OrderingSpec orderingSpec = node;
            if (orderingSpec instanceof OrderingSpec.Asc) {
                t = this.walkOrderingSpecAsc((OrderingSpec.Asc)node, current);
            } else if (orderingSpec instanceof OrderingSpec.Desc) {
                t = this.walkOrderingSpecDesc((OrderingSpec.Desc)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkOrderingSpecAsc(@NotNull OrderingSpec.Asc node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitOrderingSpecAsc(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkOrderingSpecDesc(@NotNull OrderingSpec.Desc node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitOrderingSpecDesc(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkCaseSensitivity(@NotNull CaseSensitivity node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitCaseSensitivity(node, accumulator);
            CaseSensitivity caseSensitivity = node;
            if (caseSensitivity instanceof CaseSensitivity.CaseSensitive) {
                t = this.walkCaseSensitivityCaseSensitive((CaseSensitivity.CaseSensitive)node, current);
            } else if (caseSensitivity instanceof CaseSensitivity.CaseInsensitive) {
                t = this.walkCaseSensitivityCaseInsensitive((CaseSensitivity.CaseInsensitive)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkCaseSensitivityCaseSensitive(@NotNull CaseSensitivity.CaseSensitive node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitCaseSensitivityCaseSensitive(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkCaseSensitivityCaseInsensitive(@NotNull CaseSensitivity.CaseInsensitive node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitCaseSensitivityCaseInsensitive(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkScopeQualifier(@NotNull ScopeQualifier node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitScopeQualifier(node, accumulator);
            ScopeQualifier scopeQualifier = node;
            if (scopeQualifier instanceof ScopeQualifier.Unqualified) {
                t = this.walkScopeQualifierUnqualified((ScopeQualifier.Unqualified)node, current);
            } else if (scopeQualifier instanceof ScopeQualifier.LocalsFirst) {
                t = this.walkScopeQualifierLocalsFirst((ScopeQualifier.LocalsFirst)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkScopeQualifierUnqualified(@NotNull ScopeQualifier.Unqualified node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitScopeQualifierUnqualified(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkScopeQualifierLocalsFirst(@NotNull ScopeQualifier.LocalsFirst node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitScopeQualifierLocalsFirst(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkSetQuantifier(@NotNull SetQuantifier node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitSetQuantifier(node, accumulator);
            SetQuantifier setQuantifier = node;
            if (setQuantifier instanceof SetQuantifier.All) {
                t = this.walkSetQuantifierAll((SetQuantifier.All)node, current);
            } else if (setQuantifier instanceof SetQuantifier.Distinct) {
                t = this.walkSetQuantifierDistinct((SetQuantifier.Distinct)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkSetQuantifierAll(@NotNull SetQuantifier.All node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitSetQuantifierAll(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkSetQuantifierDistinct(@NotNull SetQuantifier.Distinct node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitSetQuantifierDistinct(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDmlOp(@NotNull DmlOp node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitDmlOp(node, accumulator);
            DmlOp dmlOp = node;
            if (dmlOp instanceof DmlOp.Insert) {
                t = this.walkDmlOpInsert((DmlOp.Insert)node, current);
            } else if (dmlOp instanceof DmlOp.InsertValue) {
                t = this.walkDmlOpInsertValue((DmlOp.InsertValue)node, current);
            } else if (dmlOp instanceof DmlOp.Set) {
                t = this.walkDmlOpSet((DmlOp.Set)node, current);
            } else if (dmlOp instanceof DmlOp.Remove) {
                t = this.walkDmlOpRemove((DmlOp.Remove)node, current);
            } else if (dmlOp instanceof DmlOp.Delete) {
                t = this.walkDmlOpDelete((DmlOp.Delete)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkDmlOpInsert(@NotNull DmlOp.Insert node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpInsert(node, current);
            current = this.walkExpr(node.getTarget(), current);
            current = this.walkExpr(node.getValues(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDmlOpInsertValue(@NotNull DmlOp.InsertValue node, T accumulator) {
            Expr it;
            boolean bl;
            boolean bl2;
            PartiqlAstNode partiqlAstNode;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpInsertValue(node, current);
            current = this.walkExpr(node.getTarget(), current);
            current = this.walkExpr(node.getValue(), current);
            Expr expr = node.getIndex();
            if (expr != null) {
                partiqlAstNode = expr;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl3 = false;
                current = this.walkExpr(it, current);
            }
            OnConflict onConflict = node.getOnConflict();
            if (onConflict != null) {
                partiqlAstNode = onConflict;
                bl2 = false;
                bl = false;
                it = partiqlAstNode;
                boolean bl4 = false;
                current = this.walkOnConflict((OnConflict)((Object)it), current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDmlOpSet(@NotNull DmlOp.Set node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpSet(node, current);
            current = this.walkAssignment(node.getAssignment(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDmlOpRemove(@NotNull DmlOp.Remove node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpRemove(node, current);
            current = this.walkExpr(node.getTarget(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDmlOpDelete(@NotNull DmlOp.Delete node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDmlOpDelete(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkConflictAction(@NotNull ConflictAction node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitConflictAction(node, accumulator);
            ConflictAction conflictAction = node;
            if (!(conflictAction instanceof ConflictAction.DoNothing)) {
                throw new NoWhenBranchMatchedException();
            }
            return this.walkConflictActionDoNothing((ConflictAction.DoNothing)node, current);
        }

        public T walkConflictActionDoNothing(@NotNull ConflictAction.DoNothing node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitConflictActionDoNothing(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDdlOp(@NotNull DdlOp node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitDdlOp(node, accumulator);
            DdlOp ddlOp = node;
            if (ddlOp instanceof DdlOp.CreateTable) {
                t = this.walkDdlOpCreateTable((DdlOp.CreateTable)node, current);
            } else if (ddlOp instanceof DdlOp.DropTable) {
                t = this.walkDdlOpDropTable((DdlOp.DropTable)node, current);
            } else if (ddlOp instanceof DdlOp.CreateIndex) {
                t = this.walkDdlOpCreateIndex((DdlOp.CreateIndex)node, current);
            } else if (ddlOp instanceof DdlOp.DropIndex) {
                t = this.walkDdlOpDropIndex((DdlOp.DropIndex)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkDdlOpCreateTable(@NotNull DdlOp.CreateTable node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDdlOpCreateTable(node, current);
            current = this.walkSymbolPrimitive(node.getTableName(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDdlOpDropTable(@NotNull DdlOp.DropTable node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDdlOpDropTable(node, current);
            current = this.walkIdentifier(node.getTableName(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        /*
         * WARNING - void declaration
         */
        public T walkDdlOpCreateIndex(@NotNull DdlOp.CreateIndex node, T accumulator) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDdlOpCreateIndex(node, current);
            current = this.walkIdentifier(node.getIndexName(), current);
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                current = this.walkExpr((Expr)it, current);
                Unit unit = Unit.INSTANCE;
                collection.add(unit);
            }
            List cfr_ignored_0 = (List)destination$iv$iv;
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkDdlOpDropIndex(@NotNull DdlOp.DropIndex node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitDdlOpDropIndex(node, current);
            current = this.walkIdentifier(node.getTable(), current);
            current = this.walkIdentifier(node.getKeys(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkColumnComponent(@NotNull ColumnComponent node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitColumnComponent(node, accumulator);
            ColumnComponent columnComponent = node;
            if (columnComponent instanceof ColumnComponent.ReturningWildcard) {
                t = this.walkColumnComponentReturningWildcard((ColumnComponent.ReturningWildcard)node, current);
            } else if (columnComponent instanceof ColumnComponent.ReturningColumn) {
                t = this.walkColumnComponentReturningColumn((ColumnComponent.ReturningColumn)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkColumnComponentReturningWildcard(@NotNull ColumnComponent.ReturningWildcard node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitColumnComponentReturningWildcard(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkColumnComponentReturningColumn(@NotNull ColumnComponent.ReturningColumn node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitColumnComponentReturningColumn(node, current);
            current = this.walkExpr(node.getExpr(), current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkReturningMapping(@NotNull ReturningMapping node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitReturningMapping(node, accumulator);
            ReturningMapping returningMapping = node;
            if (returningMapping instanceof ReturningMapping.ModifiedNew) {
                t = this.walkReturningMappingModifiedNew((ReturningMapping.ModifiedNew)node, current);
            } else if (returningMapping instanceof ReturningMapping.ModifiedOld) {
                t = this.walkReturningMappingModifiedOld((ReturningMapping.ModifiedOld)node, current);
            } else if (returningMapping instanceof ReturningMapping.AllNew) {
                t = this.walkReturningMappingAllNew((ReturningMapping.AllNew)node, current);
            } else if (returningMapping instanceof ReturningMapping.AllOld) {
                t = this.walkReturningMappingAllOld((ReturningMapping.AllOld)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkReturningMappingModifiedNew(@NotNull ReturningMapping.ModifiedNew node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningMappingModifiedNew(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkReturningMappingModifiedOld(@NotNull ReturningMapping.ModifiedOld node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningMappingModifiedOld(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkReturningMappingAllNew(@NotNull ReturningMapping.AllNew node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningMappingAllNew(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkReturningMappingAllOld(@NotNull ReturningMapping.AllOld node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitReturningMappingAllOld(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkType(@NotNull Type node, T accumulator) {
            T t;
            Intrinsics.checkParameterIsNotNull(node, "node");
            T current = this.visitType(node, accumulator);
            Type type = node;
            if (type instanceof Type.NullType) {
                t = this.walkTypeNullType((Type.NullType)node, current);
            } else if (type instanceof Type.BooleanType) {
                t = this.walkTypeBooleanType((Type.BooleanType)node, current);
            } else if (type instanceof Type.SmallintType) {
                t = this.walkTypeSmallintType((Type.SmallintType)node, current);
            } else if (type instanceof Type.IntegerType) {
                t = this.walkTypeIntegerType((Type.IntegerType)node, current);
            } else if (type instanceof Type.FloatType) {
                t = this.walkTypeFloatType((Type.FloatType)node, current);
            } else if (type instanceof Type.RealType) {
                t = this.walkTypeRealType((Type.RealType)node, current);
            } else if (type instanceof Type.DoublePrecisionType) {
                t = this.walkTypeDoublePrecisionType((Type.DoublePrecisionType)node, current);
            } else if (type instanceof Type.DecimalType) {
                t = this.walkTypeDecimalType((Type.DecimalType)node, current);
            } else if (type instanceof Type.NumericType) {
                t = this.walkTypeNumericType((Type.NumericType)node, current);
            } else if (type instanceof Type.TimestampType) {
                t = this.walkTypeTimestampType((Type.TimestampType)node, current);
            } else if (type instanceof Type.CharacterType) {
                t = this.walkTypeCharacterType((Type.CharacterType)node, current);
            } else if (type instanceof Type.CharacterVaryingType) {
                t = this.walkTypeCharacterVaryingType((Type.CharacterVaryingType)node, current);
            } else if (type instanceof Type.MissingType) {
                t = this.walkTypeMissingType((Type.MissingType)node, current);
            } else if (type instanceof Type.StringType) {
                t = this.walkTypeStringType((Type.StringType)node, current);
            } else if (type instanceof Type.SymbolType) {
                t = this.walkTypeSymbolType((Type.SymbolType)node, current);
            } else if (type instanceof Type.BlobType) {
                t = this.walkTypeBlobType((Type.BlobType)node, current);
            } else if (type instanceof Type.ClobType) {
                t = this.walkTypeClobType((Type.ClobType)node, current);
            } else if (type instanceof Type.DateType) {
                t = this.walkTypeDateType((Type.DateType)node, current);
            } else if (type instanceof Type.TimeType) {
                t = this.walkTypeTimeType((Type.TimeType)node, current);
            } else if (type instanceof Type.TimeWithTimeZoneType) {
                t = this.walkTypeTimeWithTimeZoneType((Type.TimeWithTimeZoneType)node, current);
            } else if (type instanceof Type.StructType) {
                t = this.walkTypeStructType((Type.StructType)node, current);
            } else if (type instanceof Type.TupleType) {
                t = this.walkTypeTupleType((Type.TupleType)node, current);
            } else if (type instanceof Type.ListType) {
                t = this.walkTypeListType((Type.ListType)node, current);
            } else if (type instanceof Type.SexpType) {
                t = this.walkTypeSexpType((Type.SexpType)node, current);
            } else if (type instanceof Type.BagType) {
                t = this.walkTypeBagType((Type.BagType)node, current);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return t;
        }

        public T walkTypeNullType(@NotNull Type.NullType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeNullType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeBooleanType(@NotNull Type.BooleanType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeBooleanType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeSmallintType(@NotNull Type.SmallintType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeSmallintType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeIntegerType(@NotNull Type.IntegerType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeIntegerType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeFloatType(@NotNull Type.FloatType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeFloatType(node, current);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeRealType(@NotNull Type.RealType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeRealType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeDoublePrecisionType(@NotNull Type.DoublePrecisionType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeDoublePrecisionType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeDecimalType(@NotNull Type.DecimalType node, T accumulator) {
            LongPrimitive it;
            boolean bl;
            boolean bl2;
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeDecimalType(node, current);
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                longPrimitive = longPrimitive2;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            LongPrimitive longPrimitive3 = node.getScale();
            if (longPrimitive3 != null) {
                longPrimitive = longPrimitive3;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl4 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeNumericType(@NotNull Type.NumericType node, T accumulator) {
            LongPrimitive it;
            boolean bl;
            boolean bl2;
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeNumericType(node, current);
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                longPrimitive = longPrimitive2;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            LongPrimitive longPrimitive3 = node.getScale();
            if (longPrimitive3 != null) {
                longPrimitive = longPrimitive3;
                bl2 = false;
                bl = false;
                it = longPrimitive;
                boolean bl4 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeTimestampType(@NotNull Type.TimestampType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeTimestampType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeCharacterType(@NotNull Type.CharacterType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeCharacterType(node, current);
            LongPrimitive longPrimitive = node.getLength();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeCharacterVaryingType(@NotNull Type.CharacterVaryingType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeCharacterVaryingType(node, current);
            LongPrimitive longPrimitive = node.getLength();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeMissingType(@NotNull Type.MissingType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeMissingType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeStringType(@NotNull Type.StringType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeStringType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeSymbolType(@NotNull Type.SymbolType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeSymbolType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeBlobType(@NotNull Type.BlobType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeBlobType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeClobType(@NotNull Type.ClobType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeClobType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeDateType(@NotNull Type.DateType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeDateType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeTimeType(@NotNull Type.TimeType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeTimeType(node, current);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeTimeWithTimeZoneType(@NotNull Type.TimeWithTimeZoneType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeTimeWithTimeZoneType(node, current);
            LongPrimitive longPrimitive = node.getPrecision();
            if (longPrimitive != null) {
                LongPrimitive longPrimitive2 = longPrimitive;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive2;
                boolean bl3 = false;
                current = this.walkLongPrimitive(it, current);
            }
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeStructType(@NotNull Type.StructType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeStructType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeTupleType(@NotNull Type.TupleType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeTupleType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeListType(@NotNull Type.ListType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeListType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeSexpType(@NotNull Type.SexpType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeSexpType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }

        public T walkTypeBagType(@NotNull Type.BagType node, T accumulator) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Object current = accumulator;
            current = this.visitTypeBagType(node, current);
            current = this.walkMetas(node.getMetas(), current);
            return current;
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000\u0098\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\b&\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0004H\u0016J \u0010\u0006\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u0004H\u0016J\u0010\u0010\u000b\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020\u0004H\u0016J\u0010\u0010\r\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020\u0004H\u0016J\u0010\u0010\u000e\u001a\u00020\u000f2\u0006\u0010\u0005\u001a\u00020\u000fH\u0016J\u0010\u0010\u0010\u001a\u00020\u000f2\u0006\u0010\u0005\u001a\u00020\u0011H\u0016J \u0010\u0012\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u0011H\u0016J\u0010\u0010\u0013\u001a\u00020\u000f2\u0006\u0010\u0005\u001a\u00020\u0014H\u0016J \u0010\u0015\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u0014H\u0016J\u0010\u0010\u0016\u001a\u00020\u00172\u0006\u0010\u0005\u001a\u00020\u0017H\u0016J\u0010\u0010\u0018\u001a\u00020\u00172\u0006\u0010\u0005\u001a\u00020\u0019H\u0016J\u0010\u0010\u001a\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020\u0019H\u0016J \u0010\u001b\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u0019H\u0016J\u0010\u0010\u001c\u001a\u00020\u00172\u0006\u0010\u0005\u001a\u00020\u001dH\u0016J \u0010\u001e\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u001dH\u0016J\u0010\u0010\u001f\u001a\u00020 2\u0006\u0010\u0005\u001a\u00020 H\u0016J\u0010\u0010!\u001a\u00020 2\u0006\u0010\u0005\u001a\u00020\"H\u0016J \u0010#\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\"H\u0016J\u0010\u0010$\u001a\u00020%2\u0006\u0010\u0005\u001a\u00020%H\u0016J\u0010\u0010&\u001a\u00020%2\u0006\u0010\u0005\u001a\u00020'H\u0016J\u0016\u0010(\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0006\u0010\u0005\u001a\u00020'H\u0016J\u0010\u0010*\u001a\u00020+2\u0006\u0010\u0005\u001a\u00020'H\u0016J \u0010,\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020'H\u0016J\u0010\u0010-\u001a\u00020%2\u0006\u0010\u0005\u001a\u00020.H\u0016J \u0010/\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020.H\u0016J\u0010\u00100\u001a\u0002012\u0006\u0010\u0005\u001a\u00020.H\u0016J\u0010\u00102\u001a\u00020%2\u0006\u0010\u0005\u001a\u000203H\u0016J\u0010\u00104\u001a\u00020+2\u0006\u0010\u0005\u001a\u000203H\u0016J \u00105\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u000203H\u0016J\u0010\u00106\u001a\u00020+2\u0006\u0010\u0005\u001a\u000203H\u0016J\u0010\u00107\u001a\u00020%2\u0006\u0010\u0005\u001a\u000208H\u0016J \u00109\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u000208H\u0016J\u0010\u0010:\u001a\u00020+2\u0006\u0010\u0005\u001a\u000208H\u0016J\u0010\u0010;\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020<H\u0016J\u0010\u0010=\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020>H\u0016J \u0010?\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020>H\u0016J\u0010\u0010@\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020AH\u0016J\u0010\u0010B\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020CH\u0016J\u0012\u0010D\u001a\u0004\u0018\u00010\f2\u0006\u0010\u0005\u001a\u00020CH\u0016J \u0010E\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020CH\u0016J\u0012\u0010F\u001a\u0004\u0018\u00010G2\u0006\u0010\u0005\u001a\u00020CH\u0016J\u0010\u0010H\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020CH\u0016J\u0010\u0010I\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020CH\u0016J \u0010J\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020AH\u0016J\u0010\u0010K\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020AH\u0016J\u0010\u0010L\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020AH\u0016J\u0010\u0010M\u001a\u00020N2\u0006\u0010\u0005\u001a\u00020NH\u0016J \u0010O\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020NH\u0016J\u0016\u0010P\u001a\b\u0012\u0004\u0012\u00020<0)2\u0006\u0010\u0005\u001a\u00020NH\u0016J\u0010\u0010Q\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020RH\u0016J \u0010S\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020RH\u0016J\u0010\u0010T\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020RH\u0016J\u0010\u0010U\u001a\u00020<2\u0006\u0010\u0005\u001a\u00020VH\u0016J\u0010\u0010W\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020VH\u0016J \u0010X\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020VH\u0016J\u0010\u0010Y\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020\fH\u0016J\u0010\u0010Z\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020[H\u0016J \u0010\\\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020[H\u0016J\u0016\u0010]\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0006\u0010\u0005\u001a\u00020[H\u0016J\u0010\u0010^\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020_H\u0016J \u0010`\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020_H\u0016J\u0016\u0010a\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0006\u0010\u0005\u001a\u00020_H\u0016J\u0010\u0010b\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020cH\u0016J\u0010\u0010d\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020cH\u0016J \u0010e\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020cH\u0016J\u0010\u0010f\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020cH\u0016J\u0010\u0010g\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020cH\u0016J\u0010\u0010h\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020iH\u0016J\u0010\u0010j\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020kH\u0016J\u0010\u0010l\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020kH\u0016J\u0010\u0010m\u001a\u0002012\u0006\u0010\u0005\u001a\u00020kH\u0016J \u0010n\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020kH\u0016J\u0010\u0010o\u001a\u00020p2\u0006\u0010\u0005\u001a\u00020kH\u0016J\u0016\u0010q\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0006\u0010\u0005\u001a\u00020iH\u0016J\u0010\u0010r\u001a\u0002012\u0006\u0010\u0005\u001a\u00020iH\u0016J \u0010s\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020iH\u0016J\u0010\u0010t\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020uH\u0016J\u0010\u0010v\u001a\u00020w2\u0006\u0010\u0005\u001a\u00020uH\u0016J \u0010x\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020uH\u0016J\u0010\u0010y\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020uH\u0016J\u0010\u0010z\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020{H\u0016J \u0010|\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020{H\u0016J\u0016\u0010}\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0006\u0010\u0005\u001a\u00020{H\u0016J\u0010\u0010~\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020\u007fH\u0016J\u0012\u0010\u0080\u0001\u001a\u00030\u0081\u00012\u0006\u0010\u0005\u001a\u00020\u007fH\u0016J!\u0010\u0082\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020\u007fH\u0016J\u0012\u0010\u0083\u0001\u001a\u00030\u0081\u00012\u0006\u0010\u0005\u001a\u00020\u007fH\u0016J\u0012\u0010\u0084\u0001\u001a\u00030\u0081\u00012\u0006\u0010\u0005\u001a\u00020\u007fH\u0016J\u0012\u0010\u0085\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0086\u0001H\u0016J\"\u0010\u0087\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0086\u0001H\u0016J\u0018\u0010\u0088\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u0086\u0001H\u0016J\u0012\u0010\u0089\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u008a\u0001H\u0016J\"\u0010\u008b\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008a\u0001H\u0016J\u0018\u0010\u008c\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u008a\u0001H\u0016J\u0012\u0010\u008d\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0016J\"\u0010\u008f\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0016J\u0018\u0010\u0090\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0016J\u0012\u0010\u0091\u0001\u001a\u00020p2\u0007\u0010\u0005\u001a\u00030\u008e\u0001H\u0016J\u0012\u0010\u0092\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0093\u0001H\u0016J\"\u0010\u0094\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0093\u0001H\u0016J\u0018\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u0093\u0001H\u0016J\u0012\u0010\u0096\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0097\u0001H\u0016J\"\u0010\u0098\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0097\u0001H\u0016J\u0018\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u0097\u0001H\u0016J\u0012\u0010\u009a\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u009b\u0001H\u0016J\u0012\u0010\u009c\u0001\u001a\u00020\u000f2\u0007\u0010\u0005\u001a\u00030\u009b\u0001H\u0016J\"\u0010\u009d\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u009b\u0001H\u0016J\u0012\u0010\u009e\u0001\u001a\u0002012\u0007\u0010\u0005\u001a\u00030\u009b\u0001H\u0016J\u0013\u0010\u009f\u0001\u001a\u00030\u00a0\u00012\u0007\u0010\u0005\u001a\u00030\u009b\u0001H\u0016J\u0012\u0010\u00a1\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a2\u0001H\u0016J\"\u0010\u00a3\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a2\u0001H\u0016J\u0018\u0010\u00a4\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00a2\u0001H\u0016J\u0012\u0010\u00a5\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0016J\"\u0010\u00a7\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0016J\u0018\u0010\u00a8\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0016J\u0012\u0010\u00a9\u0001\u001a\u00020p2\u0007\u0010\u0005\u001a\u00030\u00a6\u0001H\u0016J\u0012\u0010\u00aa\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00ab\u0001H\u0016J\"\u0010\u00ac\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ab\u0001H\u0016J\u0012\u0010\u00ad\u0001\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00ab\u0001H\u0016J\u0012\u0010\u00ae\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00ab\u0001H\u0016J\u0012\u0010\u00af\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\u0014\u0010\u00b1\u0001\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\"\u0010\u00b2\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\u0012\u0010\u00b3\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\u0012\u0010\u00b4\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00b0\u0001H\u0016J\u0012\u0010\u00b5\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00b6\u0001H\u0016J\"\u0010\u00b7\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b6\u0001H\u0016J\u0018\u0010\u00b8\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00b6\u0001H\u0016J\u0012\u0010\u00b9\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00ba\u0001H\u0016J\u0012\u0010\u00bb\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00bc\u0001H\u0016J\"\u0010\u00bd\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bc\u0001H\u0016J\u0013\u0010\u00be\u0001\u001a\u00030\u00bf\u00012\u0007\u0010\u0005\u001a\u00030\u00bc\u0001H\u0016J\"\u0010\u00c0\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ba\u0001H\u0016J\u0013\u0010\u00c1\u0001\u001a\u00030\u00c2\u00012\u0007\u0010\u0005\u001a\u00030\u00ba\u0001H\u0016J\u0012\u0010\u00c3\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00c4\u0001H\u0016J\"\u0010\u00c5\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c4\u0001H\u0016J\u0018\u0010\u00c6\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00c4\u0001H\u0016J\u0012\u0010\u00c7\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00c8\u0001H\u0016J\"\u0010\u00c9\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c8\u0001H\u0016J\u0018\u0010\u00ca\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00c8\u0001H\u0016J\u0012\u0010\u00cb\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00cc\u0001H\u0016J\"\u0010\u00cd\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00cc\u0001H\u0016J\u0018\u0010\u00ce\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00cc\u0001H\u0016J\u0012\u0010\u00cf\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00d0\u0001H\u0016J\"\u0010\u00d1\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d0\u0001H\u0016J\u0012\u0010\u00d2\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00d3\u0001H\u0016J\"\u0010\u00d4\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d3\u0001H\u0016J\u0018\u0010\u00d5\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00d3\u0001H\u0016J\u0012\u0010\u00d6\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00d7\u0001H\u0016J\"\u0010\u00d8\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d7\u0001H\u0016J\u0018\u0010\u00d9\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00d7\u0001H\u0016J\u0012\u0010\u00da\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00db\u0001H\u0016J\u0012\u0010\u00dc\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00db\u0001H\u0016J\"\u0010\u00dd\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00db\u0001H\u0016J\u0012\u0010\u00de\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00df\u0001H\u0016J\u0012\u0010\u00e0\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00df\u0001H\u0016J\"\u0010\u00e1\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00df\u0001H\u0016J\u0012\u0010\u00e2\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00e3\u0001H\u0016J\"\u0010\u00e4\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e3\u0001H\u0016J\u0018\u0010\u00e5\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00e3\u0001H\u0016J\u0013\u0010\u00e6\u0001\u001a\u00030\u00e7\u00012\u0007\u0010\u0005\u001a\u00030\u00e7\u0001H\u0016J\u0013\u0010\u00e8\u0001\u001a\u00030\u00e9\u00012\u0007\u0010\u0005\u001a\u00030\u00e9\u0001H\u0016J\"\u0010\u00ea\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e9\u0001H\u0016J\u0019\u0010\u00eb\u0001\u001a\t\u0012\u0005\u0012\u00030\u00e7\u00010)2\u0007\u0010\u0005\u001a\u00030\u00e9\u0001H\u0016J\u0012\u0010\u00ec\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00e7\u0001H\u0016J\"\u0010\u00ed\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e7\u0001H\u0016J\u0012\u0010\u00ee\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00e7\u0001H\u0016J\u0012\u0010\u00ef\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00f0\u0001H\u0016J\u0013\u0010\u00f1\u0001\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00f0\u0001H\u0016J\"\u0010\u00f2\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00f0\u0001H\u0016J\u0012\u0010\u00f3\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\"\u0010\u00f5\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\u0012\u0010\u00f6\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\u0019\u0010\u00f7\u0001\u001a\t\u0012\u0005\u0012\u00030\u00f8\u00010)2\u0007\u0010\u0005\u001a\u00030\u00f4\u0001H\u0016J\u0012\u0010\u00f9\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00fa\u0001H\u0016J\"\u0010\u00fb\u0001\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00fa\u0001H\u0016J\u0018\u0010\u00fc\u0001\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00fa\u0001H\u0016J\u0012\u0010\u00fd\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00fe\u0001H\u0016J\u0012\u0010\u00ff\u0001\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00fe\u0001H\u0016J\"\u0010\u0080\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00fe\u0001H\u0016J\u0012\u0010\u0081\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0016J\u0013\u0010\u0083\u0002\u001a\u00030\u00e9\u00012\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0016J\u0014\u0010\u0084\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0016J\"\u0010\u0085\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0082\u0002H\u0016J\u0012\u0010\u0086\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0013\u0010\u0088\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0015\u0010\u008a\u0002\u001a\u0005\u0018\u00010\u008b\u00022\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0015\u0010\u008c\u0002\u001a\u0005\u0018\u00010\u008d\u00022\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0014\u0010\u008e\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0014\u0010\u008f\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\"\u0010\u0090\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0015\u0010\u0091\u0002\u001a\u0005\u0018\u00010\u0092\u00022\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0013\u0010\u0093\u0002\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0014\u0010\u0095\u0002\u001a\u0004\u0018\u00010p2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0014\u0010\u0096\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u0087\u0002H\u0016J\u0012\u0010\u0097\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0098\u0002H\u0016J\"\u0010\u0099\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0098\u0002H\u0016J\u0018\u0010\u009a\u0002\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u0098\u0002H\u0016J\u0012\u0010\u009b\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\u0013\u0010\u009d\u0002\u001a\u00030\u00e9\u00012\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\u0014\u0010\u009e\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\u0012\u0010\u009f\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\"\u0010\u00a0\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u009c\u0002H\u0016J\u0012\u0010\u00a1\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a2\u0002H\u0016J\u0019\u0010\u00a3\u0002\u001a\t\u0012\u0005\u0012\u00030\u00e7\u00010)2\u0007\u0010\u0005\u001a\u00030\u00a2\u0002H\u0016J\"\u0010\u00a4\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a2\u0002H\u0016J\u0012\u0010\u00a5\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a6\u0002H\u0016J\"\u0010\u00a7\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a6\u0002H\u0016J\u0018\u0010\u00a8\u0002\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00a6\u0002H\u0016J\u0012\u0010\u00a9\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00aa\u0002H\u0016J\"\u0010\u00ab\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00aa\u0002H\u0016J\u0018\u0010\u00ac\u0002\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00aa\u0002H\u0016J\u0012\u0010\u00ad\u0002\u001a\u00020p2\u0007\u0010\u0005\u001a\u00030\u00aa\u0002H\u0016J\u0013\u0010\u00ae\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u0089\u0002H\u0016J\u0013\u0010\u00af\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\u0013\u0010\u00b1\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\"\u0010\u00b2\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\u0014\u0010\u00b3\u0002\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\u0013\u0010\u00b4\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\u0013\u0010\u00b5\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00b0\u0002H\u0016J\u0013\u0010\u00b7\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\u0014\u0010\u00b9\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\u0014\u0010\u00ba\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\u0014\u0010\u00bb\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\u0012\u0010\u00bc\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\"\u0010\u00bd\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b8\u0002H\u0016J\u0013\u0010\u00be\u0002\u001a\u00030\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\u0014\u0010\u00c0\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\u0014\u0010\u00c1\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\u0014\u0010\u00c2\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\u0012\u0010\u00c3\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\"\u0010\u00c4\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bf\u0002H\u0016J\u0013\u0010\u00c5\u0002\u001a\u00030\u008d\u00022\u0007\u0010\u0005\u001a\u00030\u008d\u0002H\u0016J\u0014\u0010\u00c6\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u008d\u0002H\u0016J\u0013\u0010\u00c7\u0002\u001a\u00030\u00c8\u00022\u0007\u0010\u0005\u001a\u00030\u008d\u0002H\u0016J\"\u0010\u00c9\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008d\u0002H\u0016J\u0013\u0010\u00ca\u0002\u001a\u00030\u00cb\u00022\u0007\u0010\u0005\u001a\u00030\u008d\u0002H\u0016J\u0013\u0010\u00cc\u0002\u001a\u00030\u00cd\u00022\u0007\u0010\u0005\u001a\u00030\u00cd\u0002H\u0016J\u0013\u0010\u00ce\u0002\u001a\u00030\u00c8\u00022\u0007\u0010\u0005\u001a\u00030\u00c8\u0002H\u0016J\u0019\u0010\u00cf\u0002\u001a\t\u0012\u0005\u0012\u00030\u00cd\u00020)2\u0007\u0010\u0005\u001a\u00030\u00c8\u0002H\u0016J\"\u0010\u00d0\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c8\u0002H\u0016J\u0014\u0010\u00d1\u0002\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u00cd\u0002H\u0016J\u0012\u0010\u00d2\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00cd\u0002H\u0016J\"\u0010\u00d3\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00cd\u0002H\u0016J\u0013\u0010\u00d4\u0002\u001a\u00030\u00cb\u00022\u0007\u0010\u0005\u001a\u00030\u00cb\u0002H\u0016J\u0013\u0010\u00d5\u0002\u001a\u00030\u00cb\u00022\u0007\u0010\u0005\u001a\u00030\u00d6\u0002H\u0016J\"\u0010\u00d7\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d6\u0002H\u0016J\u0013\u0010\u00d8\u0002\u001a\u00030\u00cb\u00022\u0007\u0010\u0005\u001a\u00030\u00d9\u0002H\u0016J\"\u0010\u00da\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d9\u0002H\u0016J\u0011\u0010\u00db\u0002\u001a\u00020+2\u0006\u0010\u0005\u001a\u00020+H\u0016J\u0011\u0010\u00dc\u0002\u001a\u00020\u000f2\u0006\u0010\u0005\u001a\u00020+H\u0016J!\u0010\u00dd\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020+H\u0016J\u0011\u0010\u00de\u0002\u001a\u0002012\u0006\u0010\u0005\u001a\u00020+H\u0016J\u0013\u0010\u00df\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00b6\u0002H\u0016J\u0013\u0010\u00e0\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00e1\u0002H\u0016J\"\u0010\u00e2\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e1\u0002H\u0016J\u0013\u0010\u00e3\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00e4\u0002H\u0016J\"\u0010\u00e5\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e4\u0002H\u0016J\u0013\u0010\u00e6\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00e7\u0002H\u0016J\"\u0010\u00e8\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e7\u0002H\u0016J\u0013\u0010\u00e9\u0002\u001a\u00030\u00b6\u00022\u0007\u0010\u0005\u001a\u00030\u00ea\u0002H\u0016J\"\u0010\u00eb\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ea\u0002H\u0016J\u0013\u0010\u00ec\u0002\u001a\u00030\u008b\u00022\u0007\u0010\u0005\u001a\u00030\u008b\u0002H\u0016J\u0013\u0010\u00ed\u0002\u001a\u00030\u00ee\u00022\u0007\u0010\u0005\u001a\u00030\u00ee\u0002H\u0016J\u0012\u0010\u00ef\u0002\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00ee\u0002H\u0016J\"\u0010\u00f0\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ee\u0002H\u0016J\u0012\u0010\u00f1\u0002\u001a\u0002012\u0007\u0010\u0005\u001a\u00030\u00ee\u0002H\u0016J\u0019\u0010\u00f2\u0002\u001a\t\u0012\u0005\u0012\u00030\u00ee\u00020)2\u0007\u0010\u0005\u001a\u00030\u008b\u0002H\u0016J\"\u0010\u00f3\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008b\u0002H\u0016J\u0011\u0010\u00f4\u0002\u001a\u00020G2\u0006\u0010\u0005\u001a\u00020GH\u0016J\u0011\u0010\u00f5\u0002\u001a\u00020 2\u0006\u0010\u0005\u001a\u00020GH\u0016J\u0011\u0010\u00f6\u0002\u001a\u00020\f2\u0006\u0010\u0005\u001a\u00020GH\u0016J!\u0010\u00f7\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0006\u0010\u0005\u001a\u00020GH\u0016J\u0013\u0010\u00f8\u0002\u001a\u00030\u0092\u00022\u0007\u0010\u0005\u001a\u00030\u0092\u0002H\u0016J\"\u0010\u00f9\u0002\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0092\u0002H\u0016J\u0019\u0010\u00fa\u0002\u001a\t\u0012\u0005\u0012\u00030\u00fb\u00020)2\u0007\u0010\u0005\u001a\u00030\u0092\u0002H\u0016J\u0013\u0010\u00fc\u0002\u001a\u00030\u00fd\u00022\u0007\u0010\u0005\u001a\u00030\u00fd\u0002H\u0016J\u0013\u0010\u00fe\u0002\u001a\u00030\u00fd\u00022\u0007\u0010\u0005\u001a\u00030\u00ff\u0002H\u0016J\"\u0010\u0080\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ff\u0002H\u0016J\u0013\u0010\u0081\u0003\u001a\u00030\u00fd\u00022\u0007\u0010\u0005\u001a\u00030\u0082\u0003H\u0016J\"\u0010\u0083\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0082\u0003H\u0016J\u0013\u0010\u0084\u0003\u001a\u00030\u00f8\u00012\u0007\u0010\u0005\u001a\u00030\u00f8\u0001H\u0016J\u0013\u0010\u0085\u0003\u001a\u00030\u00f8\u00012\u0007\u0010\u0005\u001a\u00030\u0086\u0003H\u0016J\u0012\u0010\u0087\u0003\u001a\u00020\u000f2\u0007\u0010\u0005\u001a\u00030\u0086\u0003H\u0016J\u0012\u0010\u0088\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0086\u0003H\u0016J\"\u0010\u0089\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0086\u0003H\u0016J\u0013\u0010\u008a\u0003\u001a\u00030\u00f8\u00012\u0007\u0010\u0005\u001a\u00030\u008b\u0003H\u0016J\"\u0010\u008c\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008b\u0003H\u0016J\u0013\u0010\u008d\u0003\u001a\u00030\u00f8\u00012\u0007\u0010\u0005\u001a\u00030\u008e\u0003H\u0016J\"\u0010\u008f\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008e\u0003H\u0016J\u0013\u0010\u0090\u0003\u001a\u00030\u0091\u00032\u0007\u0010\u0005\u001a\u00030\u0091\u0003H\u0016J\u0013\u0010\u0092\u0003\u001a\u00030\u0091\u00032\u0007\u0010\u0005\u001a\u00030\u0093\u0003H\u0016J\u0012\u0010\u0094\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0093\u0003H\u0016J\"\u0010\u0095\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0093\u0003H\u0016J\u0013\u0010\u0096\u0003\u001a\u00030\u0091\u00032\u0007\u0010\u0005\u001a\u00030\u0097\u0003H\u0016J\u0014\u0010\u0098\u0003\u001a\u0004\u0018\u0001012\u0007\u0010\u0005\u001a\u00030\u0097\u0003H\u0016J\u0012\u0010\u0099\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u0097\u0003H\u0016J\"\u0010\u009a\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0097\u0003H\u0016J\u0013\u0010\u009b\u0003\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u0094\u0002H\u0016J\u0013\u0010\u009c\u0003\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u009d\u0003H\u0016J\"\u0010\u009e\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u009d\u0003H\u0016J\u0019\u0010\u009f\u0003\u001a\t\u0012\u0005\u0012\u00030\u0091\u00030)2\u0007\u0010\u0005\u001a\u00030\u009d\u0003H\u0016J\u0013\u0010\u00a0\u0003\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u00a1\u0003H\u0016J\u0012\u0010\u00a2\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a1\u0003H\u0016J\"\u0010\u00a3\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a1\u0003H\u0016J\u0012\u0010\u00a4\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a1\u0003H\u0016J\u0013\u0010\u00a5\u0003\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u00a6\u0003H\u0016J\"\u0010\u00a7\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a6\u0003H\u0016J\u0013\u0010\u00a8\u0003\u001a\u00030\u0094\u00022\u0007\u0010\u0005\u001a\u00030\u00a9\u0003H\u0016J\"\u0010\u00aa\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a9\u0003H\u0016J\u0012\u0010\u00ab\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00a9\u0003H\u0016J\u0013\u0010\u00ac\u0003\u001a\u00030\u00ad\u00032\u0007\u0010\u0005\u001a\u00030\u00ad\u0003H\u0016J\u0012\u0010\u00ae\u0003\u001a\u00020\u00172\u0007\u0010\u0005\u001a\u00030\u00ad\u0003H\u0016J\u0013\u0010\u00af\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00ad\u0003H\u0016J\"\u0010\u00b1\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ad\u0003H\u0016J\u0013\u0010\u00b2\u0003\u001a\u00030\u00b3\u00032\u0007\u0010\u0005\u001a\u00030\u00b3\u0003H\u0016J\u0019\u0010\u00b4\u0003\u001a\t\u0012\u0005\u0012\u00030\u00ad\u00030)2\u0007\u0010\u0005\u001a\u00030\u00b3\u0003H\u0016J\"\u0010\u00b5\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b3\u0003H\u0016J\u0013\u0010\u00b6\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00b0\u0003H\u0016J\u0013\u0010\u00b7\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00b8\u0003H\u0016J\"\u0010\u00b9\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b8\u0003H\u0016J\u0013\u0010\u00ba\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00bb\u0003H\u0016J\"\u0010\u00bc\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bb\u0003H\u0016J\u0013\u0010\u00bd\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00be\u0003H\u0016J\"\u0010\u00bf\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00be\u0003H\u0016J\u0013\u0010\u00c0\u0003\u001a\u00030\u00b0\u00032\u0007\u0010\u0005\u001a\u00030\u00c1\u0003H\u0016J\"\u0010\u00c2\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c1\u0003H\u0016J\u0013\u0010\u00c3\u0003\u001a\u00030\u00a0\u00012\u0007\u0010\u0005\u001a\u00030\u00a0\u0001H\u0016J\u0013\u0010\u00c4\u0003\u001a\u00030\u00a0\u00012\u0007\u0010\u0005\u001a\u00030\u00c5\u0003H\u0016J\"\u0010\u00c6\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c5\u0003H\u0016J\u0013\u0010\u00c7\u0003\u001a\u00030\u00a0\u00012\u0007\u0010\u0005\u001a\u00030\u00c8\u0003H\u0016J\"\u0010\u00c9\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c8\u0003H\u0016J\u0011\u0010\u00ca\u0003\u001a\u00020p2\u0006\u0010\u0005\u001a\u00020pH\u0016J\u0012\u0010\u00cb\u0003\u001a\u00020p2\u0007\u0010\u0005\u001a\u00030\u00cc\u0003H\u0016J\"\u0010\u00cd\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00cc\u0003H\u0016J\u0012\u0010\u00ce\u0003\u001a\u00020p2\u0007\u0010\u0005\u001a\u00030\u00cf\u0003H\u0016J\"\u0010\u00d0\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00cf\u0003H\u0016J\u0013\u0010\u00d1\u0003\u001a\u00030\u00fb\u00022\u0007\u0010\u0005\u001a\u00030\u00fb\u0002H\u0016J\u0012\u0010\u00d2\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00fb\u0002H\u0016J\"\u0010\u00d3\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00fb\u0002H\u0016J\u0015\u0010\u00d4\u0003\u001a\u0005\u0018\u00010\u00fd\u00022\u0007\u0010\u0005\u001a\u00030\u00fb\u0002H\u0016J\u0013\u0010\u00d5\u0003\u001a\u00030\u00d6\u00032\u0007\u0010\u0005\u001a\u00030\u00d6\u0003H\u0016J\u0013\u0010\u00d7\u0003\u001a\u00030\u00d6\u00032\u0007\u0010\u0005\u001a\u00030\u00d8\u0003H\u0016J\"\u0010\u00d9\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00d8\u0003H\u0016J\u0012\u0010\u00da\u0003\u001a\u00020%2\u0007\u0010\u0005\u001a\u00030\u00d8\u0003H\u0016J\u0013\u0010\u00db\u0003\u001a\u00030\u00d6\u00032\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\u0015\u0010\u00dd\u0003\u001a\u0005\u0018\u00010\u0089\u00022\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\"\u0010\u00de\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\u0012\u0010\u00df\u0003\u001a\u00020N2\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\u0015\u0010\u00e0\u0003\u001a\u0005\u0018\u00010\u00b3\u00032\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\u0014\u0010\u00e1\u0003\u001a\u0004\u0018\u00010\f2\u0007\u0010\u0005\u001a\u00030\u00dc\u0003H\u0016J\u0013\u0010\u00e2\u0003\u001a\u00030\u00d6\u00032\u0007\u0010\u0005\u001a\u00030\u00e3\u0003H\u0016J\u0018\u0010\u00e4\u0003\u001a\b\u0012\u0004\u0012\u00020\f0)2\u0007\u0010\u0005\u001a\u00030\u00e3\u0003H\u0016J\"\u0010\u00e5\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e3\u0003H\u0016J\u0012\u0010\u00e6\u0003\u001a\u0002012\u0007\u0010\u0005\u001a\u00030\u00e3\u0003H\u0016J\u0013\u0010\u00e7\u0003\u001a\u00030\u00d6\u00032\u0007\u0010\u0005\u001a\u00030\u00e8\u0003H\u0016J\u0012\u0010\u00e9\u0003\u001a\u00020\f2\u0007\u0010\u0005\u001a\u00030\u00e8\u0003H\u0016J\"\u0010\u00ea\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00e8\u0003H\u0016J\u0013\u0010\u00eb\u0003\u001a\u00030\u00bf\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0013\u0010\u00ec\u0003\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\"\u0010\u00ed\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0013\u0010\u00ee\u0003\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0013\u0010\u00ef\u0003\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0013\u0010\u00f0\u0003\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0013\u0010\u00f1\u0003\u001a\u00030\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0015\u0010\u00f2\u0003\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0001H\u0016J\u0011\u0010\u00f3\u0003\u001a\u00020w2\u0006\u0010\u0005\u001a\u00020wH\u0016J\u0012\u0010\u00f4\u0003\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00f5\u0003H\u0016J\"\u0010\u00f6\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00f5\u0003H\u0016J\u0012\u0010\u00f7\u0003\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00f8\u0003H\u0016J\"\u0010\u00f9\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00f8\u0003H\u0016J\u0012\u0010\u00fa\u0003\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00fb\u0003H\u0016J\"\u0010\u00fc\u0003\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00fb\u0003H\u0016J\u0012\u0010\u00fd\u0003\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00fe\u0003H\u0016J\u0015\u0010\u00ff\u0003\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00fe\u0003H\u0016J\"\u0010\u0080\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00fe\u0003H\u0016J\u0012\u0010\u0081\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0082\u0004H\u0016J\u0015\u0010\u0083\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u0082\u0004H\u0016J\"\u0010\u0084\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0082\u0004H\u0016J\u0012\u0010\u0085\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0086\u0004H\u0016J\"\u0010\u0087\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0086\u0004H\u0016J\u0012\u0010\u0088\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0089\u0004H\u0016J\"\u0010\u008a\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0089\u0004H\u0016J\u0012\u0010\u008b\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u008c\u0004H\u0016J\"\u0010\u008d\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u008c\u0004H\u0016J\u0015\u0010\u008e\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u008c\u0004H\u0016J\u0015\u0010\u008f\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u008c\u0004H\u0016J\u0012\u0010\u0090\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0091\u0004H\u0016J\"\u0010\u0092\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0091\u0004H\u0016J\u0012\u0010\u0093\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0094\u0004H\u0016J\"\u0010\u0095\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0094\u0004H\u0016J\u0015\u0010\u0096\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u0094\u0004H\u0016J\u0012\u0010\u0097\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u0098\u0004H\u0016J\"\u0010\u0099\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u0098\u0004H\u0016J\u0012\u0010\u009a\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u009b\u0004H\u0016J\"\u0010\u009c\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u009b\u0004H\u0016J\u0012\u0010\u009d\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u009e\u0004H\u0016J\"\u0010\u009f\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u009e\u0004H\u0016J\u0012\u0010\u00a0\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00a1\u0004H\u0016J\"\u0010\u00a2\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a1\u0004H\u0016J\u0012\u0010\u00a3\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00a4\u0004H\u0016J\"\u0010\u00a5\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a4\u0004H\u0016J\u0015\u0010\u00a6\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00a4\u0004H\u0016J\u0015\u0010\u00a7\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00a4\u0004H\u0016J\u0012\u0010\u00a8\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00a9\u0004H\u0016J\"\u0010\u00aa\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00a9\u0004H\u0016J\u0012\u0010\u00ab\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00ac\u0004H\u0016J\"\u0010\u00ad\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00ac\u0004H\u0016J\u0012\u0010\u00ae\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00af\u0004H\u0016J\"\u0010\u00b0\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00af\u0004H\u0016J\u0012\u0010\u00b1\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00b2\u0004H\u0016J\"\u0010\u00b3\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b2\u0004H\u0016J\u0012\u0010\u00b4\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00b5\u0004H\u0016J\"\u0010\u00b6\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b5\u0004H\u0016J\u0012\u0010\u00b7\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00b8\u0004H\u0016J\"\u0010\u00b9\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00b8\u0004H\u0016J\u0012\u0010\u00ba\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00bb\u0004H\u0016J\"\u0010\u00bc\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bb\u0004H\u0016J\u0015\u0010\u00bd\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bb\u0004H\u0016J\u0012\u0010\u00be\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00bf\u0004H\u0016J\"\u0010\u00c0\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00bf\u0004H\u0016J\u0015\u0010\u00c1\u0004\u001a\u0005\u0018\u00010\u0081\u00012\u0007\u0010\u0005\u001a\u00030\u00bf\u0004H\u0016J\u0012\u0010\u00c2\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00c3\u0004H\u0016J\"\u0010\u00c4\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c3\u0004H\u0016J\u0012\u0010\u00c5\u0004\u001a\u00020w2\u0007\u0010\u0005\u001a\u00030\u00c6\u0004H\u0016J\"\u0010\u00c7\u0004\u001a\u0012\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020\t0\u0007j\u0002`\n2\u0007\u0010\u0005\u001a\u00030\u00c6\u0004H\u0016\u00a8\u0006\u00c8\u0004"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$VisitorTransform;", "Lorg/partiql/pig/runtime/DomainVisitorTransformBase;", "()V", "transformAssignment", "Lorg/partiql/lang/domains/PartiqlAst$Assignment;", "node", "transformAssignment_metas", "", "", "", "Lcom/amazon/ionelement/api/MetaContainer;", "transformAssignment_target", "Lorg/partiql/lang/domains/PartiqlAst$Expr;", "transformAssignment_value", "transformCaseSensitivity", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity;", "transformCaseSensitivityCaseInsensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseInsensitive;", "transformCaseSensitivityCaseInsensitive_metas", "transformCaseSensitivityCaseSensitive", "Lorg/partiql/lang/domains/PartiqlAst$CaseSensitivity$CaseSensitive;", "transformCaseSensitivityCaseSensitive_metas", "transformColumnComponent", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent;", "transformColumnComponentReturningColumn", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningColumn;", "transformColumnComponentReturningColumn_expr", "transformColumnComponentReturningColumn_metas", "transformColumnComponentReturningWildcard", "Lorg/partiql/lang/domains/PartiqlAst$ColumnComponent$ReturningWildcard;", "transformColumnComponentReturningWildcard_metas", "transformConflictAction", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction;", "transformConflictActionDoNothing", "Lorg/partiql/lang/domains/PartiqlAst$ConflictAction$DoNothing;", "transformConflictActionDoNothing_metas", "transformDdlOp", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp;", "transformDdlOpCreateIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateIndex;", "transformDdlOpCreateIndex_fields", "", "transformDdlOpCreateIndex_indexName", "Lorg/partiql/lang/domains/PartiqlAst$Identifier;", "transformDdlOpCreateIndex_metas", "transformDdlOpCreateTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$CreateTable;", "transformDdlOpCreateTable_metas", "transformDdlOpCreateTable_tableName", "Lorg/partiql/pig/runtime/SymbolPrimitive;", "transformDdlOpDropIndex", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropIndex;", "transformDdlOpDropIndex_keys", "transformDdlOpDropIndex_metas", "transformDdlOpDropIndex_table", "transformDdlOpDropTable", "Lorg/partiql/lang/domains/PartiqlAst$DdlOp$DropTable;", "transformDdlOpDropTable_metas", "transformDdlOpDropTable_tableName", "transformDmlOp", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp;", "transformDmlOpDelete", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Delete;", "transformDmlOpDelete_metas", "transformDmlOpInsert", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Insert;", "transformDmlOpInsertValue", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$InsertValue;", "transformDmlOpInsertValue_index", "transformDmlOpInsertValue_metas", "transformDmlOpInsertValue_onConflict", "Lorg/partiql/lang/domains/PartiqlAst$OnConflict;", "transformDmlOpInsertValue_target", "transformDmlOpInsertValue_value", "transformDmlOpInsert_metas", "transformDmlOpInsert_target", "transformDmlOpInsert_values", "transformDmlOpList", "Lorg/partiql/lang/domains/PartiqlAst$DmlOpList;", "transformDmlOpList_metas", "transformDmlOpList_ops", "transformDmlOpRemove", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Remove;", "transformDmlOpRemove_metas", "transformDmlOpRemove_target", "transformDmlOpSet", "Lorg/partiql/lang/domains/PartiqlAst$DmlOp$Set;", "transformDmlOpSet_assignment", "transformDmlOpSet_metas", "transformExpr", "transformExprAnd", "Lorg/partiql/lang/domains/PartiqlAst$Expr$And;", "transformExprAnd_metas", "transformExprAnd_operands", "transformExprBag", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Bag;", "transformExprBag_metas", "transformExprBag_values", "transformExprBetween", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Between;", "transformExprBetween_from", "transformExprBetween_metas", "transformExprBetween_to", "transformExprBetween_value", "transformExprCall", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Call;", "transformExprCallAgg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$CallAgg;", "transformExprCallAgg_arg", "transformExprCallAgg_funcName", "transformExprCallAgg_metas", "transformExprCallAgg_setq", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier;", "transformExprCall_args", "transformExprCall_funcName", "transformExprCall_metas", "transformExprCast", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Cast;", "transformExprCast_asType", "Lorg/partiql/lang/domains/PartiqlAst$Type;", "transformExprCast_metas", "transformExprCast_value", "transformExprConcat", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Concat;", "transformExprConcat_metas", "transformExprConcat_operands", "transformExprDate", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Date;", "transformExprDate_day", "Lorg/partiql/pig/runtime/LongPrimitive;", "transformExprDate_metas", "transformExprDate_month", "transformExprDate_year", "transformExprDivide", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Divide;", "transformExprDivide_metas", "transformExprDivide_operands", "transformExprEq", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Eq;", "transformExprEq_metas", "transformExprEq_operands", "transformExprExcept", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Except;", "transformExprExcept_metas", "transformExprExcept_operands", "transformExprExcept_setq", "transformExprGt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gt;", "transformExprGt_metas", "transformExprGt_operands", "transformExprGte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Gte;", "transformExprGte_metas", "transformExprGte_operands", "transformExprId", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Id;", "transformExprId_case", "transformExprId_metas", "transformExprId_name", "transformExprId_qualifier", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier;", "transformExprInCollection", "Lorg/partiql/lang/domains/PartiqlAst$Expr$InCollection;", "transformExprInCollection_metas", "transformExprInCollection_operands", "transformExprIntersect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Intersect;", "transformExprIntersect_metas", "transformExprIntersect_operands", "transformExprIntersect_setq", "transformExprIsType", "Lorg/partiql/lang/domains/PartiqlAst$Expr$IsType;", "transformExprIsType_metas", "transformExprIsType_type", "transformExprIsType_value", "transformExprLike", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Like;", "transformExprLike_escape", "transformExprLike_metas", "transformExprLike_pattern", "transformExprLike_value", "transformExprList", "Lorg/partiql/lang/domains/PartiqlAst$Expr$List;", "transformExprList_metas", "transformExprList_values", "transformExprLit", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lit;", "transformExprLitTime", "Lorg/partiql/lang/domains/PartiqlAst$Expr$LitTime;", "transformExprLitTime_metas", "transformExprLitTime_value", "Lorg/partiql/lang/domains/PartiqlAst$TimeValue;", "transformExprLit_metas", "transformExprLit_value", "Lcom/amazon/ionelement/api/AnyElement;", "transformExprLt", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lt;", "transformExprLt_metas", "transformExprLt_operands", "transformExprLte", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Lte;", "transformExprLte_metas", "transformExprLte_operands", "transformExprMinus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Minus;", "transformExprMinus_metas", "transformExprMinus_operands", "transformExprMissing", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Missing;", "transformExprMissing_metas", "transformExprModulo", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Modulo;", "transformExprModulo_metas", "transformExprModulo_operands", "transformExprNe", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Ne;", "transformExprNe_metas", "transformExprNe_operands", "transformExprNeg", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Neg;", "transformExprNeg_expr", "transformExprNeg_metas", "transformExprNot", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Not;", "transformExprNot_expr", "transformExprNot_metas", "transformExprOr", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Or;", "transformExprOr_metas", "transformExprOr_operands", "transformExprPair", "Lorg/partiql/lang/domains/PartiqlAst$ExprPair;", "transformExprPairList", "Lorg/partiql/lang/domains/PartiqlAst$ExprPairList;", "transformExprPairList_metas", "transformExprPairList_pairs", "transformExprPair_first", "transformExprPair_metas", "transformExprPair_second", "transformExprParameter", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Parameter;", "transformExprParameter_index", "transformExprParameter_metas", "transformExprPath", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Path;", "transformExprPath_metas", "transformExprPath_root", "transformExprPath_steps", "Lorg/partiql/lang/domains/PartiqlAst$PathStep;", "transformExprPlus", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Plus;", "transformExprPlus_metas", "transformExprPlus_operands", "transformExprPos", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Pos;", "transformExprPos_expr", "transformExprPos_metas", "transformExprSearchedCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SearchedCase;", "transformExprSearchedCase_cases", "transformExprSearchedCase_default", "transformExprSearchedCase_metas", "transformExprSelect", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Select;", "transformExprSelect_from", "Lorg/partiql/lang/domains/PartiqlAst$FromSource;", "transformExprSelect_fromLet", "Lorg/partiql/lang/domains/PartiqlAst$Let;", "transformExprSelect_group", "Lorg/partiql/lang/domains/PartiqlAst$GroupBy;", "transformExprSelect_having", "transformExprSelect_limit", "transformExprSelect_metas", "transformExprSelect_order", "Lorg/partiql/lang/domains/PartiqlAst$OrderBy;", "transformExprSelect_project", "Lorg/partiql/lang/domains/PartiqlAst$Projection;", "transformExprSelect_setq", "transformExprSelect_where", "transformExprSexp", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Sexp;", "transformExprSexp_metas", "transformExprSexp_values", "transformExprSimpleCase", "Lorg/partiql/lang/domains/PartiqlAst$Expr$SimpleCase;", "transformExprSimpleCase_cases", "transformExprSimpleCase_default", "transformExprSimpleCase_expr", "transformExprSimpleCase_metas", "transformExprStruct", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Struct;", "transformExprStruct_fields", "transformExprStruct_metas", "transformExprTimes", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Times;", "transformExprTimes_metas", "transformExprTimes_operands", "transformExprUnion", "Lorg/partiql/lang/domains/PartiqlAst$Expr$Union;", "transformExprUnion_metas", "transformExprUnion_operands", "transformExprUnion_setq", "transformFromSource", "transformFromSourceJoin", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Join;", "transformFromSourceJoin_left", "transformFromSourceJoin_metas", "transformFromSourceJoin_predicate", "transformFromSourceJoin_right", "transformFromSourceJoin_type", "Lorg/partiql/lang/domains/PartiqlAst$JoinType;", "transformFromSourceScan", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Scan;", "transformFromSourceScan_asAlias", "transformFromSourceScan_atAlias", "transformFromSourceScan_byAlias", "transformFromSourceScan_expr", "transformFromSourceScan_metas", "transformFromSourceUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$FromSource$Unpivot;", "transformFromSourceUnpivot_asAlias", "transformFromSourceUnpivot_atAlias", "transformFromSourceUnpivot_byAlias", "transformFromSourceUnpivot_expr", "transformFromSourceUnpivot_metas", "transformGroupBy", "transformGroupBy_groupAsAlias", "transformGroupBy_keyList", "Lorg/partiql/lang/domains/PartiqlAst$GroupKeyList;", "transformGroupBy_metas", "transformGroupBy_strategy", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy;", "transformGroupKey", "Lorg/partiql/lang/domains/PartiqlAst$GroupKey;", "transformGroupKeyList", "transformGroupKeyList_keys", "transformGroupKeyList_metas", "transformGroupKey_asAlias", "transformGroupKey_expr", "transformGroupKey_metas", "transformGroupingStrategy", "transformGroupingStrategyGroupFull", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupFull;", "transformGroupingStrategyGroupFull_metas", "transformGroupingStrategyGroupPartial", "Lorg/partiql/lang/domains/PartiqlAst$GroupingStrategy$GroupPartial;", "transformGroupingStrategyGroupPartial_metas", "transformIdentifier", "transformIdentifier_case", "transformIdentifier_metas", "transformIdentifier_name", "transformJoinType", "transformJoinTypeFull", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Full;", "transformJoinTypeFull_metas", "transformJoinTypeInner", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Inner;", "transformJoinTypeInner_metas", "transformJoinTypeLeft", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Left;", "transformJoinTypeLeft_metas", "transformJoinTypeRight", "Lorg/partiql/lang/domains/PartiqlAst$JoinType$Right;", "transformJoinTypeRight_metas", "transformLet", "transformLetBinding", "Lorg/partiql/lang/domains/PartiqlAst$LetBinding;", "transformLetBinding_expr", "transformLetBinding_metas", "transformLetBinding_name", "transformLet_letBindings", "transformLet_metas", "transformOnConflict", "transformOnConflict_conflictAction", "transformOnConflict_expr", "transformOnConflict_metas", "transformOrderBy", "transformOrderBy_metas", "transformOrderBy_sortSpecs", "Lorg/partiql/lang/domains/PartiqlAst$SortSpec;", "transformOrderingSpec", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec;", "transformOrderingSpecAsc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Asc;", "transformOrderingSpecAsc_metas", "transformOrderingSpecDesc", "Lorg/partiql/lang/domains/PartiqlAst$OrderingSpec$Desc;", "transformOrderingSpecDesc_metas", "transformPathStep", "transformPathStepPathExpr", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathExpr;", "transformPathStepPathExpr_case", "transformPathStepPathExpr_index", "transformPathStepPathExpr_metas", "transformPathStepPathUnpivot", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathUnpivot;", "transformPathStepPathUnpivot_metas", "transformPathStepPathWildcard", "Lorg/partiql/lang/domains/PartiqlAst$PathStep$PathWildcard;", "transformPathStepPathWildcard_metas", "transformProjectItem", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem;", "transformProjectItemProjectAll", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectAll;", "transformProjectItemProjectAll_expr", "transformProjectItemProjectAll_metas", "transformProjectItemProjectExpr", "Lorg/partiql/lang/domains/PartiqlAst$ProjectItem$ProjectExpr;", "transformProjectItemProjectExpr_asAlias", "transformProjectItemProjectExpr_expr", "transformProjectItemProjectExpr_metas", "transformProjection", "transformProjectionProjectList", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectList;", "transformProjectionProjectList_metas", "transformProjectionProjectList_projectItems", "transformProjectionProjectPivot", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectPivot;", "transformProjectionProjectPivot_key", "transformProjectionProjectPivot_metas", "transformProjectionProjectPivot_value", "transformProjectionProjectStar", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectStar;", "transformProjectionProjectStar_metas", "transformProjectionProjectValue", "Lorg/partiql/lang/domains/PartiqlAst$Projection$ProjectValue;", "transformProjectionProjectValue_metas", "transformProjectionProjectValue_value", "transformReturningElem", "Lorg/partiql/lang/domains/PartiqlAst$ReturningElem;", "transformReturningElem_column", "transformReturningElem_mapping", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping;", "transformReturningElem_metas", "transformReturningExpr", "Lorg/partiql/lang/domains/PartiqlAst$ReturningExpr;", "transformReturningExpr_elems", "transformReturningExpr_metas", "transformReturningMapping", "transformReturningMappingAllNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllNew;", "transformReturningMappingAllNew_metas", "transformReturningMappingAllOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$AllOld;", "transformReturningMappingAllOld_metas", "transformReturningMappingModifiedNew", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedNew;", "transformReturningMappingModifiedNew_metas", "transformReturningMappingModifiedOld", "Lorg/partiql/lang/domains/PartiqlAst$ReturningMapping$ModifiedOld;", "transformReturningMappingModifiedOld_metas", "transformScopeQualifier", "transformScopeQualifierLocalsFirst", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$LocalsFirst;", "transformScopeQualifierLocalsFirst_metas", "transformScopeQualifierUnqualified", "Lorg/partiql/lang/domains/PartiqlAst$ScopeQualifier$Unqualified;", "transformScopeQualifierUnqualified_metas", "transformSetQuantifier", "transformSetQuantifierAll", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$All;", "transformSetQuantifierAll_metas", "transformSetQuantifierDistinct", "Lorg/partiql/lang/domains/PartiqlAst$SetQuantifier$Distinct;", "transformSetQuantifierDistinct_metas", "transformSortSpec", "transformSortSpec_expr", "transformSortSpec_metas", "transformSortSpec_orderingSpec", "transformStatement", "Lorg/partiql/lang/domains/PartiqlAst$Statement;", "transformStatementDdl", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Ddl;", "transformStatementDdl_metas", "transformStatementDdl_op", "transformStatementDml", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Dml;", "transformStatementDml_from", "transformStatementDml_metas", "transformStatementDml_operations", "transformStatementDml_returning", "transformStatementDml_where", "transformStatementExec", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Exec;", "transformStatementExec_args", "transformStatementExec_metas", "transformStatementExec_procedureName", "transformStatementQuery", "Lorg/partiql/lang/domains/PartiqlAst$Statement$Query;", "transformStatementQuery_expr", "transformStatementQuery_metas", "transformTimeValue", "transformTimeValue_hour", "transformTimeValue_metas", "transformTimeValue_minute", "transformTimeValue_nano", "transformTimeValue_precision", "transformTimeValue_second", "transformTimeValue_tzMinutes", "transformType", "transformTypeBagType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BagType;", "transformTypeBagType_metas", "transformTypeBlobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BlobType;", "transformTypeBlobType_metas", "transformTypeBooleanType", "Lorg/partiql/lang/domains/PartiqlAst$Type$BooleanType;", "transformTypeBooleanType_metas", "transformTypeCharacterType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterType;", "transformTypeCharacterType_length", "transformTypeCharacterType_metas", "transformTypeCharacterVaryingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$CharacterVaryingType;", "transformTypeCharacterVaryingType_length", "transformTypeCharacterVaryingType_metas", "transformTypeClobType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ClobType;", "transformTypeClobType_metas", "transformTypeDateType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DateType;", "transformTypeDateType_metas", "transformTypeDecimalType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DecimalType;", "transformTypeDecimalType_metas", "transformTypeDecimalType_precision", "transformTypeDecimalType_scale", "transformTypeDoublePrecisionType", "Lorg/partiql/lang/domains/PartiqlAst$Type$DoublePrecisionType;", "transformTypeDoublePrecisionType_metas", "transformTypeFloatType", "Lorg/partiql/lang/domains/PartiqlAst$Type$FloatType;", "transformTypeFloatType_metas", "transformTypeFloatType_precision", "transformTypeIntegerType", "Lorg/partiql/lang/domains/PartiqlAst$Type$IntegerType;", "transformTypeIntegerType_metas", "transformTypeListType", "Lorg/partiql/lang/domains/PartiqlAst$Type$ListType;", "transformTypeListType_metas", "transformTypeMissingType", "Lorg/partiql/lang/domains/PartiqlAst$Type$MissingType;", "transformTypeMissingType_metas", "transformTypeNullType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NullType;", "transformTypeNullType_metas", "transformTypeNumericType", "Lorg/partiql/lang/domains/PartiqlAst$Type$NumericType;", "transformTypeNumericType_metas", "transformTypeNumericType_precision", "transformTypeNumericType_scale", "transformTypeRealType", "Lorg/partiql/lang/domains/PartiqlAst$Type$RealType;", "transformTypeRealType_metas", "transformTypeSexpType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SexpType;", "transformTypeSexpType_metas", "transformTypeSmallintType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SmallintType;", "transformTypeSmallintType_metas", "transformTypeStringType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StringType;", "transformTypeStringType_metas", "transformTypeStructType", "Lorg/partiql/lang/domains/PartiqlAst$Type$StructType;", "transformTypeStructType_metas", "transformTypeSymbolType", "Lorg/partiql/lang/domains/PartiqlAst$Type$SymbolType;", "transformTypeSymbolType_metas", "transformTypeTimeType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeType;", "transformTypeTimeType_metas", "transformTypeTimeType_precision", "transformTypeTimeWithTimeZoneType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimeWithTimeZoneType;", "transformTypeTimeWithTimeZoneType_metas", "transformTypeTimeWithTimeZoneType_precision", "transformTypeTimestampType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TimestampType;", "transformTypeTimestampType_metas", "transformTypeTupleType", "Lorg/partiql/lang/domains/PartiqlAst$Type$TupleType;", "transformTypeTupleType_metas", "lang"})
    public static abstract class VisitorTransform
    extends DomainVisitorTransformBase {
        @NotNull
        public TimeValue transformTimeValue(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_hour = this.transformTimeValue_hour(node);
            LongPrimitive new_minute = this.transformTimeValue_minute(node);
            LongPrimitive new_second = this.transformTimeValue_second(node);
            LongPrimitive new_nano = this.transformTimeValue_nano(node);
            LongPrimitive new_precision = this.transformTimeValue_precision(node);
            LongPrimitive new_tzMinutes = this.transformTimeValue_tzMinutes(node);
            Map<String, Object> new_metas = this.transformTimeValue_metas(node);
            return node.getHour() != new_hour || node.getMinute() != new_minute || node.getSecond() != new_second || node.getNano() != new_nano || node.getPrecision() != new_precision || node.getTzMinutes() != new_tzMinutes || node.getMetas() != new_metas ? new TimeValue(new_hour, new_minute, new_second, new_nano, new_precision, new_tzMinutes, new_metas) : node;
        }

        @NotNull
        public LongPrimitive transformTimeValue_hour(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getHour());
        }

        @NotNull
        public LongPrimitive transformTimeValue_minute(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getMinute());
        }

        @NotNull
        public LongPrimitive transformTimeValue_second(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getSecond());
        }

        @NotNull
        public LongPrimitive transformTimeValue_nano(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getNano());
        }

        @NotNull
        public LongPrimitive transformTimeValue_precision(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getPrecision());
        }

        @Nullable
        public LongPrimitive transformTimeValue_tzMinutes(@NotNull TimeValue node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getTzMinutes();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTimeValue_metas(@NotNull TimeValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Let transformLet(@NotNull Let node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<LetBinding> new_letBindings = this.transformLet_letBindings(node);
            Map<String, Object> new_metas = this.transformLet_metas(node);
            return node.getLetBindings() != new_letBindings || node.getMetas() != new_metas ? new Let(new_letBindings, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<LetBinding> transformLet_letBindings(@NotNull Let node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getLetBindings();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                LetBinding letBinding = (LetBinding)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                LetBinding letBinding2 = this.transformLetBinding((LetBinding)it);
                collection.add(letBinding2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformLet_metas(@NotNull Let node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public LetBinding transformLetBinding(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformLetBinding_expr(node);
            SymbolPrimitive new_name = this.transformLetBinding_name(node);
            Map<String, Object> new_metas = this.transformLetBinding_metas(node);
            return node.getExpr() != new_expr || node.getName() != new_name || node.getMetas() != new_metas ? new LetBinding(new_expr, new_name, new_metas) : node;
        }

        @NotNull
        public Expr transformLetBinding_expr(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public SymbolPrimitive transformLetBinding_name(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getName());
        }

        @NotNull
        public Map<String, Object> transformLetBinding_metas(@NotNull LetBinding node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ExprPair transformExprPair(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_first = this.transformExprPair_first(node);
            Expr new_second = this.transformExprPair_second(node);
            Map<String, Object> new_metas = this.transformExprPair_metas(node);
            return node.getFirst() != new_first || node.getSecond() != new_second || node.getMetas() != new_metas ? new ExprPair(new_first, new_second, new_metas) : node;
        }

        @NotNull
        public Expr transformExprPair_first(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getFirst());
        }

        @NotNull
        public Expr transformExprPair_second(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getSecond());
        }

        @NotNull
        public Map<String, Object> transformExprPair_metas(@NotNull ExprPair node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ExprPairList transformExprPairList(@NotNull ExprPairList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<ExprPair> new_pairs = this.transformExprPairList_pairs(node);
            Map<String, Object> new_metas = this.transformExprPairList_metas(node);
            return node.getPairs() != new_pairs || node.getMetas() != new_metas ? new ExprPairList(new_pairs, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<ExprPair> transformExprPairList_pairs(@NotNull ExprPairList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getPairs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                ExprPair exprPair2 = this.transformExprPair((ExprPair)it);
                collection.add(exprPair2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprPairList_metas(@NotNull ExprPairList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public GroupBy transformGroupBy(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            GroupingStrategy new_strategy = this.transformGroupBy_strategy(node);
            GroupKeyList new_keyList = this.transformGroupBy_keyList(node);
            SymbolPrimitive new_groupAsAlias = this.transformGroupBy_groupAsAlias(node);
            Map<String, Object> new_metas = this.transformGroupBy_metas(node);
            return node.getStrategy() != new_strategy || node.getKeyList() != new_keyList || node.getGroupAsAlias() != new_groupAsAlias || node.getMetas() != new_metas ? new GroupBy(new_strategy, new_keyList, new_groupAsAlias, new_metas) : node;
        }

        @NotNull
        public GroupingStrategy transformGroupBy_strategy(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformGroupingStrategy(node.getStrategy());
        }

        @NotNull
        public GroupKeyList transformGroupBy_keyList(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformGroupKeyList(node.getKeyList());
        }

        @Nullable
        public SymbolPrimitive transformGroupBy_groupAsAlias(@NotNull GroupBy node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getGroupAsAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @NotNull
        public Map<String, Object> transformGroupBy_metas(@NotNull GroupBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public GroupKeyList transformGroupKeyList(@NotNull GroupKeyList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<GroupKey> new_keys = this.transformGroupKeyList_keys(node);
            Map<String, Object> new_metas = this.transformGroupKeyList_metas(node);
            return node.getKeys() != new_keys || node.getMetas() != new_metas ? new GroupKeyList(new_keys, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<GroupKey> transformGroupKeyList_keys(@NotNull GroupKeyList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getKeys();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                GroupKey groupKey = (GroupKey)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                GroupKey groupKey2 = this.transformGroupKey((GroupKey)it);
                collection.add(groupKey2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformGroupKeyList_metas(@NotNull GroupKeyList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public GroupKey transformGroupKey(@NotNull GroupKey node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformGroupKey_expr(node);
            SymbolPrimitive new_asAlias = this.transformGroupKey_asAlias(node);
            Map<String, Object> new_metas = this.transformGroupKey_metas(node);
            return node.getExpr() != new_expr || node.getAsAlias() != new_asAlias || node.getMetas() != new_metas ? new GroupKey(new_expr, new_asAlias, new_metas) : node;
        }

        @NotNull
        public Expr transformGroupKey_expr(@NotNull GroupKey node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @Nullable
        public SymbolPrimitive transformGroupKey_asAlias(@NotNull GroupKey node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @NotNull
        public Map<String, Object> transformGroupKey_metas(@NotNull GroupKey node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public OrderBy transformOrderBy(@NotNull OrderBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<SortSpec> new_sortSpecs = this.transformOrderBy_sortSpecs(node);
            Map<String, Object> new_metas = this.transformOrderBy_metas(node);
            return node.getSortSpecs() != new_sortSpecs || node.getMetas() != new_metas ? new OrderBy(new_sortSpecs, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<SortSpec> transformOrderBy_sortSpecs(@NotNull OrderBy node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getSortSpecs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                SortSpec sortSpec = (SortSpec)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                SortSpec sortSpec2 = this.transformSortSpec((SortSpec)it);
                collection.add(sortSpec2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformOrderBy_metas(@NotNull OrderBy node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public SortSpec transformSortSpec(@NotNull SortSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformSortSpec_expr(node);
            OrderingSpec new_orderingSpec = this.transformSortSpec_orderingSpec(node);
            Map<String, Object> new_metas = this.transformSortSpec_metas(node);
            return node.getExpr() != new_expr || node.getOrderingSpec() != new_orderingSpec || node.getMetas() != new_metas ? new SortSpec(new_expr, new_orderingSpec, new_metas) : node;
        }

        @NotNull
        public Expr transformSortSpec_expr(@NotNull SortSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @Nullable
        public OrderingSpec transformSortSpec_orderingSpec(@NotNull SortSpec node) {
            OrderingSpec orderingSpec;
            Intrinsics.checkParameterIsNotNull(node, "node");
            OrderingSpec orderingSpec2 = node.getOrderingSpec();
            if (orderingSpec2 != null) {
                OrderingSpec orderingSpec3 = orderingSpec2;
                boolean bl = false;
                boolean bl2 = false;
                OrderingSpec it = orderingSpec3;
                boolean bl3 = false;
                orderingSpec = this.transformOrderingSpec(it);
            } else {
                orderingSpec = null;
            }
            return orderingSpec;
        }

        @NotNull
        public Map<String, Object> transformSortSpec_metas(@NotNull SortSpec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOpList transformDmlOpList(@NotNull DmlOpList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<DmlOp> new_ops = this.transformDmlOpList_ops(node);
            Map<String, Object> new_metas = this.transformDmlOpList_metas(node);
            return node.getOps() != new_ops || node.getMetas() != new_metas ? new DmlOpList(new_ops, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<DmlOp> transformDmlOpList_ops(@NotNull DmlOpList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                DmlOp dmlOp = (DmlOp)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                DmlOp dmlOp2 = this.transformDmlOp((DmlOp)it);
                collection.add(dmlOp2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformDmlOpList_metas(@NotNull DmlOpList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public OnConflict transformOnConflict(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformOnConflict_expr(node);
            ConflictAction new_conflictAction = this.transformOnConflict_conflictAction(node);
            Map<String, Object> new_metas = this.transformOnConflict_metas(node);
            return node.getExpr() != new_expr || node.getConflictAction() != new_conflictAction || node.getMetas() != new_metas ? new OnConflict(new_expr, new_conflictAction, new_metas) : node;
        }

        @NotNull
        public Expr transformOnConflict_expr(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public ConflictAction transformOnConflict_conflictAction(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformConflictAction(node.getConflictAction());
        }

        @NotNull
        public Map<String, Object> transformOnConflict_metas(@NotNull OnConflict node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningExpr transformReturningExpr(@NotNull ReturningExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<ReturningElem> new_elems = this.transformReturningExpr_elems(node);
            Map<String, Object> new_metas = this.transformReturningExpr_metas(node);
            return node.getElems() != new_elems || node.getMetas() != new_metas ? new ReturningExpr(new_elems, new_metas) : node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<ReturningElem> transformReturningExpr_elems(@NotNull ReturningExpr node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getElems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ReturningElem returningElem = (ReturningElem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                ReturningElem returningElem2 = this.transformReturningElem((ReturningElem)it);
                collection.add(returningElem2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformReturningExpr_metas(@NotNull ReturningExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningElem transformReturningElem(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            ReturningMapping new_mapping = this.transformReturningElem_mapping(node);
            ColumnComponent new_column = this.transformReturningElem_column(node);
            Map<String, Object> new_metas = this.transformReturningElem_metas(node);
            return node.getMapping() != new_mapping || node.getColumn() != new_column || node.getMetas() != new_metas ? new ReturningElem(new_mapping, new_column, new_metas) : node;
        }

        @NotNull
        public ReturningMapping transformReturningElem_mapping(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformReturningMapping(node.getMapping());
        }

        @NotNull
        public ColumnComponent transformReturningElem_column(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformColumnComponent(node.getColumn());
        }

        @NotNull
        public Map<String, Object> transformReturningElem_metas(@NotNull ReturningElem node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Identifier transformIdentifier(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive new_name = this.transformIdentifier_name(node);
            CaseSensitivity new_case = this.transformIdentifier_case(node);
            Map<String, Object> new_metas = this.transformIdentifier_metas(node);
            return node.getName() != new_name || node.getCase() != new_case || node.getMetas() != new_metas ? new Identifier(new_name, new_case, new_metas) : node;
        }

        @NotNull
        public SymbolPrimitive transformIdentifier_name(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getName());
        }

        @NotNull
        public CaseSensitivity transformIdentifier_case(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformCaseSensitivity(node.getCase());
        }

        @NotNull
        public Map<String, Object> transformIdentifier_metas(@NotNull Identifier node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Assignment transformAssignment(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_target = this.transformAssignment_target(node);
            Expr new_value = this.transformAssignment_value(node);
            Map<String, Object> new_metas = this.transformAssignment_metas(node);
            return node.getTarget() != new_target || node.getValue() != new_value || node.getMetas() != new_metas ? new Assignment(new_target, new_value, new_metas) : node;
        }

        @NotNull
        public Expr transformAssignment_target(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getTarget());
        }

        @NotNull
        public Expr transformAssignment_value(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Map<String, Object> transformAssignment_metas(@NotNull Assignment node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Statement transformStatement(@NotNull Statement node) {
            Statement statement;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Statement statement2 = node;
            if (statement2 instanceof Statement.Query) {
                statement = this.transformStatementQuery((Statement.Query)node);
            } else if (statement2 instanceof Statement.Dml) {
                statement = this.transformStatementDml((Statement.Dml)node);
            } else if (statement2 instanceof Statement.Ddl) {
                statement = this.transformStatementDdl((Statement.Ddl)node);
            } else if (statement2 instanceof Statement.Exec) {
                statement = this.transformStatementExec((Statement.Exec)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return statement;
        }

        @NotNull
        public Statement transformStatementQuery(@NotNull Statement.Query node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformStatementQuery_expr(node);
            Map<String, Object> new_metas = this.transformStatementQuery_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (Statement)new Statement.Query(new_expr, new_metas) : (Statement)node;
        }

        @NotNull
        public Expr transformStatementQuery_expr(@NotNull Statement.Query node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformStatementQuery_metas(@NotNull Statement.Query node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Statement transformStatementDml(@NotNull Statement.Dml node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            DmlOpList new_operations = this.transformStatementDml_operations(node);
            FromSource new_from = this.transformStatementDml_from(node);
            Expr new_where = this.transformStatementDml_where(node);
            ReturningExpr new_returning = this.transformStatementDml_returning(node);
            Map<String, Object> new_metas = this.transformStatementDml_metas(node);
            return node.getOperations() != new_operations || node.getFrom() != new_from || node.getWhere() != new_where || node.getReturning() != new_returning || node.getMetas() != new_metas ? (Statement)new Statement.Dml(new_operations, new_from, new_where, new_returning, new_metas) : (Statement)node;
        }

        @NotNull
        public DmlOpList transformStatementDml_operations(@NotNull Statement.Dml node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformDmlOpList(node.getOperations());
        }

        @Nullable
        public FromSource transformStatementDml_from(@NotNull Statement.Dml node) {
            FromSource fromSource;
            Intrinsics.checkParameterIsNotNull(node, "node");
            FromSource fromSource2 = node.getFrom();
            if (fromSource2 != null) {
                FromSource fromSource3 = fromSource2;
                boolean bl = false;
                boolean bl2 = false;
                FromSource it = fromSource3;
                boolean bl3 = false;
                fromSource = this.transformFromSource(it);
            } else {
                fromSource = null;
            }
            return fromSource;
        }

        @Nullable
        public Expr transformStatementDml_where(@NotNull Statement.Dml node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getWhere();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @Nullable
        public ReturningExpr transformStatementDml_returning(@NotNull Statement.Dml node) {
            ReturningExpr returningExpr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            ReturningExpr returningExpr2 = node.getReturning();
            if (returningExpr2 != null) {
                ReturningExpr returningExpr3 = returningExpr2;
                boolean bl = false;
                boolean bl2 = false;
                ReturningExpr it = returningExpr3;
                boolean bl3 = false;
                returningExpr = this.transformReturningExpr(it);
            } else {
                returningExpr = null;
            }
            return returningExpr;
        }

        @NotNull
        public Map<String, Object> transformStatementDml_metas(@NotNull Statement.Dml node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Statement transformStatementDdl(@NotNull Statement.Ddl node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            DdlOp new_op = this.transformStatementDdl_op(node);
            Map<String, Object> new_metas = this.transformStatementDdl_metas(node);
            return node.getOp() != new_op || node.getMetas() != new_metas ? (Statement)new Statement.Ddl(new_op, new_metas) : (Statement)node;
        }

        @NotNull
        public DdlOp transformStatementDdl_op(@NotNull Statement.Ddl node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformDdlOp(node.getOp());
        }

        @NotNull
        public Map<String, Object> transformStatementDdl_metas(@NotNull Statement.Ddl node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Statement transformStatementExec(@NotNull Statement.Exec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive new_procedureName = this.transformStatementExec_procedureName(node);
            List<Expr> new_args = this.transformStatementExec_args(node);
            Map<String, Object> new_metas = this.transformStatementExec_metas(node);
            return node.getProcedureName() != new_procedureName || node.getArgs() != new_args || node.getMetas() != new_metas ? (Statement)new Statement.Exec(new_procedureName, new_args, new_metas) : (Statement)node;
        }

        @NotNull
        public SymbolPrimitive transformStatementExec_procedureName(@NotNull Statement.Exec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getProcedureName());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformStatementExec_args(@NotNull Statement.Exec node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformStatementExec_metas(@NotNull Statement.Exec node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExpr(@NotNull Expr node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node;
            if (expr2 instanceof Expr.Missing) {
                expr = this.transformExprMissing((Expr.Missing)node);
            } else if (expr2 instanceof Expr.Lit) {
                expr = this.transformExprLit((Expr.Lit)node);
            } else if (expr2 instanceof Expr.Id) {
                expr = this.transformExprId((Expr.Id)node);
            } else if (expr2 instanceof Expr.Parameter) {
                expr = this.transformExprParameter((Expr.Parameter)node);
            } else if (expr2 instanceof Expr.Not) {
                expr = this.transformExprNot((Expr.Not)node);
            } else if (expr2 instanceof Expr.Pos) {
                expr = this.transformExprPos((Expr.Pos)node);
            } else if (expr2 instanceof Expr.Neg) {
                expr = this.transformExprNeg((Expr.Neg)node);
            } else if (expr2 instanceof Expr.Plus) {
                expr = this.transformExprPlus((Expr.Plus)node);
            } else if (expr2 instanceof Expr.Minus) {
                expr = this.transformExprMinus((Expr.Minus)node);
            } else if (expr2 instanceof Expr.Times) {
                expr = this.transformExprTimes((Expr.Times)node);
            } else if (expr2 instanceof Expr.Divide) {
                expr = this.transformExprDivide((Expr.Divide)node);
            } else if (expr2 instanceof Expr.Modulo) {
                expr = this.transformExprModulo((Expr.Modulo)node);
            } else if (expr2 instanceof Expr.Concat) {
                expr = this.transformExprConcat((Expr.Concat)node);
            } else if (expr2 instanceof Expr.And) {
                expr = this.transformExprAnd((Expr.And)node);
            } else if (expr2 instanceof Expr.Or) {
                expr = this.transformExprOr((Expr.Or)node);
            } else if (expr2 instanceof Expr.Eq) {
                expr = this.transformExprEq((Expr.Eq)node);
            } else if (expr2 instanceof Expr.Ne) {
                expr = this.transformExprNe((Expr.Ne)node);
            } else if (expr2 instanceof Expr.Gt) {
                expr = this.transformExprGt((Expr.Gt)node);
            } else if (expr2 instanceof Expr.Gte) {
                expr = this.transformExprGte((Expr.Gte)node);
            } else if (expr2 instanceof Expr.Lt) {
                expr = this.transformExprLt((Expr.Lt)node);
            } else if (expr2 instanceof Expr.Lte) {
                expr = this.transformExprLte((Expr.Lte)node);
            } else if (expr2 instanceof Expr.Like) {
                expr = this.transformExprLike((Expr.Like)node);
            } else if (expr2 instanceof Expr.Between) {
                expr = this.transformExprBetween((Expr.Between)node);
            } else if (expr2 instanceof Expr.InCollection) {
                expr = this.transformExprInCollection((Expr.InCollection)node);
            } else if (expr2 instanceof Expr.IsType) {
                expr = this.transformExprIsType((Expr.IsType)node);
            } else if (expr2 instanceof Expr.SimpleCase) {
                expr = this.transformExprSimpleCase((Expr.SimpleCase)node);
            } else if (expr2 instanceof Expr.SearchedCase) {
                expr = this.transformExprSearchedCase((Expr.SearchedCase)node);
            } else if (expr2 instanceof Expr.Struct) {
                expr = this.transformExprStruct((Expr.Struct)node);
            } else if (expr2 instanceof Expr.Bag) {
                expr = this.transformExprBag((Expr.Bag)node);
            } else if (expr2 instanceof Expr.List) {
                expr = this.transformExprList((Expr.List)node);
            } else if (expr2 instanceof Expr.Sexp) {
                expr = this.transformExprSexp((Expr.Sexp)node);
            } else if (expr2 instanceof Expr.Date) {
                expr = this.transformExprDate((Expr.Date)node);
            } else if (expr2 instanceof Expr.LitTime) {
                expr = this.transformExprLitTime((Expr.LitTime)node);
            } else if (expr2 instanceof Expr.Union) {
                expr = this.transformExprUnion((Expr.Union)node);
            } else if (expr2 instanceof Expr.Except) {
                expr = this.transformExprExcept((Expr.Except)node);
            } else if (expr2 instanceof Expr.Intersect) {
                expr = this.transformExprIntersect((Expr.Intersect)node);
            } else if (expr2 instanceof Expr.Path) {
                expr = this.transformExprPath((Expr.Path)node);
            } else if (expr2 instanceof Expr.Call) {
                expr = this.transformExprCall((Expr.Call)node);
            } else if (expr2 instanceof Expr.CallAgg) {
                expr = this.transformExprCallAgg((Expr.CallAgg)node);
            } else if (expr2 instanceof Expr.Cast) {
                expr = this.transformExprCast((Expr.Cast)node);
            } else if (expr2 instanceof Expr.Select) {
                expr = this.transformExprSelect((Expr.Select)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return expr;
        }

        @NotNull
        public Expr transformExprMissing(@NotNull Expr.Missing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformExprMissing_metas(node);
            return node.getMetas() != new_metas ? (Expr)new Expr.Missing(new_metas) : (Expr)node;
        }

        @NotNull
        public Map<String, Object> transformExprMissing_metas(@NotNull Expr.Missing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprLit(@NotNull Expr.Lit node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            AnyElement new_value = this.transformExprLit_value(node);
            Map<String, Object> new_metas = this.transformExprLit_metas(node);
            return node.getValue() != new_value || node.getMetas() != new_metas ? (Expr)new Expr.Lit(new_value, new_metas) : (Expr)node;
        }

        @NotNull
        public AnyElement transformExprLit_value(@NotNull Expr.Lit node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformAnyElement(node.getValue());
        }

        @NotNull
        public Map<String, Object> transformExprLit_metas(@NotNull Expr.Lit node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprId(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive new_name = this.transformExprId_name(node);
            CaseSensitivity new_case = this.transformExprId_case(node);
            ScopeQualifier new_qualifier = this.transformExprId_qualifier(node);
            Map<String, Object> new_metas = this.transformExprId_metas(node);
            return node.getName() != new_name || node.getCase() != new_case || node.getQualifier() != new_qualifier || node.getMetas() != new_metas ? (Expr)new Expr.Id(new_name, new_case, new_qualifier, new_metas) : (Expr)node;
        }

        @NotNull
        public SymbolPrimitive transformExprId_name(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getName());
        }

        @NotNull
        public CaseSensitivity transformExprId_case(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformCaseSensitivity(node.getCase());
        }

        @NotNull
        public ScopeQualifier transformExprId_qualifier(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformScopeQualifier(node.getQualifier());
        }

        @NotNull
        public Map<String, Object> transformExprId_metas(@NotNull Expr.Id node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprParameter(@NotNull Expr.Parameter node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_index = this.transformExprParameter_index(node);
            Map<String, Object> new_metas = this.transformExprParameter_metas(node);
            return node.getIndex() != new_index || node.getMetas() != new_metas ? (Expr)new Expr.Parameter(new_index, new_metas) : (Expr)node;
        }

        @NotNull
        public LongPrimitive transformExprParameter_index(@NotNull Expr.Parameter node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getIndex());
        }

        @NotNull
        public Map<String, Object> transformExprParameter_metas(@NotNull Expr.Parameter node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprNot(@NotNull Expr.Not node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformExprNot_expr(node);
            Map<String, Object> new_metas = this.transformExprNot_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (Expr)new Expr.Not(new_expr, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprNot_expr(@NotNull Expr.Not node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformExprNot_metas(@NotNull Expr.Not node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprPos(@NotNull Expr.Pos node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformExprPos_expr(node);
            Map<String, Object> new_metas = this.transformExprPos_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (Expr)new Expr.Pos(new_expr, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprPos_expr(@NotNull Expr.Pos node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformExprPos_metas(@NotNull Expr.Pos node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprNeg(@NotNull Expr.Neg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformExprNeg_expr(node);
            Map<String, Object> new_metas = this.transformExprNeg_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (Expr)new Expr.Neg(new_expr, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprNeg_expr(@NotNull Expr.Neg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformExprNeg_metas(@NotNull Expr.Neg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprPlus(@NotNull Expr.Plus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprPlus_operands(node);
            Map<String, Object> new_metas = this.transformExprPlus_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Plus(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprPlus_operands(@NotNull Expr.Plus node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprPlus_metas(@NotNull Expr.Plus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprMinus(@NotNull Expr.Minus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprMinus_operands(node);
            Map<String, Object> new_metas = this.transformExprMinus_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Minus(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprMinus_operands(@NotNull Expr.Minus node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprMinus_metas(@NotNull Expr.Minus node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprTimes(@NotNull Expr.Times node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprTimes_operands(node);
            Map<String, Object> new_metas = this.transformExprTimes_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Times(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprTimes_operands(@NotNull Expr.Times node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprTimes_metas(@NotNull Expr.Times node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprDivide(@NotNull Expr.Divide node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprDivide_operands(node);
            Map<String, Object> new_metas = this.transformExprDivide_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Divide(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprDivide_operands(@NotNull Expr.Divide node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprDivide_metas(@NotNull Expr.Divide node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprModulo(@NotNull Expr.Modulo node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprModulo_operands(node);
            Map<String, Object> new_metas = this.transformExprModulo_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Modulo(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprModulo_operands(@NotNull Expr.Modulo node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprModulo_metas(@NotNull Expr.Modulo node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprConcat(@NotNull Expr.Concat node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprConcat_operands(node);
            Map<String, Object> new_metas = this.transformExprConcat_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Concat(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprConcat_operands(@NotNull Expr.Concat node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprConcat_metas(@NotNull Expr.Concat node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprAnd(@NotNull Expr.And node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprAnd_operands(node);
            Map<String, Object> new_metas = this.transformExprAnd_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.And(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprAnd_operands(@NotNull Expr.And node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprAnd_metas(@NotNull Expr.And node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprOr(@NotNull Expr.Or node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprOr_operands(node);
            Map<String, Object> new_metas = this.transformExprOr_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Or(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprOr_operands(@NotNull Expr.Or node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprOr_metas(@NotNull Expr.Or node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprEq(@NotNull Expr.Eq node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprEq_operands(node);
            Map<String, Object> new_metas = this.transformExprEq_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Eq(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprEq_operands(@NotNull Expr.Eq node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprEq_metas(@NotNull Expr.Eq node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprNe(@NotNull Expr.Ne node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprNe_operands(node);
            Map<String, Object> new_metas = this.transformExprNe_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Ne(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprNe_operands(@NotNull Expr.Ne node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprNe_metas(@NotNull Expr.Ne node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprGt(@NotNull Expr.Gt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprGt_operands(node);
            Map<String, Object> new_metas = this.transformExprGt_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Gt(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprGt_operands(@NotNull Expr.Gt node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprGt_metas(@NotNull Expr.Gt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprGte(@NotNull Expr.Gte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprGte_operands(node);
            Map<String, Object> new_metas = this.transformExprGte_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Gte(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprGte_operands(@NotNull Expr.Gte node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprGte_metas(@NotNull Expr.Gte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprLt(@NotNull Expr.Lt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprLt_operands(node);
            Map<String, Object> new_metas = this.transformExprLt_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Lt(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprLt_operands(@NotNull Expr.Lt node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprLt_metas(@NotNull Expr.Lt node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprLte(@NotNull Expr.Lte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprLte_operands(node);
            Map<String, Object> new_metas = this.transformExprLte_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Lte(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprLte_operands(@NotNull Expr.Lte node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprLte_metas(@NotNull Expr.Lte node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprLike(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformExprLike_value(node);
            Expr new_pattern = this.transformExprLike_pattern(node);
            Expr new_escape = this.transformExprLike_escape(node);
            Map<String, Object> new_metas = this.transformExprLike_metas(node);
            return node.getValue() != new_value || node.getPattern() != new_pattern || node.getEscape() != new_escape || node.getMetas() != new_metas ? (Expr)new Expr.Like(new_value, new_pattern, new_escape, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprLike_value(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Expr transformExprLike_pattern(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getPattern());
        }

        @Nullable
        public Expr transformExprLike_escape(@NotNull Expr.Like node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getEscape();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> transformExprLike_metas(@NotNull Expr.Like node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprBetween(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformExprBetween_value(node);
            Expr new_from = this.transformExprBetween_from(node);
            Expr new_to = this.transformExprBetween_to(node);
            Map<String, Object> new_metas = this.transformExprBetween_metas(node);
            return node.getValue() != new_value || node.getFrom() != new_from || node.getTo() != new_to || node.getMetas() != new_metas ? (Expr)new Expr.Between(new_value, new_from, new_to, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprBetween_value(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Expr transformExprBetween_from(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getFrom());
        }

        @NotNull
        public Expr transformExprBetween_to(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getTo());
        }

        @NotNull
        public Map<String, Object> transformExprBetween_metas(@NotNull Expr.Between node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprInCollection(@NotNull Expr.InCollection node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_operands = this.transformExprInCollection_operands(node);
            Map<String, Object> new_metas = this.transformExprInCollection_metas(node);
            return node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.InCollection(new_operands, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprInCollection_operands(@NotNull Expr.InCollection node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprInCollection_metas(@NotNull Expr.InCollection node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprIsType(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformExprIsType_value(node);
            Type new_type = this.transformExprIsType_type(node);
            Map<String, Object> new_metas = this.transformExprIsType_metas(node);
            return node.getValue() != new_value || node.getType() != new_type || node.getMetas() != new_metas ? (Expr)new Expr.IsType(new_value, new_type, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprIsType_value(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Type transformExprIsType_type(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformType(node.getType());
        }

        @NotNull
        public Map<String, Object> transformExprIsType_metas(@NotNull Expr.IsType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprSimpleCase(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformExprSimpleCase_expr(node);
            ExprPairList new_cases = this.transformExprSimpleCase_cases(node);
            Expr new_default = this.transformExprSimpleCase_default(node);
            Map<String, Object> new_metas = this.transformExprSimpleCase_metas(node);
            return node.getExpr() != new_expr || node.getCases() != new_cases || node.getDefault() != new_default || node.getMetas() != new_metas ? (Expr)new Expr.SimpleCase(new_expr, new_cases, new_default, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprSimpleCase_expr(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public ExprPairList transformExprSimpleCase_cases(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExprPairList(node.getCases());
        }

        @Nullable
        public Expr transformExprSimpleCase_default(@NotNull Expr.SimpleCase node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getDefault();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> transformExprSimpleCase_metas(@NotNull Expr.SimpleCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprSearchedCase(@NotNull Expr.SearchedCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            ExprPairList new_cases = this.transformExprSearchedCase_cases(node);
            Expr new_default = this.transformExprSearchedCase_default(node);
            Map<String, Object> new_metas = this.transformExprSearchedCase_metas(node);
            return node.getCases() != new_cases || node.getDefault() != new_default || node.getMetas() != new_metas ? (Expr)new Expr.SearchedCase(new_cases, new_default, new_metas) : (Expr)node;
        }

        @NotNull
        public ExprPairList transformExprSearchedCase_cases(@NotNull Expr.SearchedCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExprPairList(node.getCases());
        }

        @Nullable
        public Expr transformExprSearchedCase_default(@NotNull Expr.SearchedCase node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getDefault();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> transformExprSearchedCase_metas(@NotNull Expr.SearchedCase node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprStruct(@NotNull Expr.Struct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<ExprPair> new_fields = this.transformExprStruct_fields(node);
            Map<String, Object> new_metas = this.transformExprStruct_metas(node);
            return node.getFields() != new_fields || node.getMetas() != new_metas ? (Expr)new Expr.Struct(new_fields, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<ExprPair> transformExprStruct_fields(@NotNull Expr.Struct node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ExprPair exprPair = (ExprPair)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                ExprPair exprPair2 = this.transformExprPair((ExprPair)it);
                collection.add(exprPair2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprStruct_metas(@NotNull Expr.Struct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprBag(@NotNull Expr.Bag node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_values = this.transformExprBag_values(node);
            Map<String, Object> new_metas = this.transformExprBag_metas(node);
            return node.getValues() != new_values || node.getMetas() != new_metas ? (Expr)new Expr.Bag(new_values, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprBag_values(@NotNull Expr.Bag node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprBag_metas(@NotNull Expr.Bag node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprList(@NotNull Expr.List node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_values = this.transformExprList_values(node);
            Map<String, Object> new_metas = this.transformExprList_metas(node);
            return node.getValues() != new_values || node.getMetas() != new_metas ? (Expr)new Expr.List(new_values, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprList_values(@NotNull Expr.List node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprList_metas(@NotNull Expr.List node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprSexp(@NotNull Expr.Sexp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<Expr> new_values = this.transformExprSexp_values(node);
            Map<String, Object> new_metas = this.transformExprSexp_metas(node);
            return node.getValues() != new_values || node.getMetas() != new_metas ? (Expr)new Expr.Sexp(new_values, new_metas) : (Expr)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprSexp_values(@NotNull Expr.Sexp node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getValues();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprSexp_metas(@NotNull Expr.Sexp node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprDate(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_year = this.transformExprDate_year(node);
            LongPrimitive new_month = this.transformExprDate_month(node);
            LongPrimitive new_day = this.transformExprDate_day(node);
            Map<String, Object> new_metas = this.transformExprDate_metas(node);
            return node.getYear() != new_year || node.getMonth() != new_month || node.getDay() != new_day || node.getMetas() != new_metas ? (Expr)new Expr.Date(new_year, new_month, new_day, new_metas) : (Expr)node;
        }

        @NotNull
        public LongPrimitive transformExprDate_year(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getYear());
        }

        @NotNull
        public LongPrimitive transformExprDate_month(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getMonth());
        }

        @NotNull
        public LongPrimitive transformExprDate_day(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformLongPrimitive(node.getDay());
        }

        @NotNull
        public Map<String, Object> transformExprDate_metas(@NotNull Expr.Date node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprLitTime(@NotNull Expr.LitTime node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            TimeValue new_value = this.transformExprLitTime_value(node);
            Map<String, Object> new_metas = this.transformExprLitTime_metas(node);
            return node.getValue() != new_value || node.getMetas() != new_metas ? (Expr)new Expr.LitTime(new_value, new_metas) : (Expr)node;
        }

        @NotNull
        public TimeValue transformExprLitTime_value(@NotNull Expr.LitTime node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformTimeValue(node.getValue());
        }

        @NotNull
        public Map<String, Object> transformExprLitTime_metas(@NotNull Expr.LitTime node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprUnion(@NotNull Expr.Union node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier new_setq = this.transformExprUnion_setq(node);
            List<Expr> new_operands = this.transformExprUnion_operands(node);
            Map<String, Object> new_metas = this.transformExprUnion_metas(node);
            return node.getSetq() != new_setq || node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Union(new_setq, new_operands, new_metas) : (Expr)node;
        }

        @NotNull
        public SetQuantifier transformExprUnion_setq(@NotNull Expr.Union node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSetQuantifier(node.getSetq());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprUnion_operands(@NotNull Expr.Union node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprUnion_metas(@NotNull Expr.Union node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprExcept(@NotNull Expr.Except node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier new_setq = this.transformExprExcept_setq(node);
            List<Expr> new_operands = this.transformExprExcept_operands(node);
            Map<String, Object> new_metas = this.transformExprExcept_metas(node);
            return node.getSetq() != new_setq || node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Except(new_setq, new_operands, new_metas) : (Expr)node;
        }

        @NotNull
        public SetQuantifier transformExprExcept_setq(@NotNull Expr.Except node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSetQuantifier(node.getSetq());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprExcept_operands(@NotNull Expr.Except node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprExcept_metas(@NotNull Expr.Except node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprIntersect(@NotNull Expr.Intersect node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier new_setq = this.transformExprIntersect_setq(node);
            List<Expr> new_operands = this.transformExprIntersect_operands(node);
            Map<String, Object> new_metas = this.transformExprIntersect_metas(node);
            return node.getSetq() != new_setq || node.getOperands() != new_operands || node.getMetas() != new_metas ? (Expr)new Expr.Intersect(new_setq, new_operands, new_metas) : (Expr)node;
        }

        @NotNull
        public SetQuantifier transformExprIntersect_setq(@NotNull Expr.Intersect node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSetQuantifier(node.getSetq());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprIntersect_operands(@NotNull Expr.Intersect node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getOperands();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprIntersect_metas(@NotNull Expr.Intersect node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprPath(@NotNull Expr.Path node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_root = this.transformExprPath_root(node);
            List<PathStep> new_steps = this.transformExprPath_steps(node);
            Map<String, Object> new_metas = this.transformExprPath_metas(node);
            return node.getRoot() != new_root || node.getSteps() != new_steps || node.getMetas() != new_metas ? (Expr)new Expr.Path(new_root, new_steps, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprPath_root(@NotNull Expr.Path node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getRoot());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<PathStep> transformExprPath_steps(@NotNull Expr.Path node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getSteps();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                PathStep pathStep = (PathStep)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                PathStep pathStep2 = this.transformPathStep((PathStep)it);
                collection.add(pathStep2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprPath_metas(@NotNull Expr.Path node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprCall(@NotNull Expr.Call node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive new_funcName = this.transformExprCall_funcName(node);
            List<Expr> new_args = this.transformExprCall_args(node);
            Map<String, Object> new_metas = this.transformExprCall_metas(node);
            return node.getFuncName() != new_funcName || node.getArgs() != new_args || node.getMetas() != new_metas ? (Expr)new Expr.Call(new_funcName, new_args, new_metas) : (Expr)node;
        }

        @NotNull
        public SymbolPrimitive transformExprCall_funcName(@NotNull Expr.Call node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getFuncName());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformExprCall_args(@NotNull Expr.Call node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getArgs();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformExprCall_metas(@NotNull Expr.Call node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprCallAgg(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier new_setq = this.transformExprCallAgg_setq(node);
            SymbolPrimitive new_funcName = this.transformExprCallAgg_funcName(node);
            Expr new_arg = this.transformExprCallAgg_arg(node);
            Map<String, Object> new_metas = this.transformExprCallAgg_metas(node);
            return node.getSetq() != new_setq || node.getFuncName() != new_funcName || node.getArg() != new_arg || node.getMetas() != new_metas ? (Expr)new Expr.CallAgg(new_setq, new_funcName, new_arg, new_metas) : (Expr)node;
        }

        @NotNull
        public SetQuantifier transformExprCallAgg_setq(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSetQuantifier(node.getSetq());
        }

        @NotNull
        public SymbolPrimitive transformExprCallAgg_funcName(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getFuncName());
        }

        @NotNull
        public Expr transformExprCallAgg_arg(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getArg());
        }

        @NotNull
        public Map<String, Object> transformExprCallAgg_metas(@NotNull Expr.CallAgg node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprCast(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformExprCast_value(node);
            Type new_asType = this.transformExprCast_asType(node);
            Map<String, Object> new_metas = this.transformExprCast_metas(node);
            return node.getValue() != new_value || node.getAsType() != new_asType || node.getMetas() != new_metas ? (Expr)new Expr.Cast(new_value, new_asType, new_metas) : (Expr)node;
        }

        @NotNull
        public Expr transformExprCast_value(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Type transformExprCast_asType(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformType(node.getAsType());
        }

        @NotNull
        public Map<String, Object> transformExprCast_metas(@NotNull Expr.Cast node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Expr transformExprSelect(@NotNull Expr.Select node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier new_setq = this.transformExprSelect_setq(node);
            Projection new_project = this.transformExprSelect_project(node);
            FromSource new_from = this.transformExprSelect_from(node);
            Let new_fromLet = this.transformExprSelect_fromLet(node);
            Expr new_where = this.transformExprSelect_where(node);
            GroupBy new_group = this.transformExprSelect_group(node);
            Expr new_having = this.transformExprSelect_having(node);
            OrderBy new_order = this.transformExprSelect_order(node);
            Expr new_limit = this.transformExprSelect_limit(node);
            Map<String, Object> new_metas = this.transformExprSelect_metas(node);
            return node.getSetq() != new_setq || node.getProject() != new_project || node.getFrom() != new_from || node.getFromLet() != new_fromLet || node.getWhere() != new_where || node.getGroup() != new_group || node.getHaving() != new_having || node.getOrder() != new_order || node.getLimit() != new_limit || node.getMetas() != new_metas ? (Expr)new Expr.Select(new_setq, new_project, new_from, new_fromLet, new_where, new_group, new_having, new_order, new_limit, new_metas) : (Expr)node;
        }

        @Nullable
        public SetQuantifier transformExprSelect_setq(@NotNull Expr.Select node) {
            SetQuantifier setQuantifier;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier setQuantifier2 = node.getSetq();
            if (setQuantifier2 != null) {
                SetQuantifier setQuantifier3 = setQuantifier2;
                boolean bl = false;
                boolean bl2 = false;
                SetQuantifier it = setQuantifier3;
                boolean bl3 = false;
                setQuantifier = this.transformSetQuantifier(it);
            } else {
                setQuantifier = null;
            }
            return setQuantifier;
        }

        @NotNull
        public Projection transformExprSelect_project(@NotNull Expr.Select node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformProjection(node.getProject());
        }

        @NotNull
        public FromSource transformExprSelect_from(@NotNull Expr.Select node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformFromSource(node.getFrom());
        }

        @Nullable
        public Let transformExprSelect_fromLet(@NotNull Expr.Select node) {
            Let let2;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Let let3 = node.getFromLet();
            if (let3 != null) {
                Let let4 = let3;
                boolean bl = false;
                boolean bl2 = false;
                Let it = let4;
                boolean bl3 = false;
                let2 = this.transformLet(it);
            } else {
                let2 = null;
            }
            return let2;
        }

        @Nullable
        public Expr transformExprSelect_where(@NotNull Expr.Select node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getWhere();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @Nullable
        public GroupBy transformExprSelect_group(@NotNull Expr.Select node) {
            GroupBy groupBy2;
            Intrinsics.checkParameterIsNotNull(node, "node");
            GroupBy groupBy3 = node.getGroup();
            if (groupBy3 != null) {
                GroupBy groupBy4 = groupBy3;
                boolean bl = false;
                boolean bl2 = false;
                GroupBy it = groupBy4;
                boolean bl3 = false;
                groupBy2 = this.transformGroupBy(it);
            } else {
                groupBy2 = null;
            }
            return groupBy2;
        }

        @Nullable
        public Expr transformExprSelect_having(@NotNull Expr.Select node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getHaving();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @Nullable
        public OrderBy transformExprSelect_order(@NotNull Expr.Select node) {
            OrderBy orderBy;
            Intrinsics.checkParameterIsNotNull(node, "node");
            OrderBy orderBy2 = node.getOrder();
            if (orderBy2 != null) {
                OrderBy orderBy3 = orderBy2;
                boolean bl = false;
                boolean bl2 = false;
                OrderBy it = orderBy3;
                boolean bl3 = false;
                orderBy = this.transformOrderBy(it);
            } else {
                orderBy = null;
            }
            return orderBy;
        }

        @Nullable
        public Expr transformExprSelect_limit(@NotNull Expr.Select node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getLimit();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> transformExprSelect_metas(@NotNull Expr.Select node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public PathStep transformPathStep(@NotNull PathStep node) {
            PathStep pathStep;
            Intrinsics.checkParameterIsNotNull(node, "node");
            PathStep pathStep2 = node;
            if (pathStep2 instanceof PathStep.PathExpr) {
                pathStep = this.transformPathStepPathExpr((PathStep.PathExpr)node);
            } else if (pathStep2 instanceof PathStep.PathWildcard) {
                pathStep = this.transformPathStepPathWildcard((PathStep.PathWildcard)node);
            } else if (pathStep2 instanceof PathStep.PathUnpivot) {
                pathStep = this.transformPathStepPathUnpivot((PathStep.PathUnpivot)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return pathStep;
        }

        @NotNull
        public PathStep transformPathStepPathExpr(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_index = this.transformPathStepPathExpr_index(node);
            CaseSensitivity new_case = this.transformPathStepPathExpr_case(node);
            Map<String, Object> new_metas = this.transformPathStepPathExpr_metas(node);
            return node.getIndex() != new_index || node.getCase() != new_case || node.getMetas() != new_metas ? (PathStep)new PathStep.PathExpr(new_index, new_case, new_metas) : (PathStep)node;
        }

        @NotNull
        public Expr transformPathStepPathExpr_index(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getIndex());
        }

        @NotNull
        public CaseSensitivity transformPathStepPathExpr_case(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformCaseSensitivity(node.getCase());
        }

        @NotNull
        public Map<String, Object> transformPathStepPathExpr_metas(@NotNull PathStep.PathExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public PathStep transformPathStepPathWildcard(@NotNull PathStep.PathWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformPathStepPathWildcard_metas(node);
            return node.getMetas() != new_metas ? (PathStep)new PathStep.PathWildcard(new_metas) : (PathStep)node;
        }

        @NotNull
        public Map<String, Object> transformPathStepPathWildcard_metas(@NotNull PathStep.PathWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public PathStep transformPathStepPathUnpivot(@NotNull PathStep.PathUnpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformPathStepPathUnpivot_metas(node);
            return node.getMetas() != new_metas ? (PathStep)new PathStep.PathUnpivot(new_metas) : (PathStep)node;
        }

        @NotNull
        public Map<String, Object> transformPathStepPathUnpivot_metas(@NotNull PathStep.PathUnpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Projection transformProjection(@NotNull Projection node) {
            Projection projection;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Projection projection2 = node;
            if (projection2 instanceof Projection.ProjectStar) {
                projection = this.transformProjectionProjectStar((Projection.ProjectStar)node);
            } else if (projection2 instanceof Projection.ProjectList) {
                projection = this.transformProjectionProjectList((Projection.ProjectList)node);
            } else if (projection2 instanceof Projection.ProjectPivot) {
                projection = this.transformProjectionProjectPivot((Projection.ProjectPivot)node);
            } else if (projection2 instanceof Projection.ProjectValue) {
                projection = this.transformProjectionProjectValue((Projection.ProjectValue)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return projection;
        }

        @NotNull
        public Projection transformProjectionProjectStar(@NotNull Projection.ProjectStar node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformProjectionProjectStar_metas(node);
            return node.getMetas() != new_metas ? (Projection)new Projection.ProjectStar(new_metas) : (Projection)node;
        }

        @NotNull
        public Map<String, Object> transformProjectionProjectStar_metas(@NotNull Projection.ProjectStar node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Projection transformProjectionProjectList(@NotNull Projection.ProjectList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            List<ProjectItem> new_projectItems = this.transformProjectionProjectList_projectItems(node);
            Map<String, Object> new_metas = this.transformProjectionProjectList_metas(node);
            return node.getProjectItems() != new_projectItems || node.getMetas() != new_metas ? (Projection)new Projection.ProjectList(new_projectItems, new_metas) : (Projection)node;
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<ProjectItem> transformProjectionProjectList_projectItems(@NotNull Projection.ProjectList node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getProjectItems();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                ProjectItem projectItem = (ProjectItem)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                ProjectItem projectItem2 = this.transformProjectItem((ProjectItem)it);
                collection.add(projectItem2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformProjectionProjectList_metas(@NotNull Projection.ProjectList node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Projection transformProjectionProjectPivot(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformProjectionProjectPivot_value(node);
            Expr new_key = this.transformProjectionProjectPivot_key(node);
            Map<String, Object> new_metas = this.transformProjectionProjectPivot_metas(node);
            return node.getValue() != new_value || node.getKey() != new_key || node.getMetas() != new_metas ? (Projection)new Projection.ProjectPivot(new_value, new_key, new_metas) : (Projection)node;
        }

        @NotNull
        public Expr transformProjectionProjectPivot_value(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Expr transformProjectionProjectPivot_key(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getKey());
        }

        @NotNull
        public Map<String, Object> transformProjectionProjectPivot_metas(@NotNull Projection.ProjectPivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Projection transformProjectionProjectValue(@NotNull Projection.ProjectValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_value = this.transformProjectionProjectValue_value(node);
            Map<String, Object> new_metas = this.transformProjectionProjectValue_metas(node);
            return node.getValue() != new_value || node.getMetas() != new_metas ? (Projection)new Projection.ProjectValue(new_value, new_metas) : (Projection)node;
        }

        @NotNull
        public Expr transformProjectionProjectValue_value(@NotNull Projection.ProjectValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @NotNull
        public Map<String, Object> transformProjectionProjectValue_metas(@NotNull Projection.ProjectValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ProjectItem transformProjectItem(@NotNull ProjectItem node) {
            ProjectItem projectItem;
            Intrinsics.checkParameterIsNotNull(node, "node");
            ProjectItem projectItem2 = node;
            if (projectItem2 instanceof ProjectItem.ProjectAll) {
                projectItem = this.transformProjectItemProjectAll((ProjectItem.ProjectAll)node);
            } else if (projectItem2 instanceof ProjectItem.ProjectExpr) {
                projectItem = this.transformProjectItemProjectExpr((ProjectItem.ProjectExpr)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return projectItem;
        }

        @NotNull
        public ProjectItem transformProjectItemProjectAll(@NotNull ProjectItem.ProjectAll node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformProjectItemProjectAll_expr(node);
            Map<String, Object> new_metas = this.transformProjectItemProjectAll_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (ProjectItem)new ProjectItem.ProjectAll(new_expr, new_metas) : (ProjectItem)node;
        }

        @NotNull
        public Expr transformProjectItemProjectAll_expr(@NotNull ProjectItem.ProjectAll node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformProjectItemProjectAll_metas(@NotNull ProjectItem.ProjectAll node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ProjectItem transformProjectItemProjectExpr(@NotNull ProjectItem.ProjectExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformProjectItemProjectExpr_expr(node);
            SymbolPrimitive new_asAlias = this.transformProjectItemProjectExpr_asAlias(node);
            Map<String, Object> new_metas = this.transformProjectItemProjectExpr_metas(node);
            return node.getExpr() != new_expr || node.getAsAlias() != new_asAlias || node.getMetas() != new_metas ? (ProjectItem)new ProjectItem.ProjectExpr(new_expr, new_asAlias, new_metas) : (ProjectItem)node;
        }

        @NotNull
        public Expr transformProjectItemProjectExpr_expr(@NotNull ProjectItem.ProjectExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @Nullable
        public SymbolPrimitive transformProjectItemProjectExpr_asAlias(@NotNull ProjectItem.ProjectExpr node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @NotNull
        public Map<String, Object> transformProjectItemProjectExpr_metas(@NotNull ProjectItem.ProjectExpr node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public FromSource transformFromSource(@NotNull FromSource node) {
            FromSource fromSource;
            Intrinsics.checkParameterIsNotNull(node, "node");
            FromSource fromSource2 = node;
            if (fromSource2 instanceof FromSource.Scan) {
                fromSource = this.transformFromSourceScan((FromSource.Scan)node);
            } else if (fromSource2 instanceof FromSource.Unpivot) {
                fromSource = this.transformFromSourceUnpivot((FromSource.Unpivot)node);
            } else if (fromSource2 instanceof FromSource.Join) {
                fromSource = this.transformFromSourceJoin((FromSource.Join)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return fromSource;
        }

        @NotNull
        public FromSource transformFromSourceScan(@NotNull FromSource.Scan node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformFromSourceScan_expr(node);
            SymbolPrimitive new_asAlias = this.transformFromSourceScan_asAlias(node);
            SymbolPrimitive new_atAlias = this.transformFromSourceScan_atAlias(node);
            SymbolPrimitive new_byAlias = this.transformFromSourceScan_byAlias(node);
            Map<String, Object> new_metas = this.transformFromSourceScan_metas(node);
            return node.getExpr() != new_expr || node.getAsAlias() != new_asAlias || node.getAtAlias() != new_atAlias || node.getByAlias() != new_byAlias || node.getMetas() != new_metas ? (FromSource)new FromSource.Scan(new_expr, new_asAlias, new_atAlias, new_byAlias, new_metas) : (FromSource)node;
        }

        @NotNull
        public Expr transformFromSourceScan_expr(@NotNull FromSource.Scan node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @Nullable
        public SymbolPrimitive transformFromSourceScan_asAlias(@NotNull FromSource.Scan node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @Nullable
        public SymbolPrimitive transformFromSourceScan_atAlias(@NotNull FromSource.Scan node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAtAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @Nullable
        public SymbolPrimitive transformFromSourceScan_byAlias(@NotNull FromSource.Scan node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getByAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @NotNull
        public Map<String, Object> transformFromSourceScan_metas(@NotNull FromSource.Scan node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public FromSource transformFromSourceUnpivot(@NotNull FromSource.Unpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformFromSourceUnpivot_expr(node);
            SymbolPrimitive new_asAlias = this.transformFromSourceUnpivot_asAlias(node);
            SymbolPrimitive new_atAlias = this.transformFromSourceUnpivot_atAlias(node);
            SymbolPrimitive new_byAlias = this.transformFromSourceUnpivot_byAlias(node);
            Map<String, Object> new_metas = this.transformFromSourceUnpivot_metas(node);
            return node.getExpr() != new_expr || node.getAsAlias() != new_asAlias || node.getAtAlias() != new_atAlias || node.getByAlias() != new_byAlias || node.getMetas() != new_metas ? (FromSource)new FromSource.Unpivot(new_expr, new_asAlias, new_atAlias, new_byAlias, new_metas) : (FromSource)node;
        }

        @NotNull
        public Expr transformFromSourceUnpivot_expr(@NotNull FromSource.Unpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @Nullable
        public SymbolPrimitive transformFromSourceUnpivot_asAlias(@NotNull FromSource.Unpivot node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAsAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @Nullable
        public SymbolPrimitive transformFromSourceUnpivot_atAlias(@NotNull FromSource.Unpivot node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getAtAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @Nullable
        public SymbolPrimitive transformFromSourceUnpivot_byAlias(@NotNull FromSource.Unpivot node) {
            SymbolPrimitive symbolPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive symbolPrimitive2 = node.getByAlias();
            if (symbolPrimitive2 != null) {
                SymbolPrimitive symbolPrimitive3 = symbolPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                SymbolPrimitive it = symbolPrimitive3;
                boolean bl3 = false;
                symbolPrimitive = this.transformSymbolPrimitive(it);
            } else {
                symbolPrimitive = null;
            }
            return symbolPrimitive;
        }

        @NotNull
        public Map<String, Object> transformFromSourceUnpivot_metas(@NotNull FromSource.Unpivot node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public FromSource transformFromSourceJoin(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            JoinType new_type = this.transformFromSourceJoin_type(node);
            FromSource new_left = this.transformFromSourceJoin_left(node);
            FromSource new_right = this.transformFromSourceJoin_right(node);
            Expr new_predicate = this.transformFromSourceJoin_predicate(node);
            Map<String, Object> new_metas = this.transformFromSourceJoin_metas(node);
            return node.getType() != new_type || node.getLeft() != new_left || node.getRight() != new_right || node.getPredicate() != new_predicate || node.getMetas() != new_metas ? (FromSource)new FromSource.Join(new_type, new_left, new_right, new_predicate, new_metas) : (FromSource)node;
        }

        @NotNull
        public JoinType transformFromSourceJoin_type(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformJoinType(node.getType());
        }

        @NotNull
        public FromSource transformFromSourceJoin_left(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformFromSource(node.getLeft());
        }

        @NotNull
        public FromSource transformFromSourceJoin_right(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformFromSource(node.getRight());
        }

        @Nullable
        public Expr transformFromSourceJoin_predicate(@NotNull FromSource.Join node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getPredicate();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @NotNull
        public Map<String, Object> transformFromSourceJoin_metas(@NotNull FromSource.Join node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public JoinType transformJoinType(@NotNull JoinType node) {
            JoinType joinType;
            Intrinsics.checkParameterIsNotNull(node, "node");
            JoinType joinType2 = node;
            if (joinType2 instanceof JoinType.Inner) {
                joinType = this.transformJoinTypeInner((JoinType.Inner)node);
            } else if (joinType2 instanceof JoinType.Left) {
                joinType = this.transformJoinTypeLeft((JoinType.Left)node);
            } else if (joinType2 instanceof JoinType.Right) {
                joinType = this.transformJoinTypeRight((JoinType.Right)node);
            } else if (joinType2 instanceof JoinType.Full) {
                joinType = this.transformJoinTypeFull((JoinType.Full)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return joinType;
        }

        @NotNull
        public JoinType transformJoinTypeInner(@NotNull JoinType.Inner node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformJoinTypeInner_metas(node);
            return node.getMetas() != new_metas ? (JoinType)new JoinType.Inner(new_metas) : (JoinType)node;
        }

        @NotNull
        public Map<String, Object> transformJoinTypeInner_metas(@NotNull JoinType.Inner node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public JoinType transformJoinTypeLeft(@NotNull JoinType.Left node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformJoinTypeLeft_metas(node);
            return node.getMetas() != new_metas ? (JoinType)new JoinType.Left(new_metas) : (JoinType)node;
        }

        @NotNull
        public Map<String, Object> transformJoinTypeLeft_metas(@NotNull JoinType.Left node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public JoinType transformJoinTypeRight(@NotNull JoinType.Right node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformJoinTypeRight_metas(node);
            return node.getMetas() != new_metas ? (JoinType)new JoinType.Right(new_metas) : (JoinType)node;
        }

        @NotNull
        public Map<String, Object> transformJoinTypeRight_metas(@NotNull JoinType.Right node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public JoinType transformJoinTypeFull(@NotNull JoinType.Full node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformJoinTypeFull_metas(node);
            return node.getMetas() != new_metas ? (JoinType)new JoinType.Full(new_metas) : (JoinType)node;
        }

        @NotNull
        public Map<String, Object> transformJoinTypeFull_metas(@NotNull JoinType.Full node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public GroupingStrategy transformGroupingStrategy(@NotNull GroupingStrategy node) {
            GroupingStrategy groupingStrategy;
            Intrinsics.checkParameterIsNotNull(node, "node");
            GroupingStrategy groupingStrategy2 = node;
            if (groupingStrategy2 instanceof GroupingStrategy.GroupFull) {
                groupingStrategy = this.transformGroupingStrategyGroupFull((GroupingStrategy.GroupFull)node);
            } else if (groupingStrategy2 instanceof GroupingStrategy.GroupPartial) {
                groupingStrategy = this.transformGroupingStrategyGroupPartial((GroupingStrategy.GroupPartial)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return groupingStrategy;
        }

        @NotNull
        public GroupingStrategy transformGroupingStrategyGroupFull(@NotNull GroupingStrategy.GroupFull node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformGroupingStrategyGroupFull_metas(node);
            return node.getMetas() != new_metas ? (GroupingStrategy)new GroupingStrategy.GroupFull(new_metas) : (GroupingStrategy)node;
        }

        @NotNull
        public Map<String, Object> transformGroupingStrategyGroupFull_metas(@NotNull GroupingStrategy.GroupFull node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public GroupingStrategy transformGroupingStrategyGroupPartial(@NotNull GroupingStrategy.GroupPartial node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformGroupingStrategyGroupPartial_metas(node);
            return node.getMetas() != new_metas ? (GroupingStrategy)new GroupingStrategy.GroupPartial(new_metas) : (GroupingStrategy)node;
        }

        @NotNull
        public Map<String, Object> transformGroupingStrategyGroupPartial_metas(@NotNull GroupingStrategy.GroupPartial node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public OrderingSpec transformOrderingSpec(@NotNull OrderingSpec node) {
            OrderingSpec orderingSpec;
            Intrinsics.checkParameterIsNotNull(node, "node");
            OrderingSpec orderingSpec2 = node;
            if (orderingSpec2 instanceof OrderingSpec.Asc) {
                orderingSpec = this.transformOrderingSpecAsc((OrderingSpec.Asc)node);
            } else if (orderingSpec2 instanceof OrderingSpec.Desc) {
                orderingSpec = this.transformOrderingSpecDesc((OrderingSpec.Desc)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return orderingSpec;
        }

        @NotNull
        public OrderingSpec transformOrderingSpecAsc(@NotNull OrderingSpec.Asc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformOrderingSpecAsc_metas(node);
            return node.getMetas() != new_metas ? (OrderingSpec)new OrderingSpec.Asc(new_metas) : (OrderingSpec)node;
        }

        @NotNull
        public Map<String, Object> transformOrderingSpecAsc_metas(@NotNull OrderingSpec.Asc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public OrderingSpec transformOrderingSpecDesc(@NotNull OrderingSpec.Desc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformOrderingSpecDesc_metas(node);
            return node.getMetas() != new_metas ? (OrderingSpec)new OrderingSpec.Desc(new_metas) : (OrderingSpec)node;
        }

        @NotNull
        public Map<String, Object> transformOrderingSpecDesc_metas(@NotNull OrderingSpec.Desc node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public CaseSensitivity transformCaseSensitivity(@NotNull CaseSensitivity node) {
            CaseSensitivity caseSensitivity;
            Intrinsics.checkParameterIsNotNull(node, "node");
            CaseSensitivity caseSensitivity2 = node;
            if (caseSensitivity2 instanceof CaseSensitivity.CaseSensitive) {
                caseSensitivity = this.transformCaseSensitivityCaseSensitive((CaseSensitivity.CaseSensitive)node);
            } else if (caseSensitivity2 instanceof CaseSensitivity.CaseInsensitive) {
                caseSensitivity = this.transformCaseSensitivityCaseInsensitive((CaseSensitivity.CaseInsensitive)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return caseSensitivity;
        }

        @NotNull
        public CaseSensitivity transformCaseSensitivityCaseSensitive(@NotNull CaseSensitivity.CaseSensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformCaseSensitivityCaseSensitive_metas(node);
            return node.getMetas() != new_metas ? (CaseSensitivity)new CaseSensitivity.CaseSensitive(new_metas) : (CaseSensitivity)node;
        }

        @NotNull
        public Map<String, Object> transformCaseSensitivityCaseSensitive_metas(@NotNull CaseSensitivity.CaseSensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public CaseSensitivity transformCaseSensitivityCaseInsensitive(@NotNull CaseSensitivity.CaseInsensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformCaseSensitivityCaseInsensitive_metas(node);
            return node.getMetas() != new_metas ? (CaseSensitivity)new CaseSensitivity.CaseInsensitive(new_metas) : (CaseSensitivity)node;
        }

        @NotNull
        public Map<String, Object> transformCaseSensitivityCaseInsensitive_metas(@NotNull CaseSensitivity.CaseInsensitive node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ScopeQualifier transformScopeQualifier(@NotNull ScopeQualifier node) {
            ScopeQualifier scopeQualifier;
            Intrinsics.checkParameterIsNotNull(node, "node");
            ScopeQualifier scopeQualifier2 = node;
            if (scopeQualifier2 instanceof ScopeQualifier.Unqualified) {
                scopeQualifier = this.transformScopeQualifierUnqualified((ScopeQualifier.Unqualified)node);
            } else if (scopeQualifier2 instanceof ScopeQualifier.LocalsFirst) {
                scopeQualifier = this.transformScopeQualifierLocalsFirst((ScopeQualifier.LocalsFirst)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return scopeQualifier;
        }

        @NotNull
        public ScopeQualifier transformScopeQualifierUnqualified(@NotNull ScopeQualifier.Unqualified node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformScopeQualifierUnqualified_metas(node);
            return node.getMetas() != new_metas ? (ScopeQualifier)new ScopeQualifier.Unqualified(new_metas) : (ScopeQualifier)node;
        }

        @NotNull
        public Map<String, Object> transformScopeQualifierUnqualified_metas(@NotNull ScopeQualifier.Unqualified node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ScopeQualifier transformScopeQualifierLocalsFirst(@NotNull ScopeQualifier.LocalsFirst node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformScopeQualifierLocalsFirst_metas(node);
            return node.getMetas() != new_metas ? (ScopeQualifier)new ScopeQualifier.LocalsFirst(new_metas) : (ScopeQualifier)node;
        }

        @NotNull
        public Map<String, Object> transformScopeQualifierLocalsFirst_metas(@NotNull ScopeQualifier.LocalsFirst node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public SetQuantifier transformSetQuantifier(@NotNull SetQuantifier node) {
            SetQuantifier setQuantifier;
            Intrinsics.checkParameterIsNotNull(node, "node");
            SetQuantifier setQuantifier2 = node;
            if (setQuantifier2 instanceof SetQuantifier.All) {
                setQuantifier = this.transformSetQuantifierAll((SetQuantifier.All)node);
            } else if (setQuantifier2 instanceof SetQuantifier.Distinct) {
                setQuantifier = this.transformSetQuantifierDistinct((SetQuantifier.Distinct)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return setQuantifier;
        }

        @NotNull
        public SetQuantifier transformSetQuantifierAll(@NotNull SetQuantifier.All node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformSetQuantifierAll_metas(node);
            return node.getMetas() != new_metas ? (SetQuantifier)new SetQuantifier.All(new_metas) : (SetQuantifier)node;
        }

        @NotNull
        public Map<String, Object> transformSetQuantifierAll_metas(@NotNull SetQuantifier.All node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public SetQuantifier transformSetQuantifierDistinct(@NotNull SetQuantifier.Distinct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformSetQuantifierDistinct_metas(node);
            return node.getMetas() != new_metas ? (SetQuantifier)new SetQuantifier.Distinct(new_metas) : (SetQuantifier)node;
        }

        @NotNull
        public Map<String, Object> transformSetQuantifierDistinct_metas(@NotNull SetQuantifier.Distinct node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOp transformDmlOp(@NotNull DmlOp node) {
            DmlOp dmlOp;
            Intrinsics.checkParameterIsNotNull(node, "node");
            DmlOp dmlOp2 = node;
            if (dmlOp2 instanceof DmlOp.Insert) {
                dmlOp = this.transformDmlOpInsert((DmlOp.Insert)node);
            } else if (dmlOp2 instanceof DmlOp.InsertValue) {
                dmlOp = this.transformDmlOpInsertValue((DmlOp.InsertValue)node);
            } else if (dmlOp2 instanceof DmlOp.Set) {
                dmlOp = this.transformDmlOpSet((DmlOp.Set)node);
            } else if (dmlOp2 instanceof DmlOp.Remove) {
                dmlOp = this.transformDmlOpRemove((DmlOp.Remove)node);
            } else if (dmlOp2 instanceof DmlOp.Delete) {
                dmlOp = this.transformDmlOpDelete((DmlOp.Delete)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return dmlOp;
        }

        @NotNull
        public DmlOp transformDmlOpInsert(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_target = this.transformDmlOpInsert_target(node);
            Expr new_values = this.transformDmlOpInsert_values(node);
            Map<String, Object> new_metas = this.transformDmlOpInsert_metas(node);
            return node.getTarget() != new_target || node.getValues() != new_values || node.getMetas() != new_metas ? (DmlOp)new DmlOp.Insert(new_target, new_values, new_metas) : (DmlOp)node;
        }

        @NotNull
        public Expr transformDmlOpInsert_target(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getTarget());
        }

        @NotNull
        public Expr transformDmlOpInsert_values(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValues());
        }

        @NotNull
        public Map<String, Object> transformDmlOpInsert_metas(@NotNull DmlOp.Insert node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOp transformDmlOpInsertValue(@NotNull DmlOp.InsertValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_target = this.transformDmlOpInsertValue_target(node);
            Expr new_value = this.transformDmlOpInsertValue_value(node);
            Expr new_index = this.transformDmlOpInsertValue_index(node);
            OnConflict new_onConflict = this.transformDmlOpInsertValue_onConflict(node);
            Map<String, Object> new_metas = this.transformDmlOpInsertValue_metas(node);
            return node.getTarget() != new_target || node.getValue() != new_value || node.getIndex() != new_index || node.getOnConflict() != new_onConflict || node.getMetas() != new_metas ? (DmlOp)new DmlOp.InsertValue(new_target, new_value, new_index, new_onConflict, new_metas) : (DmlOp)node;
        }

        @NotNull
        public Expr transformDmlOpInsertValue_target(@NotNull DmlOp.InsertValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getTarget());
        }

        @NotNull
        public Expr transformDmlOpInsertValue_value(@NotNull DmlOp.InsertValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getValue());
        }

        @Nullable
        public Expr transformDmlOpInsertValue_index(@NotNull DmlOp.InsertValue node) {
            Expr expr;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr expr2 = node.getIndex();
            if (expr2 != null) {
                Expr expr3 = expr2;
                boolean bl = false;
                boolean bl2 = false;
                Expr it = expr3;
                boolean bl3 = false;
                expr = this.transformExpr(it);
            } else {
                expr = null;
            }
            return expr;
        }

        @Nullable
        public OnConflict transformDmlOpInsertValue_onConflict(@NotNull DmlOp.InsertValue node) {
            OnConflict onConflict;
            Intrinsics.checkParameterIsNotNull(node, "node");
            OnConflict onConflict2 = node.getOnConflict();
            if (onConflict2 != null) {
                OnConflict onConflict3 = onConflict2;
                boolean bl = false;
                boolean bl2 = false;
                OnConflict it = onConflict3;
                boolean bl3 = false;
                onConflict = this.transformOnConflict(it);
            } else {
                onConflict = null;
            }
            return onConflict;
        }

        @NotNull
        public Map<String, Object> transformDmlOpInsertValue_metas(@NotNull DmlOp.InsertValue node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOp transformDmlOpSet(@NotNull DmlOp.Set node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Assignment new_assignment = this.transformDmlOpSet_assignment(node);
            Map<String, Object> new_metas = this.transformDmlOpSet_metas(node);
            return node.getAssignment() != new_assignment || node.getMetas() != new_metas ? (DmlOp)new DmlOp.Set(new_assignment, new_metas) : (DmlOp)node;
        }

        @NotNull
        public Assignment transformDmlOpSet_assignment(@NotNull DmlOp.Set node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformAssignment(node.getAssignment());
        }

        @NotNull
        public Map<String, Object> transformDmlOpSet_metas(@NotNull DmlOp.Set node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOp transformDmlOpRemove(@NotNull DmlOp.Remove node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_target = this.transformDmlOpRemove_target(node);
            Map<String, Object> new_metas = this.transformDmlOpRemove_metas(node);
            return node.getTarget() != new_target || node.getMetas() != new_metas ? (DmlOp)new DmlOp.Remove(new_target, new_metas) : (DmlOp)node;
        }

        @NotNull
        public Expr transformDmlOpRemove_target(@NotNull DmlOp.Remove node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getTarget());
        }

        @NotNull
        public Map<String, Object> transformDmlOpRemove_metas(@NotNull DmlOp.Remove node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DmlOp transformDmlOpDelete(@NotNull DmlOp.Delete node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformDmlOpDelete_metas(node);
            return node.getMetas() != new_metas ? (DmlOp)new DmlOp.Delete(new_metas) : (DmlOp)node;
        }

        @NotNull
        public Map<String, Object> transformDmlOpDelete_metas(@NotNull DmlOp.Delete node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ConflictAction transformConflictAction(@NotNull ConflictAction node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            ConflictAction conflictAction = node;
            if (!(conflictAction instanceof ConflictAction.DoNothing)) {
                throw new NoWhenBranchMatchedException();
            }
            return this.transformConflictActionDoNothing((ConflictAction.DoNothing)node);
        }

        @NotNull
        public ConflictAction transformConflictActionDoNothing(@NotNull ConflictAction.DoNothing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformConflictActionDoNothing_metas(node);
            return node.getMetas() != new_metas ? (ConflictAction)new ConflictAction.DoNothing(new_metas) : (ConflictAction)node;
        }

        @NotNull
        public Map<String, Object> transformConflictActionDoNothing_metas(@NotNull ConflictAction.DoNothing node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DdlOp transformDdlOp(@NotNull DdlOp node) {
            DdlOp ddlOp;
            Intrinsics.checkParameterIsNotNull(node, "node");
            DdlOp ddlOp2 = node;
            if (ddlOp2 instanceof DdlOp.CreateTable) {
                ddlOp = this.transformDdlOpCreateTable((DdlOp.CreateTable)node);
            } else if (ddlOp2 instanceof DdlOp.DropTable) {
                ddlOp = this.transformDdlOpDropTable((DdlOp.DropTable)node);
            } else if (ddlOp2 instanceof DdlOp.CreateIndex) {
                ddlOp = this.transformDdlOpCreateIndex((DdlOp.CreateIndex)node);
            } else if (ddlOp2 instanceof DdlOp.DropIndex) {
                ddlOp = this.transformDdlOpDropIndex((DdlOp.DropIndex)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return ddlOp;
        }

        @NotNull
        public DdlOp transformDdlOpCreateTable(@NotNull DdlOp.CreateTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            SymbolPrimitive new_tableName = this.transformDdlOpCreateTable_tableName(node);
            Map<String, Object> new_metas = this.transformDdlOpCreateTable_metas(node);
            return node.getTableName() != new_tableName || node.getMetas() != new_metas ? (DdlOp)new DdlOp.CreateTable(new_tableName, new_metas) : (DdlOp)node;
        }

        @NotNull
        public SymbolPrimitive transformDdlOpCreateTable_tableName(@NotNull DdlOp.CreateTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformSymbolPrimitive(node.getTableName());
        }

        @NotNull
        public Map<String, Object> transformDdlOpCreateTable_metas(@NotNull DdlOp.CreateTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DdlOp transformDdlOpDropTable(@NotNull DdlOp.DropTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Identifier new_tableName = this.transformDdlOpDropTable_tableName(node);
            Map<String, Object> new_metas = this.transformDdlOpDropTable_metas(node);
            return node.getTableName() != new_tableName || node.getMetas() != new_metas ? (DdlOp)new DdlOp.DropTable(new_tableName, new_metas) : (DdlOp)node;
        }

        @NotNull
        public Identifier transformDdlOpDropTable_tableName(@NotNull DdlOp.DropTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformIdentifier(node.getTableName());
        }

        @NotNull
        public Map<String, Object> transformDdlOpDropTable_metas(@NotNull DdlOp.DropTable node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DdlOp transformDdlOpCreateIndex(@NotNull DdlOp.CreateIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Identifier new_indexName = this.transformDdlOpCreateIndex_indexName(node);
            List<Expr> new_fields = this.transformDdlOpCreateIndex_fields(node);
            Map<String, Object> new_metas = this.transformDdlOpCreateIndex_metas(node);
            return node.getIndexName() != new_indexName || node.getFields() != new_fields || node.getMetas() != new_metas ? (DdlOp)new DdlOp.CreateIndex(new_indexName, new_fields, new_metas) : (DdlOp)node;
        }

        @NotNull
        public Identifier transformDdlOpCreateIndex_indexName(@NotNull DdlOp.CreateIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformIdentifier(node.getIndexName());
        }

        /*
         * WARNING - void declaration
         */
        @NotNull
        public List<Expr> transformDdlOpCreateIndex_fields(@NotNull DdlOp.CreateIndex node) {
            void $this$mapTo$iv$iv;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Iterable $this$map$iv = node.getFields();
            boolean $i$f$map = false;
            Iterable iterable = $this$map$iv;
            Collection destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10));
            boolean $i$f$mapTo = false;
            for (Object item$iv$iv : $this$mapTo$iv$iv) {
                void it;
                Expr expr = (Expr)item$iv$iv;
                Collection collection = destination$iv$iv;
                boolean bl = false;
                Expr expr2 = this.transformExpr((Expr)it);
                collection.add(expr2);
            }
            return (List)destination$iv$iv;
        }

        @NotNull
        public Map<String, Object> transformDdlOpCreateIndex_metas(@NotNull DdlOp.CreateIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public DdlOp transformDdlOpDropIndex(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Identifier new_table = this.transformDdlOpDropIndex_table(node);
            Identifier new_keys = this.transformDdlOpDropIndex_keys(node);
            Map<String, Object> new_metas = this.transformDdlOpDropIndex_metas(node);
            return node.getTable() != new_table || node.getKeys() != new_keys || node.getMetas() != new_metas ? (DdlOp)new DdlOp.DropIndex(new_table, new_keys, new_metas) : (DdlOp)node;
        }

        @NotNull
        public Identifier transformDdlOpDropIndex_table(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformIdentifier(node.getTable());
        }

        @NotNull
        public Identifier transformDdlOpDropIndex_keys(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformIdentifier(node.getKeys());
        }

        @NotNull
        public Map<String, Object> transformDdlOpDropIndex_metas(@NotNull DdlOp.DropIndex node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ColumnComponent transformColumnComponent(@NotNull ColumnComponent node) {
            ColumnComponent columnComponent;
            Intrinsics.checkParameterIsNotNull(node, "node");
            ColumnComponent columnComponent2 = node;
            if (columnComponent2 instanceof ColumnComponent.ReturningWildcard) {
                columnComponent = this.transformColumnComponentReturningWildcard((ColumnComponent.ReturningWildcard)node);
            } else if (columnComponent2 instanceof ColumnComponent.ReturningColumn) {
                columnComponent = this.transformColumnComponentReturningColumn((ColumnComponent.ReturningColumn)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return columnComponent;
        }

        @NotNull
        public ColumnComponent transformColumnComponentReturningWildcard(@NotNull ColumnComponent.ReturningWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformColumnComponentReturningWildcard_metas(node);
            return node.getMetas() != new_metas ? (ColumnComponent)new ColumnComponent.ReturningWildcard(new_metas) : (ColumnComponent)node;
        }

        @NotNull
        public Map<String, Object> transformColumnComponentReturningWildcard_metas(@NotNull ColumnComponent.ReturningWildcard node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ColumnComponent transformColumnComponentReturningColumn(@NotNull ColumnComponent.ReturningColumn node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Expr new_expr = this.transformColumnComponentReturningColumn_expr(node);
            Map<String, Object> new_metas = this.transformColumnComponentReturningColumn_metas(node);
            return node.getExpr() != new_expr || node.getMetas() != new_metas ? (ColumnComponent)new ColumnComponent.ReturningColumn(new_expr, new_metas) : (ColumnComponent)node;
        }

        @NotNull
        public Expr transformColumnComponentReturningColumn_expr(@NotNull ColumnComponent.ReturningColumn node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformExpr(node.getExpr());
        }

        @NotNull
        public Map<String, Object> transformColumnComponentReturningColumn_metas(@NotNull ColumnComponent.ReturningColumn node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningMapping transformReturningMapping(@NotNull ReturningMapping node) {
            ReturningMapping returningMapping;
            Intrinsics.checkParameterIsNotNull(node, "node");
            ReturningMapping returningMapping2 = node;
            if (returningMapping2 instanceof ReturningMapping.ModifiedNew) {
                returningMapping = this.transformReturningMappingModifiedNew((ReturningMapping.ModifiedNew)node);
            } else if (returningMapping2 instanceof ReturningMapping.ModifiedOld) {
                returningMapping = this.transformReturningMappingModifiedOld((ReturningMapping.ModifiedOld)node);
            } else if (returningMapping2 instanceof ReturningMapping.AllNew) {
                returningMapping = this.transformReturningMappingAllNew((ReturningMapping.AllNew)node);
            } else if (returningMapping2 instanceof ReturningMapping.AllOld) {
                returningMapping = this.transformReturningMappingAllOld((ReturningMapping.AllOld)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return returningMapping;
        }

        @NotNull
        public ReturningMapping transformReturningMappingModifiedNew(@NotNull ReturningMapping.ModifiedNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformReturningMappingModifiedNew_metas(node);
            return node.getMetas() != new_metas ? (ReturningMapping)new ReturningMapping.ModifiedNew(new_metas) : (ReturningMapping)node;
        }

        @NotNull
        public Map<String, Object> transformReturningMappingModifiedNew_metas(@NotNull ReturningMapping.ModifiedNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningMapping transformReturningMappingModifiedOld(@NotNull ReturningMapping.ModifiedOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformReturningMappingModifiedOld_metas(node);
            return node.getMetas() != new_metas ? (ReturningMapping)new ReturningMapping.ModifiedOld(new_metas) : (ReturningMapping)node;
        }

        @NotNull
        public Map<String, Object> transformReturningMappingModifiedOld_metas(@NotNull ReturningMapping.ModifiedOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningMapping transformReturningMappingAllNew(@NotNull ReturningMapping.AllNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformReturningMappingAllNew_metas(node);
            return node.getMetas() != new_metas ? (ReturningMapping)new ReturningMapping.AllNew(new_metas) : (ReturningMapping)node;
        }

        @NotNull
        public Map<String, Object> transformReturningMappingAllNew_metas(@NotNull ReturningMapping.AllNew node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public ReturningMapping transformReturningMappingAllOld(@NotNull ReturningMapping.AllOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformReturningMappingAllOld_metas(node);
            return node.getMetas() != new_metas ? (ReturningMapping)new ReturningMapping.AllOld(new_metas) : (ReturningMapping)node;
        }

        @NotNull
        public Map<String, Object> transformReturningMappingAllOld_metas(@NotNull ReturningMapping.AllOld node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformType(@NotNull Type node) {
            Type type;
            Intrinsics.checkParameterIsNotNull(node, "node");
            Type type2 = node;
            if (type2 instanceof Type.NullType) {
                type = this.transformTypeNullType((Type.NullType)node);
            } else if (type2 instanceof Type.BooleanType) {
                type = this.transformTypeBooleanType((Type.BooleanType)node);
            } else if (type2 instanceof Type.SmallintType) {
                type = this.transformTypeSmallintType((Type.SmallintType)node);
            } else if (type2 instanceof Type.IntegerType) {
                type = this.transformTypeIntegerType((Type.IntegerType)node);
            } else if (type2 instanceof Type.FloatType) {
                type = this.transformTypeFloatType((Type.FloatType)node);
            } else if (type2 instanceof Type.RealType) {
                type = this.transformTypeRealType((Type.RealType)node);
            } else if (type2 instanceof Type.DoublePrecisionType) {
                type = this.transformTypeDoublePrecisionType((Type.DoublePrecisionType)node);
            } else if (type2 instanceof Type.DecimalType) {
                type = this.transformTypeDecimalType((Type.DecimalType)node);
            } else if (type2 instanceof Type.NumericType) {
                type = this.transformTypeNumericType((Type.NumericType)node);
            } else if (type2 instanceof Type.TimestampType) {
                type = this.transformTypeTimestampType((Type.TimestampType)node);
            } else if (type2 instanceof Type.CharacterType) {
                type = this.transformTypeCharacterType((Type.CharacterType)node);
            } else if (type2 instanceof Type.CharacterVaryingType) {
                type = this.transformTypeCharacterVaryingType((Type.CharacterVaryingType)node);
            } else if (type2 instanceof Type.MissingType) {
                type = this.transformTypeMissingType((Type.MissingType)node);
            } else if (type2 instanceof Type.StringType) {
                type = this.transformTypeStringType((Type.StringType)node);
            } else if (type2 instanceof Type.SymbolType) {
                type = this.transformTypeSymbolType((Type.SymbolType)node);
            } else if (type2 instanceof Type.BlobType) {
                type = this.transformTypeBlobType((Type.BlobType)node);
            } else if (type2 instanceof Type.ClobType) {
                type = this.transformTypeClobType((Type.ClobType)node);
            } else if (type2 instanceof Type.DateType) {
                type = this.transformTypeDateType((Type.DateType)node);
            } else if (type2 instanceof Type.TimeType) {
                type = this.transformTypeTimeType((Type.TimeType)node);
            } else if (type2 instanceof Type.TimeWithTimeZoneType) {
                type = this.transformTypeTimeWithTimeZoneType((Type.TimeWithTimeZoneType)node);
            } else if (type2 instanceof Type.StructType) {
                type = this.transformTypeStructType((Type.StructType)node);
            } else if (type2 instanceof Type.TupleType) {
                type = this.transformTypeTupleType((Type.TupleType)node);
            } else if (type2 instanceof Type.ListType) {
                type = this.transformTypeListType((Type.ListType)node);
            } else if (type2 instanceof Type.SexpType) {
                type = this.transformTypeSexpType((Type.SexpType)node);
            } else if (type2 instanceof Type.BagType) {
                type = this.transformTypeBagType((Type.BagType)node);
            } else {
                throw new NoWhenBranchMatchedException();
            }
            return type;
        }

        @NotNull
        public Type transformTypeNullType(@NotNull Type.NullType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeNullType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.NullType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeNullType_metas(@NotNull Type.NullType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeBooleanType(@NotNull Type.BooleanType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeBooleanType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.BooleanType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeBooleanType_metas(@NotNull Type.BooleanType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeSmallintType(@NotNull Type.SmallintType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeSmallintType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.SmallintType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeSmallintType_metas(@NotNull Type.SmallintType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeIntegerType(@NotNull Type.IntegerType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeIntegerType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.IntegerType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeIntegerType_metas(@NotNull Type.IntegerType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeFloatType(@NotNull Type.FloatType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_precision = this.transformTypeFloatType_precision(node);
            Map<String, Object> new_metas = this.transformTypeFloatType_metas(node);
            return node.getPrecision() != new_precision || node.getMetas() != new_metas ? (Type)new Type.FloatType(new_precision, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeFloatType_precision(@NotNull Type.FloatType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeFloatType_metas(@NotNull Type.FloatType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeRealType(@NotNull Type.RealType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeRealType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.RealType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeRealType_metas(@NotNull Type.RealType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeDoublePrecisionType(@NotNull Type.DoublePrecisionType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeDoublePrecisionType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.DoublePrecisionType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeDoublePrecisionType_metas(@NotNull Type.DoublePrecisionType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeDecimalType(@NotNull Type.DecimalType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_precision = this.transformTypeDecimalType_precision(node);
            LongPrimitive new_scale = this.transformTypeDecimalType_scale(node);
            Map<String, Object> new_metas = this.transformTypeDecimalType_metas(node);
            return node.getPrecision() != new_precision || node.getScale() != new_scale || node.getMetas() != new_metas ? (Type)new Type.DecimalType(new_precision, new_scale, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeDecimalType_precision(@NotNull Type.DecimalType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @Nullable
        public LongPrimitive transformTypeDecimalType_scale(@NotNull Type.DecimalType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getScale();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeDecimalType_metas(@NotNull Type.DecimalType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeNumericType(@NotNull Type.NumericType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_precision = this.transformTypeNumericType_precision(node);
            LongPrimitive new_scale = this.transformTypeNumericType_scale(node);
            Map<String, Object> new_metas = this.transformTypeNumericType_metas(node);
            return node.getPrecision() != new_precision || node.getScale() != new_scale || node.getMetas() != new_metas ? (Type)new Type.NumericType(new_precision, new_scale, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeNumericType_precision(@NotNull Type.NumericType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @Nullable
        public LongPrimitive transformTypeNumericType_scale(@NotNull Type.NumericType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getScale();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeNumericType_metas(@NotNull Type.NumericType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeTimestampType(@NotNull Type.TimestampType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeTimestampType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.TimestampType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeTimestampType_metas(@NotNull Type.TimestampType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeCharacterType(@NotNull Type.CharacterType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_length = this.transformTypeCharacterType_length(node);
            Map<String, Object> new_metas = this.transformTypeCharacterType_metas(node);
            return node.getLength() != new_length || node.getMetas() != new_metas ? (Type)new Type.CharacterType(new_length, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeCharacterType_length(@NotNull Type.CharacterType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getLength();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeCharacterType_metas(@NotNull Type.CharacterType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeCharacterVaryingType(@NotNull Type.CharacterVaryingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_length = this.transformTypeCharacterVaryingType_length(node);
            Map<String, Object> new_metas = this.transformTypeCharacterVaryingType_metas(node);
            return node.getLength() != new_length || node.getMetas() != new_metas ? (Type)new Type.CharacterVaryingType(new_length, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeCharacterVaryingType_length(@NotNull Type.CharacterVaryingType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getLength();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeCharacterVaryingType_metas(@NotNull Type.CharacterVaryingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeMissingType(@NotNull Type.MissingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeMissingType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.MissingType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeMissingType_metas(@NotNull Type.MissingType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeStringType(@NotNull Type.StringType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeStringType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.StringType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeStringType_metas(@NotNull Type.StringType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeSymbolType(@NotNull Type.SymbolType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeSymbolType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.SymbolType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeSymbolType_metas(@NotNull Type.SymbolType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeBlobType(@NotNull Type.BlobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeBlobType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.BlobType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeBlobType_metas(@NotNull Type.BlobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeClobType(@NotNull Type.ClobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeClobType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.ClobType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeClobType_metas(@NotNull Type.ClobType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeDateType(@NotNull Type.DateType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeDateType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.DateType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeDateType_metas(@NotNull Type.DateType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeTimeType(@NotNull Type.TimeType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_precision = this.transformTypeTimeType_precision(node);
            Map<String, Object> new_metas = this.transformTypeTimeType_metas(node);
            return node.getPrecision() != new_precision || node.getMetas() != new_metas ? (Type)new Type.TimeType(new_precision, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeTimeType_precision(@NotNull Type.TimeType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeTimeType_metas(@NotNull Type.TimeType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeTimeWithTimeZoneType(@NotNull Type.TimeWithTimeZoneType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive new_precision = this.transformTypeTimeWithTimeZoneType_precision(node);
            Map<String, Object> new_metas = this.transformTypeTimeWithTimeZoneType_metas(node);
            return node.getPrecision() != new_precision || node.getMetas() != new_metas ? (Type)new Type.TimeWithTimeZoneType(new_precision, new_metas) : (Type)node;
        }

        @Nullable
        public LongPrimitive transformTypeTimeWithTimeZoneType_precision(@NotNull Type.TimeWithTimeZoneType node) {
            LongPrimitive longPrimitive;
            Intrinsics.checkParameterIsNotNull(node, "node");
            LongPrimitive longPrimitive2 = node.getPrecision();
            if (longPrimitive2 != null) {
                LongPrimitive longPrimitive3 = longPrimitive2;
                boolean bl = false;
                boolean bl2 = false;
                LongPrimitive it = longPrimitive3;
                boolean bl3 = false;
                longPrimitive = this.transformLongPrimitive(it);
            } else {
                longPrimitive = null;
            }
            return longPrimitive;
        }

        @NotNull
        public Map<String, Object> transformTypeTimeWithTimeZoneType_metas(@NotNull Type.TimeWithTimeZoneType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeStructType(@NotNull Type.StructType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeStructType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.StructType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeStructType_metas(@NotNull Type.StructType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeTupleType(@NotNull Type.TupleType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeTupleType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.TupleType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeTupleType_metas(@NotNull Type.TupleType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeListType(@NotNull Type.ListType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeListType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.ListType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeListType_metas(@NotNull Type.ListType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeSexpType(@NotNull Type.SexpType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeSexpType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.SexpType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeSexpType_metas(@NotNull Type.SexpType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }

        @NotNull
        public Type transformTypeBagType(@NotNull Type.BagType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            Map<String, Object> new_metas = this.transformTypeBagType_metas(node);
            return node.getMetas() != new_metas ? (Type)new Type.BagType(new_metas) : (Type)node;
        }

        @NotNull
        public Map<String, Object> transformTypeBagType_metas(@NotNull Type.BagType node) {
            Intrinsics.checkParameterIsNotNull(node, "node");
            return this.transformMetas(node.getMetas());
        }
    }

    @Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u00000\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\b\u0010\u0003\u001a\u00020\u0004H\u0007J.\u0010\u0005\u001a\u0002H\u0006\"\b\b\u0000\u0010\u0006*\u00020\u00072\u0017\u0010\b\u001a\u0013\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u0002H\u00060\t\u00a2\u0006\u0002\b\n\u00a2\u0006\u0002\u0010\u000bJ\u000e\u0010\f\u001a\u00020\u00072\u0006\u0010\r\u001a\u00020\u000eJ\u000e\u0010\f\u001a\u00020\u00072\u0006\u0010\r\u001a\u00020\u000f\u00a8\u0006\u0010"}, d2={"Lorg/partiql/lang/domains/PartiqlAst$Companion;", "", "()V", "BUILDER", "Lorg/partiql/lang/domains/PartiqlAst$Builder;", "build", "T", "Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "block", "Lkotlin/Function1;", "Lkotlin/ExtensionFunctionType;", "(Lkotlin/jvm/functions/Function1;)Lorg/partiql/lang/domains/PartiqlAst$PartiqlAstNode;", "transform", "element", "Lcom/amazon/ionelement/api/AnyElement;", "Lcom/amazon/ionelement/api/SexpElement;", "lang"})
    public static final class Companion {
        @JvmStatic
        @NotNull
        public final Builder BUILDER() {
            return PartiqlAstBuilder.INSTANCE;
        }

        @NotNull
        public final <T extends PartiqlAstNode> T build(@NotNull Function1<? super Builder, ? extends T> block) {
            Intrinsics.checkParameterIsNotNull(block, "block");
            return (T)((PartiqlAstNode)block.invoke(PartiqlAstBuilder.INSTANCE));
        }

        @NotNull
        public final PartiqlAstNode transform(@NotNull AnyElement element) {
            Intrinsics.checkParameterIsNotNull(element, "element");
            return this.transform(element.asSexp());
        }

        @NotNull
        public final PartiqlAstNode transform(@NotNull SexpElement element) {
            Intrinsics.checkParameterIsNotNull(element, "element");
            return (PartiqlAstNode)new IonElementTransformer().transform(element);
        }

        private Companion() {
        }

        public /* synthetic */ Companion(DefaultConstructorMarker $constructor_marker) {
            this();
        }
    }
}

